{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-yunxinggongkuang.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-yunxinggongkuang.vue","mtime":1577669404027},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\r\nimport GetDataMethods from \"../../assets/commonJS/GetDataMethods\"; // 获取数据方法\r\nimport { timingSafeEqual } from \"crypto\";\r\nexport default {\r\n  props: {\r\n    info: {}\r\n  },\r\n  data() {\r\n    return {\r\n      // 激活标签栏\r\n      activeName: \"zhuangtaishuju\",\r\n      // 站点\r\n      siteInfo: {},\r\n      // 表格\r\n      table: {\r\n        // 状态数据\r\n        zhuangtaishuju: {\r\n          // 表头设置\r\n          columns: {},\r\n          // 正在激活的表头\r\n          activeColumns: [\r\n            {\r\n              type: \"index\",\r\n              title: \" \",\r\n              width: 60,\r\n              align: \"center\",\r\n              // 自定义序号\r\n              indexMethod(item) {\r\n\r\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                return index;\r\n              },\r\n              ellipsis: true\r\n            },\r\n            {\r\n              title: \"时间\",\r\n              key: \"tm\",\r\n              // width: 150,\r\n              align: \"center\"\r\n            },\r\n            {\r\n              title: \"电压(v)\",\r\n              width: 110,\r\n              key: \"VOL\",\r\n              align: \"center\",\r\n              render: (h, params) => {\r\n                console.log(\"params\", params);\r\n                console.log(\"VOL\", params.row.VOL < this.ZCDY.VOLMIN || params.row.VOL > this.ZCDY.VOLMAX ? \"red\" : \"black\");\r\n                return h(\r\n                  \"div\",\r\n                  {\r\n                    style: {\r\n                      color: params.row.VOL < this.ZCDY.VOLMIN || params.row.VOL > this.ZCDY.VOLMAX ? \"red\" : \"black\"\r\n                    }\r\n                  },\r\n                  params.row.VOL\r\n                );\r\n              }\r\n            },\r\n            {\r\n              width: 120,\r\n              title: \"通讯状态\",\r\n              key: \"cs\",\r\n              align: \"center\",\r\n              render: (h, params) => {\r\n                // console.log(\"params\", params);\r\n                // console.log(\"CS\", params.row.CS == \"正常\" ? \"black\" : \"red\");\r\n                return h(\r\n                  \"div\",\r\n                  {\r\n                    style: {\r\n                      color: params.row.cs == \"正常\" ? \"black\" : \"red\"\r\n                    }\r\n                  },\r\n                  params.row.cs\r\n                );\r\n              }\r\n            }\r\n          ],\r\n          // 表体内容\r\n          Rows: [],\r\n          // 过滤后的表体内容\r\n          Rows_filter: [],\r\n          // 日期时间选择器的选项配置\r\n          datePickerOptions: {\r\n            shortcuts: [\r\n              {\r\n                text: \"最近6小时\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 6);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              },\r\n              {\r\n                text: \"最近12小时\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 12);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              },\r\n              {\r\n                text: \"最近24小时\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              },\r\n              {\r\n                text: \"最近36小时\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 36);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              },\r\n              {\r\n                text: \"最近72小时\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 72);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          // 日期时间选择器类型\r\n          datePickerType: \"datetimerange\",\r\n          // 日期时间选择器值\r\n          date: null,\r\n          // 表格是否加载中\r\n          loading: false,\r\n          // 当前页\r\n          currentPage: 1,\r\n          // 每页显示数量\r\n          pageSizes: 20,\r\n          // 总条数\r\n          total: 0,\r\n          // 表格高度\r\n          height: 430\r\n        }\r\n      },\r\n      // 图形\r\n      chart: {\r\n        zhuangtaishuju: null\r\n      },\r\n      //   日期数据\r\n      date: {\r\n        shuiqing: \"\"\r\n      },\r\n      // 输入框对象\r\n      input: {\r\n        // 关系曲线换算的\r\n        huansuan: {\r\n          waterLever: \"\",\r\n          flowLever: \"\"\r\n        }\r\n      },\r\n      //   导出按钮加载控制\r\n      outPutLoading: false,\r\n      //   导出确认对话框控制\r\n      outPutModal: false,\r\n      // 整块区域的加载控制\r\n      boxLoading: false,\r\n      //正常电压范围\r\n      ZCDY:{},\r\n    };\r\n  },\r\n  mixins: [FilterMethods,GetDataMethods],\r\n  methods: {\r\n    //   导出站点信息\r\n    outPutSiteInfo() {\r\n      //   关闭导出确认对话框\r\n      this.outPutModal = false;\r\n      //   按钮加载\r\n      this.outPutLoading = true;\r\n      setTimeout(() => {\r\n        this.outPutLoading = false;\r\n        this.$Modal.success({\r\n          title: \"关于导出\",\r\n          content: \"站点信息表导出成功\"\r\n        });\r\n      }, 500);\r\n    },\r\n    //   确认导出\r\n    outPutSure() {\r\n      this.outPutSiteInfo();\r\n    },\r\n    // 搜索\r\n    search() {\r\n      // 表格加载中\r\n      this.table.loading = true;\r\n      setTimeout(() => {\r\n        // var newList = this.featrue.Rows.map((val, index) => {\r\n        //   return val.attributes;\r\n        // });\r\n\r\n        // this.table.Rows = newList;\r\n        // 取消表格加载\r\n        this.table.loading = false;\r\n\r\n      }, 1000);\r\n    },\r\n    // 绘图\r\n    createChart(idName) {\r\n      let myChart = this.$echarts.init(document.getElementById(idName));\r\n\r\n      myChart.setOption({\r\n        // title: {\r\n        //   text: this.info.STNM,\r\n        //   backgroundColor:\"rgb(200,200,200)\"\r\n        // },\r\n        tooltip: {\r\n          trigger: \"axis\"\r\n        },\r\n        legend: {\r\n          data: [\"电压\", \"电压范围\"]\r\n        },\r\n        // toolbox: {\r\n        //   show: true,\r\n        //   feature: {\r\n        //     mark: { show: true },\r\n        //     dataView: { show: true, readOnly: false },\r\n        //     magicType: { show: true, type: [\"line\", \"bar\"] },\r\n        //     restore: { show: true },\r\n        //     saveAsImage: { show: true }\r\n        //   }\r\n        // },\r\n        // calculable: true,\r\n        animation: false,\r\n        xAxis: [\r\n          {\r\n            type: \"category\",\r\n            boundaryGap: false,\r\n            data: [\r\n              \"00:00-02:00\",\r\n              \"02:00-04:00\",\r\n              \"04:00-06:00\",\r\n              \"06:00-08:00\",\r\n              \"08:00-10:00\"\r\n            ]\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            name: \"电压 v\",\r\n            type: \"value\",\r\n            axisLabel: {\r\n              formatter: \"{value}\"\r\n            }\r\n          },\r\n          {\r\n            name: \"电压范围 \",\r\n            type: \"value\",\r\n            axisLabel: {\r\n              formatter: \"{value} \"\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: \"电压\",\r\n            type: \"line\",\r\n            data: [11, 11, 15, 13, 12],\r\n            // markPoint: {\r\n            //   data: [\r\n            //     { type: \"max\", name: \"最大值\" },\r\n            //     { type: \"min\", name: \"最小值\" }\r\n            //   ]\r\n            // },\r\n            markLine: {\r\n              data: [{ type: \"average\", name: \"平均值\" }]\r\n            }\r\n          },\r\n          {\r\n            name: \"电压范围\",\r\n            type: \"line\",\r\n            data: [1, 4, 2, 5, 3],\r\n            yAxisIndex: 1,\r\n            markLine: {\r\n              data: [{ type: \"average\", name: \"平均值\" }]\r\n            }\r\n          }\r\n        ]\r\n      });\r\n    },\r\n    // 制图——电压线型图\r\n    createChart_zhuangtaishuju(id, tableType, data) {\r\n      var ele = document.getElementById(id);\r\n\r\n      if (data.length > 0) {\r\n        var echartData = this.$App.transform_YXGK_data_into_ehart_data(\r\n          data,\r\n          tableType\r\n        ); // 渠道水情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\r\n\r\n        if (!this.chart.zhuangtaishuju) {\r\n          this.chart.zhuangtaishuju = this.$echarts.init(ele);\r\n        }\r\n        this.chart.zhuangtaishuju.setOption({\r\n          title: {\r\n            text: echartData.chartName\r\n          },\r\n          tooltip: {\r\n            trigger: \"axis\"\r\n          },\r\n          // legend: {\r\n          //   data: [echartData.y1.name],\r\n          //   y: \"bottom\"\r\n          // },\r\n          toolbox: {\r\n            show: true,\r\n            feature: {\r\n              mark: { show: true },\r\n              magicType: { show: true, type: [\"line\", \"bar\"] },\r\n              restore: { show: true },\r\n              saveAsImage: { show: true }\r\n            }\r\n          },\r\n          calculable: true,\r\n          animation: true,\r\n          xAxis: [\r\n            {\r\n              type: \"category\",\r\n              boundaryGap: false,\r\n              data: echartData.x.list\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              name: `${echartData.y1.name} V`,\r\n              type: \"value\",\r\n              axisLabel: {\r\n                formatter: \"{value} \"\r\n              },\r\n              max: echartData.y1.max,\r\n              min: echartData.y1.min\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: echartData.y1.name,\r\n              type: \"line\",\r\n              data: echartData.y1.list\r\n            }\r\n          ]\r\n        });\r\n      }\r\n    },\r\n    // 加载站点数据\r\n    loadSiteData(data) {\r\n      this.siteInfo = data;\r\n    },\r\n    // 组件加载中\r\n    componentLoading() {\r\n      this.boxLoading = true;\r\n    },\r\n    // 取消组件加载\r\n    cancelComponentLoading() {\r\n      this.boxLoading = false;\r\n    },\r\n    // 处理页码切换\r\n    handleCurrentChange_zhuangtaishuju(index) {\r\n      this.table[\"zhuangtaishuju\"].currentPage = index;\r\n      this.search_StationStatus();\r\n    },\r\n    // 处理每页显示条数切换\r\n    handleSizeChange_zhuangtaishuju(pageSizes) {\r\n      this.table[\"zhuangtaishuju\"].pageSizes = pageSizes;\r\n      this.table[\"zhuangtaishuju\"].currentPasge = 1;\r\n      this.search_StationStatus();\r\n    },\r\n    // 获取对应水情历史数据表的数据\r\n    getTableData_zhuangtaishuju(callback) {\r\n      this.axios\r\n        .get(`/guanqu/admin/ST_StationStatus_H`, {\r\n          params: {\r\n            STCD: this.info.STCD\r\n          }\r\n        })\r\n        .then(res => {\r\n          var data = res.data.rows;\r\n          if (typeof callback == \"function\") {\r\n            callback(data);\r\n          }\r\n        });\r\n    },\r\n    // 更新水情历史数据表的数据\r\n    setTableData_zhuangtaishuju(data) {\r\n      this.table.zhuangtaishuju.Rows_filter = data;\r\n      console.log(685,data);\r\n    },\r\n    // 过滤水情历史数据表的数据\r\n    filterTableData_zhuangtaishuju(data, callback) {\r\n      var data = data.map(val => {\r\n        // val.TM = this.dateFilter(val.TM); // 过滤日期\r\n        val.VOL = this.Float_Filter(val.VOL,1);\r\n        return val;\r\n      });\r\n      if (typeof callback == \"function\") {\r\n        callback(data);\r\n      }\r\n    },\r\n    // 根据行政区划编码获取行政区划\r\n    getCompartmentByADDVCD(callback) {\r\n      var ADDVCD = this.info.rowinfo.ADDVCD;\r\n      if (ADDVCD && ADDVCD != \"\") {\r\n        this.axios\r\n          .get(`/guanqu/admin/WRP_AD_B`, {\r\n            params: {\r\n              AD_CD: ADDVCD\r\n            }\r\n          })\r\n          .then(res => {\r\n            var data = res.data.rows;\r\n            if (typeof callback == \"function\") {\r\n              callback(data);\r\n            }\r\n          });\r\n      }\r\n    },\r\n    // 处理日期时间选择器确定事件_状态数据\r\n    handleDatePickerChange(item) {\r\n      this.table.zhuangtaishuju.currentPage = 1;\r\n      this.search_StationStatus();\r\n    },\r\n    // 查询运行工况状态数据历史表\r\n    search_StationStatus() {\r\n      this.table.zhuangtaishuju.loading = true; // 加载中\r\n\r\n      var body = {\r\n        _page: this.table[\"zhuangtaishuju\"].currentPage || 1,\r\n        _page_size: this.table[\"zhuangtaishuju\"].pageSizes || 20,\r\n        STCD: this.info.STCD\r\n      };\r\n\r\n      // 如果有选择日期进行查询，根据表格类型传递参数\r\n      if (this.table.zhuangtaishuju.date) {\r\n        let time = this.$FilterData.elDatePicker_Filter(\r\n          this.table.zhuangtaishuju.date\r\n        );\r\n        time = time.split(',')\r\n        body.Time_min = time[1]\r\n        body.Time_max = time[2]\r\n        // console.log(body.TM.split());\r\n      }\r\n      // debugger;\r\n      this.$GetData.Survey_History_YXGK(\r\n        \"historyTable\",\r\n        body,\r\n        {\r\n          default: true,\r\n          myFilter: data => {\r\n            data.map(val => {\r\n              val.currentPage = body._page;\r\n              val.pageSizes = body._page_size;\r\n              return val;\r\n            });\r\n            return data;\r\n          }\r\n        },\r\n        data => {\r\n          this.setTableTotal_zhuangtaishuju(data.total); // 设置状态数据表格总条数\r\n          this.setTableData_zhuangtaishuju(data.data); // 更新状态数据表的数据\r\n          body._page_size = 999999999;\r\n          body._page = 1;\r\n          this.$GetData.Survey_History_YXGK(\r\n            \"historyTable\",\r\n            body,\r\n            {\r\n              default: true,\r\n              myFilter: data => {\r\n                data.map(val => {\r\n                  val.currentPage = body._page;\r\n                  val.pageSizes = body._page_size;\r\n                  return val;\r\n                });\r\n                return data;\r\n              }\r\n            },\r\n            chartData => {\r\n              this.createChart_zhuangtaishuju(\r\n                \"zhuangtaishujuChart\",\r\n                \"zhuangtaishuju\",\r\n                chartData.data\r\n              ); // 电压线型图\r\n            }\r\n          );\r\n\r\n\r\n\r\n\r\n\r\n          this.table.zhuangtaishuju.loading = false; // 加载取消\r\n        }\r\n      );\r\n    },\r\n    setTableTotal_zhuangtaishuju(total) {\r\n      this.table.zhuangtaishuju.total = total;\r\n    },\r\n    // 设置状态数据表默认查询日期\r\n    setTableDefaultDate_zhuangtaishuju() {\r\n      var timeSlot = this.$App.zeroPointToNowOfTheDay();\r\n\r\n      this.setTableDate(\"zhuangtaishuju\", timeSlot);\r\n    },\r\n    // 设置 xx表格 时间选择器值\r\n    setTableDate(tableName, val) {\r\n      this.table[tableName].date = val;\r\n    }\r\n  },\r\n  mounted() {\r\n\r\n    // 请求正常电压范围\r\n    // this.$GetData.Survey_Around_YXGK(null,body,false,data => {\r\n    //\r\n    // })\r\n    // 组件加载中\r\n    this.componentLoading();\r\n    // 获取详情数据\r\n    this.axios\r\n      // .get(`/guanqu/table/details?ID=${this.info.rowinfo.STCD}&pk=STCD`)\r\n      .get(`/guanqu/gongkuang/details?STCD=${this.info.rowinfo.STCD}`)\r\n      .then(res => {\r\n        this.getCompartmentByADDVCD(data => {\r\n          this.siteInfo.AD_NM = data[0].AD_NM;\r\n        });\r\n\r\n        //获取预警数据\r\n        this.axios.get('/guanqu/table/ST_StationStatusType').then(res =>{\r\n          // debugger;\r\n          console.log(res)\r\n          let dataVol = res.data.list[0],\r\n                  volMin = dataVol.VOLMIN,\r\n                  volMax = dataVol.VOLMAX\r\n          this.ZCDY.VOLMIN = volMin\r\n          this.ZCDY.VOLMAX = volMax\r\n        });\r\n\r\n        // 根据河流编码获取河流名\r\n        this.$GetData.Base_R_I(\r\n          {\r\n            RVCD: this.info.rowinfo.RVCD\r\n          },\r\n          true,\r\n          data => {\r\n            this.siteInfo.RVCD = data.data[0].RVNM;\r\n          }\r\n        );\r\n\r\n        // 根据流域编码获取流域名\r\n        this.$GetData.Base_B_I(\r\n          {\r\n            CTCD: this.info.rowinfo.CTCD\r\n          },\r\n          true,\r\n          data => {\r\n            this.siteInfo.CTCD = data.data[0].CTNM;\r\n          }\r\n        );\r\n        // 加载站点数据\r\n        this.loadSiteData(res.data);\r\n        // 组件加载取消\r\n        this.cancelComponentLoading();\r\n\r\n        // 设置状态数据表默认查询日期\r\n        this.setTableDefaultDate_zhuangtaishuju();\r\n        // 查询状态数据表的数据\r\n        this.search_StationStatus();\r\n      });\r\n  }\r\n};\r\n",null]}