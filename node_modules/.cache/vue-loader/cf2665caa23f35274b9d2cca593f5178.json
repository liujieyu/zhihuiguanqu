{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-yuqing.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-yuqing.vue","mtime":1577669404028},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\nimport GetDataMethods from \"../../assets/commonJS/GetDataMethods\"; // 获取数据方法\nimport {timingSafeEqual} from \"crypto\";\nimport {type} from \"os\";\nimport {types} from \"util\";\nimport {stat} from \"fs\";\nimport {filter} from \"minimatch\";\n\nexport default {\n    props: {\n        info: {}\n    },\n    data() {\n        return {\n            // 统计数据的表名\n            biao_yuqing: '',\n            // 激活标签栏\n            activeName: \"shuiqingshuju\",\n            // 站点\n            siteInfo: {},\n            //   多选框对象\n            checkBox: {},\n            // 降雨统计\n            jiangyu_tongji: {\n                rainSum: '',\n                rainVag: '',\n                rainMax: ''\n            },\n            //   选择框对象\n            select: {\n                // 当前激活的降雨数据快速查询选项\n                activeQuickSearchList: [],\n                // 查询绑定值\n                select: \"rec6\",\n                // 日期选择器绑定值\n                yuqing_datePicker: null,\n                // 降雨数据历史表\n                yuqingList: [\n                    {\n                        value: \"hourTable\",\n                        size: \"small\",\n                        // iconType: \"logo-facebook\",\n                        label: \"小时表\"\n                    },\n                    {\n                        value: \"dayTable\",\n                        size: \"small\",\n                        // iconType: \"logo-facebook\",\n                        label: \"日表\"\n                    },\n                    {\n                        value: \"tenDaysTable\",\n                        size: \"small\",\n                        // iconType: \"logo-facebook\",\n                        label: \"旬表\"\n                    },\n                    {\n                        value: \"monthTable\",\n                        size: \"small\",\n                        // iconType: \"logo-facebook\",\n                        label: \"月表\"\n                    },\n                    {\n                        value: \"yearTable\",\n                        size: \"small\",\n                        // iconType: \"logo-facebook\",\n                        label: \"年表\"\n                    }\n                ],\n                // 降雨数据历史表绑定值\n                yuqing_select: \"hourTable\",\n                // 旬选择器列表\n                xunList: [\n                    {\n                        label: \"上旬\",\n                        value: 0\n                    },\n                    {\n                        label: \"中旬\",\n                        value: 1\n                    },\n                    {\n                        label: \"下旬\",\n                        value: 2\n                    },\n                ],\n                // 旬选择器绑定值\n                xun_select: null\n            },\n            // 表格\n            table: {\n                // 水情\n                shuiqing: {\n                    // 表头设置\n                    columns: {\n                        // 历史表\n                        historyTable: [\n                            {\n                                title: \" \",\n                                type: \"index\",\n                                width: 50,\n                                align: \"center\",\n                                // 自定义序号\n                                indexMethod(item) {\n                                    var index =\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                                    return index;\n                                },\n                                ellipsis: true\n                            },\n                            {\n                                title: \"时间\",\n                                key: \"DT\",\n                                width: 180,\n                                align: \"center\",\n                                sortable: \"custom\"\n                            },\n                            {\n                                title: \"降雨(mm)\",\n                                // width: 130,\n                                key: \"P\",\n                                align: \"center\",\n                                sortable: \"custom\"\n                            }\n                        ],\n                        // 小时表\n                        hourTable: [\n                            {\n                                title: \" \",\n                                type: \"index\",\n                                width: 50,\n                                align: \"center\",\n                                // 自定义序号\n                                indexMethod(item) {\n                                    var index =\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                                    return index;\n                                },\n                                ellipsis: true\n                            },\n                            {\n                                title: \"时间\",\n                                key: \"DT\",\n                                width: 180,\n                                align: \"center\",\n                                sortable: \"custom\"\n                            },\n                            {\n                                title: \"降雨(mm)\",\n                                // width: 130,\n                                key: \"P\",\n                                align: \"center\",\n                                sortable: \"custom\"\n                            }\n                        ],\n                        // 日表\n                        dayTable: [\n                            {\n                                title: \" \",\n                                type: \"index\",\n                                width: 50,\n                                align: \"center\",\n                                // 自定义序号\n                                indexMethod(item) {\n                                    var index =\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n\n                                    return index;\n                                },\n                                ellipsis: true\n                            },\n                            {\n                                title: \"日期\",\n                                key: \"TM\",\n                                width: 150,\n                                align: \"center\",\n                                sortable: \"custom\"\n                            },\n                            {\n                                title: \"降雨(mm)\",\n                                // width: 130,\n                                key: \"p\",\n                                align: \"center\",\n                                sortable: \"custom\"\n                            }\n                        ],\n                        // 旬表\n                        tenDaysTable: [\n                            {\n                                title: \" \",\n                                type: \"index\",\n                                width: 50,\n                                align: \"center\",\n                                // 自定义序号\n                                indexMethod(item) {\n                                    var index =\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n\n                                    return index;\n                                },\n                                ellipsis: true\n                            },\n                            {\n                                title: \"时间\",\n                                key: \"DT\",\n                                width: 130,\n                                align: \"center\",\n                                sortable: \"custom\"\n                            },\n                            {\n                                title: \"降雨(mm)\",\n                                // width: 130,\n                                key: \"P\",\n                                align: \"center\",\n                                sortable: \"custom\"\n                            }\n                        ],\n                        // 月表\n                        monthTable: [\n                            {\n                                title: \" \",\n                                type: \"index\",\n                                width: 50,\n                                align: \"center\",\n                                // 自定义序号\n                                indexMethod(item) {\n                                    var index =\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n\n                                    return index;\n                                },\n                                ellipsis: true\n                            },\n                            {\n                                title: \"时间\",\n                                key: \"DT\",\n                                width: 130,\n                                align: \"center\",\n                                sortable: \"custom\"\n                            },\n                            {\n                                title: \"降雨(mm)\",\n                                // width: 130,\n                                key: \"P\",\n                                align: \"center\",\n                                sortable: \"custom\"\n                            }\n                        ],\n                        // 年表\n                        yearTable: [\n                            {\n                                title: \" \",\n                                type: \"index\",\n                                width: 50,\n                                align: \"center\",\n                                // 自定义序号\n                                indexMethod(item) {\n                                    var index =\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n\n                                    return index;\n                                },\n                                ellipsis: true\n                            },\n                            {\n                                title: \"时间\",\n                                key: \"YR\",\n                                width: 130,\n                                align: \"center\",\n                                sortable: \"custom\"\n                            },\n                            {\n                                title: \"降雨(mm)\",\n                                // width: 130,\n                                key: \"P\",\n                                align: \"center\",\n                                sortable: \"custom\"\n                            }\n                        ]\n                    },\n                    // 正在激活的表头\n                    activeColumns: [],\n                    // 表体内容\n                    Rows: [],\n                    // 过滤后的表体内容\n                    Rows_filter: [],\n                    // 日期时间选择器的选项配置\n                    datePickerOptions: {\n                        historyTable: {\n                            shortcuts: [\n                                {\n                                    text: \"最近6小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 6);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近12小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 12);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近24小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近36小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 36);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近72小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 72);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                }\n                            ]\n                        },\n                        hourTable: {\n                            shortcuts: [\n                                {\n                                    text: \"最近6小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 6);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近12小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 12);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近24小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近36小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 36);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近72小时\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 72);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                }\n                            ]\n                        },\n                        dayTable: {\n                            shortcuts: [\n                                {\n                                    text: \"最近10天\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 10);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近15天\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 15);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近30天\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近60天\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 60);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                },\n                                {\n                                    text: \"最近90天\",\n                                    onClick(picker) {\n                                        const end = new Date();\n                                        const start = new Date();\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n                                        picker.$emit(\"pick\", [start, end]);\n                                    }\n                                }\n                            ]\n                        },\n                        monthTable: {\n                            shortcuts: []\n                        }\n                    },\n                    // 日期时间选择器类型\n                    datePickerType: \"date\",\n                    // 日期时间选择器值\n                    date: null,\n                    // 开始年\n                    start_year: null,\n                    //结束年\n                    end_year: null,\n\n                    tenDays_value: null,\n\n                    tenDays_lable: null,\n                    btn_tenday: null,\n                    // 排序\n                    sort: null,\n                    // 表格是否加载中\n                    loading: false,\n                    // 总条数\n                    total: 0,\n                    // 当前页\n                    currentPage: 1,\n                    // 每页显示数量\n                    pageSizes: 20,\n                    // 表格高度\n                    height: 430\n                },\n                // 特征雨量\n                tezhengyuliang: {\n                    // 表头设置\n                    columns: [\n                        {\n                            title: \" \",\n                            type: \"index\",\n                            width: 50,\n                            align: \"center\",\n                            // 自定义序号\n                            indexMethod(item) {\n                                var index =\n                                    item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n\n                                return index;\n                            },\n                            ellipsis: true\n                        },\n                        {\n                            title: \"年份\",\n                            // width: 130,\n                            key: \"Years\",\n                            width: 150,\n                            align: \"center\",\n                            sortable: true\n                        },\n                        {\n                            title: \"最大时段降雨(mm)\",\n                            key: \"Max_DP\",\n\n                            align: \"center\",\n                            sortable: true\n                        }\n                    ],\n                    // 表体内容\n                    Rows: [],\n                    // 过滤后的表体内容\n                    Rows_filter: [],\n                    // 总条数\n                    total: 0,\n                    // 表格是否加载中\n                    loading: false,\n                    // 当前页\n                    currentPage: 1,\n                    // 日期时间选择器值\n                    date: null,\n                    // 日期时间选择器的选项配置\n                    datePickerOptions: {\n                        shortcuts: [\n                            {\n                                text: \"最近5年\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            },\n                            {\n                                text: \"最近3年\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 3);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            },\n                            {\n                                text: \"最近2年\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 2);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            },\n                            {\n                                text: \"最近1年\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 1);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            }\n                        ]\n                    },\n                    // 表格高度\n                    height: 410,\n                    // 每页显示数量\n                    pageSizes: 20,\n                    alarmData: {\n                        EWL: \"\", // 预警等级\n                        OD_P: \"\", // 24小时降雨\n                        TWH_P: \"\", // 12小时降雨\n                        SH_P: \"\" // 6小时降雨\n                    }\n                }\n            },\n            // 图形\n            chart: {\n                shuiqing: null\n            },\n            //   日期数据\n            date: {\n                shuiqing: \"\"\n            },\n            // 输入框对象\n            input: {\n                // 关系曲线换算的\n                huansuan: {\n                    waterLever: \"\",\n                    flowLever: \"\"\n                }\n            },\n            //   导出按钮加载控制\n            outPutLoading: false,\n            //   导出确认对话框控制\n            outPutModal: false,\n            // 整块区域的加载控制\n            boxLoading: false,\n            tableType: ''\n        };\n    },\n    mixins: [FilterMethods, GetDataMethods],\n    methods: {\n        //   导出站点信息\n        outPutSiteInfo() {\n            //   关闭导出确认对话框\n            this.outPutModal = false;\n            //   按钮加载\n            this.outPutLoading = true;\n            setTimeout(() => {\n                this.outPutLoading = false;\n                this.$Modal.success({\n                    title: \"关于导出\",\n                    content: \"站点信息表导出成功\"\n                });\n            }, 500);\n        },\n        //   确认导出\n        outPutSure() {\n            this.outPutSiteInfo();\n        },\n        // 日期时间选择器变化触发事件\n        // handleDatePickerChange(val, valType) {\n        //   var timeInterval = `${val[0].replace(/\\//g, \"-\")},${val[1].replace(\n        //     /\\//g,\n        //     \"-\"\n        //   )}`;\n        //   this.select.yuqing_datePicker = timeInterval;\n        // },\n        datePicke_on_ok(tableType) {\n            this.table[\"shuiqing\"].currentPage = 1; // 重置当前页\n            this.table.shuiqing.loading = true; // 表格加载中\n            var body = {\n                STCD: this.siteInfo.STCD,\n                TM: `bt,${this.select.yuqing_datePicker}`\n            };\n            var pageSizes = this.table.shuiqing.pageSizes;\n            var currentPage = 1;\n            this.getTableData_shuiqing(\n                tableType,\n                pageSizes,\n                currentPage,\n                body,\n                data => {\n                    console.log(data);\n                    this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\n                    this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\n                    this.table.shuiqing.loading = false; // 取消表格加载\n                }\n            );\n        },\n        // 查询\n        search_yuqing(tableType) {\n            var tableType = tableType || this.select.yuqing_select;\n            this.letTableLoading(\"shuiqing\"); // 表格加载中\n\n            // 传递参数\n            var body = {\n                STCD: this.siteInfo.STCD,\n                _page: this.table.shuiqing.currentPage || 1,\n                _page_size: this.table.shuiqing.pageSizes || 20\n            };\n\n            // 如果有选择排序，则传递排序参数\n            if (this.table.shuiqing.sort) {\n                var _sort = this.$FilterData.sort_Filter(this.table.shuiqing.sort);\n                if (_sort) {\n                    body._orderby = _sort;\n                }\n            } else {\n                switch (tableType) {\n                    case \"hourTable\":\n                        body._orderby = `DT `;\n                        break;\n\n                    case \"dayTable\":\n                        body._orderby = `dt `;\n                        break;\n\n                    case \"tenDaysTable\":\n                        body._orderby = `dt1 `;\n                        break;\n\n                    case \"monthTable\":\n                        body._orderby = `dt `;\n                        break;\n\n                    case \"yearTable\":\n                        body._orderby = `YR `;\n                        break;\n                }\n            }\n\n            // 如果有选择日期进行查询，根据表格类型传递参数\n            if (this.table.shuiqing.date && tableType !== \"yearTable\") {\n                switch (tableType) {\n                    case \"dayTable\":\n                        // body.DTT = this.$FilterData.elDatePicker_Filter(\n                        //   this.table.shuiqing.date\n                        // );\n                        var DTT = this.$FilterData\n                            .elDatePicker_Filter(this.table.shuiqing.date)\n                            .split(\",\");\n                        console.log(DTT[1].substr(0,10),DTT[2].substr(0,10))\n                        body.Time_min = DTT[1].substr(0,10);\n                        body.Time_max = DTT[2].substr(0,10);\n                        break;\n                    case \"hourTable\":\n                        // body.DTT = this.$FilterData.elDatePicker_Filter(\n                        //   this.table.shuiqing.date\n                        // );\n                        var DTT = this.$FilterData\n                            .elDatePicker_Filter(this.table.shuiqing.date)\n                            .split(\",\");\n                        body.Time_min = DTT[1];\n                        body.Time_max = DTT[2];\n                        break;\n                    case \"tenDaysTable\":\n                        // body.DTT = this.$FilterData.elDatePicker_Filter(\n                        //   this.table.shuiqing.date\n                        // );\n                        var DTT = this.$FilterData\n                            .elDatePicker_Filter(this.table.shuiqing.date)\n                            .split(\",\");\n                        body.Time_min = `${DTT[1].substr(0,7)}-01`;\n                        body.Time_max = `${DTT[2].substr(0,7)}-01`;\n                        break;\n                    case \"monthTable\":\n                        // body.DT = this.$FilterData.elDatePicker_Filter(\n                        //   this.table.shuiqing.date,\n                        //   \"monthTable\"\n                        // );\n                        var DTT = this.$FilterData\n                            .elDatePicker_Filter(this.table.shuiqing.date, \"monthTable\")\n                            .split(\",\");\n                        body.Time_min = `${DTT[1].substr(0,7)}-01`;\n                        body.Time_max = `${DTT[2].substr(0,7)}-01`;\n                        // body.YE = this.$FilterData.elDatePicker_Filter(\n                        //   this.table.shuiqing.date,\n                        //   \"monthTable\"\n                        // ).YE;\n                        // body.MON = this.$FilterData.elDatePicker_Filter(\n                        //   this.table.shuiqing.date,\n                        //   \"monthTable\"\n                        // ).MON;\n                        break;\n\n                }\n            }\n\n            if (tableType === \"yearTable\") {\n                var start_year = this.table.shuiqing.start_year;\n                var end_year = this.table.shuiqing.end_year;\n                if (start_year) {\n                    var start = new Date(start_year),\n                        end = end_year ? new Date(end_year) : new Date();\n                    body.Time_min = start.getFullYear()\n                    body.Time_max = end.getFullYear()\n                }\n                // console.log(body.yr_min,body.yr_max)\n\n            }\n\n            // if (tableType === \"tenDaysrange\") {\n            //     var start = new Date(this.table.shuiqing.start_year),\n            //         end = new Date(this.table.shuiqing.end_year);\n            //     body.yr_min = start.getFullYear()\n            //     body.yr_max = end.getFullYear()\n            //     console.log(body.yr_min,body.yr_max)\n            //\n            // }\n\n            // 获取雨情历史数据\n            this.$GetData.Survey_History_YQ(\n                tableType,\n                body,\n                {\n                    default: true,\n                    myFilter: data => {\n                        data.map(val => {\n                            val.currentPage = body._page;\n                            val.pageSizes = body._page_size;\n                            return val;\n                        });\n                        console.log(data);\n                        return data;\n                    }\n                },\n                data => {\n\n                    this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\n                    this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\n\n                    body._page_size = 999999999;\n                    body._page = 1;\n                    this.$GetData.Survey_History_YQ(\n                        tableType,\n                        body,\n                        {\n                            default: true,\n                            myFilter: data => {\n                                data.map(val => {\n                                    val.currentPage = body._page;\n                                    val.pageSizes = body._page_size;\n                                    return val;\n                                });\n                                return data;\n                            }\n                        },\n                        chartData => {\n                            console.log(\"chartData\", chartData)\n                            this.createChart_shuiqingshuju(\n                                \"shuiqingChart\",\n                                tableType,\n                                chartData.data\n                            ); // 水情表格\n                        }\n                    );\n\n\n                    let obj = {};\n                    obj.Time_max = body.Time_max;\n                    obj.Time_min = body.Time_min;\n                    obj.STCD = body.STCD;\n\n\n                    this.$GetData.statistics_rain_YQ(tableType, obj, false, (data) => {\n                        console.log(\"data\",data.data)\n                        var d = data.data\n\n                        // console.log(this);\n\n                        this.jiangyu_tongji.rainSum = d.LeiJiYuLiang;\n                        this.jiangyu_tongji.rainVag = d.PingJunJiangYu\n                        this.jiangyu_tongji.rainMax = d.ZuiDaJiangYu\n\n                    })\n                    this.cancelTableLoading(\"shuiqing\"); // 取消表格加载\n                }\n            );\n        },\n        // 查询关系曲线表格\n        search_guanxiquxian() {\n            this.letTableLoading(\"guanxiquxian\");\n\n            // 传递参数\n            var body = {\n                STCD: this.siteInfo.STCD,\n                _page: this.table[\"guanxiquxian\"].currentPage || 1,\n                _page_size: this.table[\"guanxiquxian\"].pageSizes || 20\n            };\n\n            // 如果有选择日期进行查询，根据表格类型传递参数\n            if (this.table.guanxiquxian.date) {\n                body.YR = this.$FilterData.elDatePicker_Filter(\n                    this.table.guanxiquxian.date,\n                    \"onlyYear\"\n                );\n            }\n\n            this.$GetData.Base_MonitoringSites(\n                \"Z_Q_relation\",\n                body,\n                {\n                    default: true,\n                    myFilter: data => {\n                        data.map(val => {\n                            val.currentPage = body._page;\n                            val.pageSizes = body._page_size;\n                            return val;\n                        });\n                        return data;\n                    }\n                },\n                data => {\n                    this.setTableTotal(\"guanxiquxian\", data.total);\n                    this.setTableData(\"guanxiquxian\", data.data);\n                    this.cancelTableLoading(\"guanxiquxian\");\n                }\n            );\n        },\n        // 设置表格总条数\n        setTableTotal(tableName, total) {\n            this.table[tableName].total = total;\n        },\n        // 表格加载中\n        letTableLoading(tableName) {\n            this.table[tableName].loading = true;\n        },\n        // 取消表格加载\n        cancelTableLoading(tableName) {\n            this.table[tableName].loading = false;\n        },\n        // 绘图\n        createChart_guanxiquxian(idName) {\n            let myChart = this.$echarts.init(document.getElementById(idName));\n\n            myChart.setOption({\n                title: {\n                    // text: this.info.STNM\n                    // subtext: \"纯属虚构\"\n                },\n                grid: {\n                    x: '50%'\n                },\n                tooltip: {\n                    trigger: \"axis\"\n                },\n                legend: {\n                    data: [\"流量\", \"水位\"]\n                },\n                toolbox: {\n                    show: true,\n                    feature: {\n                        mark: {show: true},\n                        dataView: {show: true, readOnly: false},\n                        magicType: {show: true, type: [\"line\", \"bar\"]},\n                        restore: {show: true},\n                        saveAsImage: {show: true}\n                    }\n                },\n                calculable: true,\n                xAxis: [\n                    {\n                        type: \"category\",\n                        boundaryGap: false,\n                        data: [\n                            \"00:00-02:00\",\n                            \"02:00-04:00\",\n                            \"04:00-06:00\",\n                            \"06:00-08:00\",\n                            \"08:00-10:00\"\n                        ]\n                    }\n                ],\n                yAxis: [\n                    {\n                        name: \"流量 m³/s\",\n                        type: \"value\",\n                        axisLabel: {\n                            formatter: \"{value}\"\n                        }\n                    },\n                    {\n                        name: \"水位 m\",\n                        type: \"value\",\n                        axisLabel: {\n                            formatter: \"{value} \"\n                        }\n                    }\n                ],\n                series: [\n                    {\n                        name: \"流量\",\n                        type: \"line\",\n                        data: [11, 11, 15, 13, 12, 13, 10],\n                        markLine: {\n                            data: [{type: \"average\", name: \"平均值\"}]\n                        }\n                    },\n                    {\n                        name: \"水位\",\n                        type: \"line\",\n                        data: [1, 4, 2, 5, 3, 2, 0],\n                        yAxisIndex: 1,\n                        markLine: {\n                            data: [{type: \"average\", name: \"平均值\"}],\n                            effect: {\n                                show: false,\n                                loop: true,\n                                period: 15,\n                                scaleSize: 10,\n                                color: null,\n                                shadowColor: null,\n                                shadowBlur: null\n                            }\n                        }\n                    }\n                ]\n            });\n        },\n\n        // 制图\n        createChart_shuiqingshuju(id, tableType, data) {\n            var ele = document.getElementById(id);\n            if (data.length > 0) {\n                // 雨情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\n                var echartData = this.$App.transform_YQ_data_into_ehart_data(data, tableType);\n\n\n                // x轴\n                // echartData.x.list = data.map((val, index, array) => {\n                //   // var time = `${index}:00 ~ ${index + 1}:00`;\n                //   var time = val.DT;\n                //   return time;\n                // });\n                echartData.x.list = echartData.x.list\n                if (!this.chart.shuiqing) {\n                    this.chart.shuiqing = this.$echarts.init(ele);\n                }\n                this.chart.shuiqing.setOption({\n                    title: {\n                        text: echartData.chartName\n                    },\n                    grid: {\n                        x: '20%'\n                    },\n                    tooltip: {\n                        trigger: \"axis\"\n                    },\n                    legend: {\n                        data: [echartData.y1.name],\n                        y: \"bottom\"\n                    },\n                    toolbox: {\n                        show: true,\n                        feature: {\n                            mark: {show: true},\n                            magicType: {show: true, type: [\"line\", \"bar\"]},\n                            restore: {show: true},\n                            saveAsImage: {show: true}\n                        }\n                    },\n                    calculable: true,\n                    animation: true,\n                    xAxis: [\n                        {\n                            type: \"category\",\n                            // boundaryGap: false,\n                            data: echartData.x.list,\n                            axisTick: {\n                                interval: parseInt(echartData.x.list.length / 4)\n                                //     function (index, val) {\n                                //     var listLength = echartData.x.list.length\n                                //     if (listLength >= 4) {\n                                //\n                                //         var tick = Math.round(listLength / 4);\n                                //         // console.log((index + 1) % tick === 0);\n                                //         // console.log('1575listLength',listLength);\n                                //         // console.log('1576tick',tick);\n                                //         if ((index + 1) % tick === 0) {\n                                //             return true;\n                                //         } else {\n                                //             return false;\n                                //         }\n                                //     } else {\n                                //         return true\n                                //     }\n                                // },\n                                ,\n                                length: 10\n                            },\n                            axisLabel: {\n                                interval: parseInt(echartData.x.list.length / 4)\n                                //     function (index, val) {\n                                //     var listLength = echartData.x.list.length\n                                //     if (listLength >= 4) {\n                                //         console.log(index);\n                                //         var tick = Math.round(listLength / 4);\n                                //         // console.log('1575listLength',listLength);\n                                //         // console.log('1576tick',tick);\n                                //         let a = (index + 1) % tick\n                                //         console.log(a);\n                                //         console.log((index + 1) % tick === 0);\n                                //         if ((index + 1) % tick === 0) {\n                                //             return true;\n                                //         } else {\n                                //             return false;\n                                //         }\n                                //     } else {\n                                //         return true\n                                //     }\n                                // },\n                                ,\n                                rotate: 10,\n                                margin: 16\n                            }\n                        }\n                    ],\n                    yAxis: [\n                        {\n                            name: `${echartData.y1.name} mm`,\n                            type: \"value\",\n                            axisLabel: {\n                                formatter: \"{value} \"\n                            },\n                            // scale: true\n                            // max: echartData.y1.max,\n                            // min: echartData.y1.min\n                        },\n                        // {\n                        //   name: `${echartData.y2.name}m`,\n                        //   type: \"value\",\n                        //   axisLabel: {\n                        //     formatter: \"{value} \"\n                        //   },\n                        //   scale: true\n                        //   // max: echartData.y2.max,\n                        //   // min: echartData.y2.min\n                        // }\n                    ],\n                    series: [\n                        {\n                            name: echartData.y1.name,\n                            type: \"bar\",\n                            data: echartData.y1.list,\n\n                            itemStyle: {\n                                //通常情况下：\n                                normal: {\n                                    //每个柱子的颜色即为colorList数组里的每一项，如果柱子数目多于colorList的长度，则柱子颜色循环使用该数组\n                                    color: function (params) {\n\n                                        switch (echartData.chartName) {\n                                            case \"小时表\":\n                                                if (params.data >= 25 && params.data < 50) return 'orange';\n                                                if (params.data > 50) return 'red';\n                                                return 'blue'\n                                                break\n                                            case \"日表\":\n                                                if (params.data >= 25 && params.data < 50) return 'orange';\n                                                if (params.data > 50) return 'red';\n                                                return 'blue'\n                                                break\n                                            case \"月表\":\n                                                if (params.data >= 100 && params.data < 250) return 'orange';\n                                                if (params.data > 250) return 'red';\n                                                return 'blue'\n                                                break\n                                            case \"旬表\":\n                                                if (params.data >= 100 && params.data < 250) return 'orange';\n                                                if (params.data > 250) return 'red';\n                                                return 'blue'\n                                                break\n                                            case \"年表\":\n                                                if (params.data >= 1400 && params.data < 1650) return 'orange';\n                                                if (params.data > 1650) return 'red';\n                                                return 'blue'\n                                                break\n\n                                        }\n\n                                        //     var colorList = [\n                                        //         (() => {\n                                        //             if ( === '小时表') {\n                                        //                 if (params.data >= 25 && params.data < 50) return 'orange';\n                                        //                 if (params.data > 50) return 'red';\n                                        //                 return 'blue'\n                                        //             }\n                                        //         })(),\n                                        //         (() => {\n                                        //             if (echartData.chartName === '月表') {\n                                        //                 if (params.data >= 100 && params.data < 250) return 'orange';\n                                        //                 if (params.data > 250) return 'red';\n                                        //                 return 'blue'\n                                        //             }\n                                        //         })(),\n                                        //         (() => {\n                                        //             if (echartData.chartName === '年表') {\n                                        //                 if (params.data >= 1400 && params.data < 1650) return 'orange';\n                                        //                 if (params.data > 1650) return 'red';\n                                        //                 return 'blue'\n                                        //             }\n                                        //         })()\n                                        // ]\n                                        //     return colorList[params.dataIndex];\n                                    }\n                                },\n                            }\n                        },\n                        // {\n                        //   name: echartData.y2.name,\n                        //   type: \"line\",\n                        //   data: echartData.y2.list,\n                        //   yAxisIndex: 1\n                        // },\n                        // {\n                        //   name: echartData.y3.name,\n                        //   type: \"bar\",\n                        //   data: echartData.y3.list,\n                        //   yAxisIndex: 1,\n                        //   barMaxWidth: 10\n                        // }\n                    ]\n                });\n                console.log(\"this.chart.shuiqing.setOption\",tableType)\n            }\n        },\n        // 加载站点数据\n        loadSiteData(data) {\n            this.siteInfo = data;\n        },\n        // 组件加载中\n        componentLoading() {\n            this.boxLoading = true;\n        },\n        // 取消组件加载\n        cancelComponentLoading() {\n            this.boxLoading = false;\n        },\n        // 处理页码切换_降雨数据\n        handleCurrentChange_shuiqing(index) {\n            this.table[\"shuiqing\"].currentPage = index;\n            this.search_yuqing(this.tableType);\n        },\n        // 处理页码切换_关系曲线\n        handleCurrentChange_guanxiquxian(index) {\n            this.table[\"guanxiquxian\"].currentPage = index;\n            this.search_guanxiquxian();\n        },\n        // 处理页码切换_特征雨量\n        handleCurrentChange_tezhengyuliang(index) {\n            this.table[\"tezhengyuliang\"].currentPage = index;\n            this.search_tezhengyuliang();\n        },\n        // 处理每页显示条数切换_降雨数据\n        handleSizeChange_shuiqing(pageSizes) {\n            this.table[\"shuiqing\"].pageSizes = pageSizes;\n            this.table[\"shuiqing\"].currentPage = 1;\n            this.search_yuqing(this.tableType);\n        },\n        // 处理每页显示条数切换_关系曲线\n        handleSizeChange_guanxiquxian(pageSizes) {\n            this.table[\"guanxiquxian\"].pageSizes = pageSizes;\n            this.table[\"guanxiquxian\"].currentPage = 1;\n            this.search_guanxiquxian();\n        },\n        // 处理每页显示条数切换_特征雨量\n        handleSizeChange_tezhengyuliang(pageSizes) {\n            this.table[\"tezhengyuliang\"].pageSizes = pageSizes;\n            this.table[\"tezhengyuliang\"].currentPage = 1;\n            this.search_tezhengyuliang();\n        },\n        // 分页过滤\n        pageFilter(currentPage, pageSizes, tableName) {\n            // 截取数组\n            var newList = this.table[tableName].Rows_filter.slice(\n                (currentPage - 1) * pageSizes,\n                currentPage * pageSizes\n            );\n\n            return newList;\n        },\n        // 水情历史数据表 当前正在激活的表头\n        setActiveColumns_shuiqing(tableType) {\n            console.log('********',tableType);\n            this.table.shuiqing.activeColumns = this.table.shuiqing.columns[tableType];\n            this.select.yuqing_select = tableType;\n        },\n        // 切换 水情历史数据表类型\n        tableTypeOnChange_shuiqing(tableType) {\n            console.log(tableType)\n            let tabName = ''\n            switch (tableType) {\n                case 'hourTable':\n                    tabName = '小时';\n                    break\n                case 'dayTable':\n                    tabName = '日';\n                    break\n                case  'tenDaysTable':\n                    tabName = '旬';\n                    break\n                case  'monthTable':\n                    tabName = '月';\n                    break\n                case  'yearTable':\n                    tabName = '年'\n            }\n            this.biao_yuqing = tabName;\n            this.table[\"shuiqing\"].currentPage = 1;\n            this.table[\"shuiqing\"].date = null;\n            this.table[\"shuiqing\"].sort = null;\n            this.tableType = tableType;\n            this.setDatePickerType_shuiqing(tableType); // 设置日期时间选择器的类型\n            // this.select[\"yuqing_select\"] = tableType; // 设置选中的表\n            // this.setSelectOption_quickSearch(tableType); // 设置数据表快速查询选择框内容\n            this.setActiveColumns_shuiqing(tableType); // 设置水情历史数据表 当前激活的表头\n            this.table.shuiqing.loading = true; // 表格加载中\n            if (this[`setTableDefaultDate_yuqing_${tableType}`]) {\n                this[`setTableDefaultDate_yuqing_${tableType}`]();\n            }\n            // 获取对应水情历史数据表的数据\n            this.search_yuqing(tableType);\n        },\n        // 设置降雨数据历史表默认查询日期\n        setTableDefaultDate_yuqing_historyTable() {\n            const end = new Date();\n            const start = eightPointOfTheDay();\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"shuiqing\", timeSlot);\n\n            function eightPointOfTheDay() {\n                var date = new Date();\n                date.setHours(8);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 设置降雨数据小时表默认查询日期\n        setTableDefaultDate_yuqing_hourTable() {\n            const end = new Date();\n            const start = eightPointOfTheDay();\n            // console.log(end.getHours());\n\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"shuiqing\", timeSlot);\n\n\n            function eightPointOfTheDay() {\n                var date = new Date();\n                date.setHours(8);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 设置降雨数据日表默认查询日期\n        setTableDefaultDate_yuqing_dayTable() {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"shuiqing\", timeSlot);\n\n            function zeroPointOfTheDay() {\n                var date = new Date();\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 设置降雨数据旬表默认查询日期\n        setTableDefaultDate_yuqing_tenDaysTable() {\n            const end = new Date();\n            const start = new Date();\n            console.log(start.getTime());\n            if(start.getHours() < 8){\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 30 * 6);\n            }\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"shuiqing\", timeSlot);\n\n            function zeroPointOfTheDay() {\n                var date = new Date();\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 设置降雨数据月表默认查询日期\n        setTableDefaultDate_yuqing_monthTable() {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 160);\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"shuiqing\", timeSlot);\n\n            function zeroPointOfTheDay() {\n                var date = new Date();\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 设置降雨数据旬表默认查询日期\n        setTableDefaultDate_yuqing_tenDaysTable() {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 180);\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"shuiqing\", timeSlot);\n\n            function zeroPointOfTheDay() {\n                var date = new Date();\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 设置降雨数据旬表默认查询日期\n        setTableDefaultDate_yuqing_yearTable() {\n            const end = new Date();\n            const start = new Date();\n            console.log(start.getHours(),start.getTime());\n            if(start.getHours() < 8){\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 30 * 12 * 5);\n            }\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"shuiqing\", timeSlot);\n\n            function zeroPointOfTheDay() {\n                var date = new Date();\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 设置日期时间选择器的类型\n        setDatePickerType_shuiqing(tableType) {\n            var datePickerType;\n            switch (tableType) {\n                case \"historyTable\":\n                    datePickerType = \"datetimerange\";\n                    break;\n                case \"hourTable\":\n                    datePickerType = \"datetimerange\";\n                    break;\n                case \"dayTable\":\n                    datePickerType = \"daterange\";\n                    break;\n                case \"tenDaysTable\":\n                    datePickerType = \"monthrange\";\n                    break;\n                case \"monthTable\":\n                    datePickerType = \"monthrange\";\n                    break;\n                case \"yearTable\":\n                    datePickerType = \"yearrange\";\n                    this.table.shuiqing.start_year = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24 * 365 * 5);\n                    this.table.shuiqing.end_year = new Date();\n                    break;\n            }\n            this.table[\"shuiqing\"].datePickerType = datePickerType;\n        },\n        // 设置数据表快速查询选择框内容\n        setSelectOption_quickSearch(tableType) {\n            this.select.activeQuickSearchList = this.select.quickSearch[tableType];\n            this.select.select = this.select.activeQuickSearchList[0]\n                ? this.select.activeQuickSearchList[0].value\n                : null; // 设置默认值为第一项\n        },\n        // 获取特征雨量表格的数据\n        getTableData_tezhengyuliang(\n            pageSizes,\n            currentPage,\n            body,\n            callback,\n            callback_beforeFilter\n        ) {\n            this.axios\n                .get(\n                    `/guanqu/admin/ST_G_CQORD?_page_size=${pageSizes ||\n                    20}&_page=${currentPage || 1}`,\n                    {\n                        params: body\n                    }\n                )\n                .then(res => {\n                    if (typeof callback_beforeFilter == \"function\") {\n                        callback_beforeFilter({\n                            data: res.data.rows || [],\n                            total: res.data.total || 0\n                        });\n                    }\n                    console.log(\"tezhengyuliang\", res);\n                    // 降雨数据过滤\n                    var data = res.data.rows.map(val => {\n                        val.currentPage = this.table.shuiqing.currentPage; // 添加数据当前页码\n                        val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\n                        val.TMMXQ = this.dateFilter(val.TMMXQ); // 日期过滤\n                        val.TMXQ = this.Z_Filter(val.TMXQ, 3); // 平均流量过滤\n                        val.YMXQZ = this.Z_Filter(val.YMXQZ); // 平均水位过滤\n                        val.WQ = this.Z_Filter(val.WQ, 3); // 小时累计水量过滤\n\n                        return val;\n                    });\n                    if (typeof callback == \"function\") {\n                        callback({\n                            data: data,\n                            total: res.data.total\n                        });\n                    }\n                });\n        },\n        // 获取特征雨量预警信息表的数据\n        getTableData_tezhengyuqing_Alarm(body, callback, callback_beforeFilter) {\n            this.axios\n                .get(`/guanqu/admin/ST_Canal_Alarm`, {\n                    params: body\n                })\n                .then(res => {\n                    var data = res.data.rows;\n                    if (typeof callback_beforeFilter == \"function\") {\n                        callback_beforeFilter(res);\n                    }\n                    // 降雨数据过滤\n                    var data = res.data.list.map(val => {\n                        val.Q = this.Z_Filter(val.Q, 3); // 流量过滤\n                        val.Z = this.Z_Filter(val.Z); // 水位过滤\n                        val.JYQ = this.Z_Filter(val.JYQ, 3); // 预警流量过滤\n                        val.JYZ = this.Z_Filter(val.JYZ); // 预警水位过滤\n\n                        return val;\n                    });\n                    if (typeof callback == \"function\") {\n                        callback(data);\n                    }\n                });\n        },\n        // 更新 XX 表格的数据\n        setTableData(tableName, data) {\n            this.table[tableName].Rows_filter = data;\n        },\n        // 获取对应关系曲线数据表的数据\n        getTableData_guanxiquxian(callback) {\n            this.axios\n                .get(`/guanqu/admin/ST_ZQRL_B`, {\n                    params: {\n                        STCD: this.info.STCD\n                    }\n                })\n                .then(res => {\n                    var data = res.data.rows;\n                    if (typeof callback == \"function\") {\n                        callback(data);\n                    }\n                });\n        },\n        // 更新水情历史数据表的数据\n        setTableData_guanxiquxian(data) {\n            this.table.guanxiquxian.Rows_filter = data;\n        },\n        // 根据关联编号获取关联站点\n        getRelateSiteByRelateCode(callback) {\n            var RELATECODE = this.info.RELATECODE;\n            if (RELATECODE && RELATECODE != 0) {\n                this.axios\n                    .get(`/guanqu/admin/ST_STBPRP_B`, {\n                        params: {\n                            RELATECODE: RELATECODE\n                        }\n                    })\n                    .then(res => {\n                        var data = res.data.rows;\n                        if (typeof callback == \"function\") {\n                            callback(data);\n                        }\n                    });\n            }\n        },\n        // 根据行政区划编码获取行政区划\n        getCompartmentByADDVCD(callback) {\n            var ADDVCD = this.info.rowinfo.ADDVCD;\n            if (ADDVCD && ADDVCD != \"\") {\n                this.axios\n                    .get(`/guanqu/admin/WRP_AD_B`, {\n                        params: {\n                            AD_CD: ADDVCD\n                        }\n                    })\n                    .then(res => {\n                        var data = res.data.rows;\n                        if (typeof callback == \"function\") {\n                            callback(data);\n                        }\n                    });\n            }\n        },\n        // 特征雨量表格查询\n        search_tezhengyuliang() {\n            this.letTableLoading(\"tezhengyuliang\"); // 表格加载中\n            // 传递站码参数\n            var body = {\n                STCD: this.siteInfo.STCD,\n                _page: this.table.tezhengyuliang.currentPage,\n                _page_size: this.table.tezhengyuliang.pageSizes\n            };\n\n            if (this.table.tezhengyuliang.date) {\n                body.YR = this.$FilterData.elDatePicker_Filter(\n                    this.table.tezhengyuliang.date,\n                    \"maxQTable\"\n                );\n            }\n\n            this.$GetData.Survey_History_QDSQ(\n                \"maxQTable\",\n                body,\n                {\n                    default: true,\n                    myFilter: data => {\n                        data.map(val => {\n                            val.currentPage = body._page;\n                            val.pageSizes = body._page_size;\n                            return val;\n                        });\n                        return data;\n                    }\n                },\n                data => {\n                    this.setTableTotal(\"tezhengyuliang\", data.total); // 根据返回的total数量, 设置表格总条数\n                    this.setTableData(\"tezhengyuliang\", data.data); // 更新特征降雨数据表的数据\n                    this.cancelTableLoading(\"tezhengyuliang\"); // 取消表格加载\n                }\n            );\n\n            // // 获取特征雨量表格数据\n            // this.getTableData_tezhengyuliang(pageSizes, currentPage, body, data => {\n\n            // });\n        },\n        // 设置特征雨量预警信息数据\n        setAlarmData_tezhengyuliang(data) {\n            this.table.tezhengyuliang.alarmData = data;\n        },\n        // 处理日期时间选择器确定事件_降雨数据\n        handleDatePickerChange(item) {\n            this.table.shuiqing.currentPage = 1;\n            this.search_yuqing(this.tableType);\n        },\n        handleDatePickerChange_tezhengyuliang() {\n            this.table.tezhengyuliang.currentPage = 1;\n            this.search_tezhengyuliang();\n        },\n        handleDatePickerChange_guanxiquxian(item) {\n            console.log(\"item\", item);\n            this.search_guanxiquxian();\n        },\n        // 设置 xx表格 时间选择器值\n        setTableDate(tableName, val) {\n            // 判断当前时间是否小于8时\n            if(val[1].getHours() < 8){\n                val[0].setTime(val[0] - 3600 * 1000 * 24);\n            }\n            // val[0].setTime(val[0] - 3600 * 1000 * 24);\n            console.log('++++++++++++',val[0].getHours());\n\n            this.table[tableName].date = val;\n        },\n        // 特征水情表默认查询时间\n        setTableDefaultDate_tezhengyuliang() {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"tezhengyuliang\", timeSlot);\n        },\n        // 排序\n        sort_change_shuiqing(item) {\n            this.table.shuiqing.sort = item;\n\n            this.search_yuqing(this.tableType);\n        }\n    },\n    mounted() {\n        // 组件加载中\n        this.componentLoading();\n        // 获取详情数据\n        this.axios\n            .get(`/guanqu/table/details?ID=${this.info.rowinfo.STCD}&pk=STCD`)\n            .then(res => {\n                // 站点信息\n                // 根据关联编号获取关联站点\n                this.getRelateSiteByRelateCode(data => {\n                    console.log(\"RelateSite\", data);\n                });\n                // 根据行政区划码获取行政区划名\n                this.getCompartmentByADDVCD(data => {\n                    this.siteInfo.AD_NM = data[0].AD_NM;\n                });\n\n\n                // 根据河流编码获取河流名\n                this.$GetData.Base_R_I(\n                    {\n                        RVCD: this.info.rowinfo.RVCD\n                    },\n                    true,\n                    data => {\n                        this.siteInfo.RVCD = data.data[0].RVNM;\n                    }\n                );\n\n                // 根据流域编码获取流域名\n                this.$GetData.Base_B_I(\n                    {\n                        CTCD: this.info.rowinfo.CTCD\n                    },\n                    true,\n                    data => {\n                        this.siteInfo.CTCD = data.data[0].CTNM;\n                    }\n                );\n\n                // 加载站点数据\n                this.loadSiteData(res.data);\n                // 加载取消\n                this.cancelComponentLoading();\n                // 降雨数据\n                console.log('+++++++', this.info);\n                this.tableTypeOnChange_shuiqing(this.info.rowinfo.tableType.yq); // 设置 默认的水情历史数据表\n                // 特征雨量最大流量表数据\n                if (this.setTableDefaultDate_tezhengyuliang) {\n                    this.setTableDefaultDate_tezhengyuliang(); // 默认查询日期\n                }\n                this.search_tezhengyuliang();\n                // 特征雨量预警信息表数据\n                this.getTableData_tezhengyuqing_Alarm(\n                    {\n                        STCD: this.siteInfo.STCD\n                    },\n                    data => {\n                        this.setAlarmData_tezhengyuliang(data[0]);\n                    }\n                );\n            });\n    }\n};\n",null]}