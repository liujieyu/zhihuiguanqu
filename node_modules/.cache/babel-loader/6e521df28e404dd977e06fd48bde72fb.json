{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\thread-loader\\dist\\cjs.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\BaseBox\\BaseBox-zhafazhuangtai.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\BaseBox\\BaseBox-zhafazhuangtai.vue","mtime":1577669404019},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _JSON$stringify from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import TipsZHAFAZHUANGTAI from \"@/components/BaseBox/Tips/Tips-zhafazhuangtai.vue\";\nimport FilterMethods from \"@/assets/commonJS/FilterMethods\";\nimport GetDataMethods from \"@/assets/commonJS/GetDataMethods\";\nexport default {\n  props: {\n    featrue: {\n      type: Object\n    },\n    search_FeatrueLayer: {\n      type: Function\n    }\n  },\n  components: {// TipsZHAFAZHUANGTAI\n  },\n  data: function data() {\n    return {\n      // 折叠面板对象\n      collapse: {\n        activeName: \"\",\n        list: []\n      },\n      // 地图对象\n      map: null,\n      // 该图层对象\n      JsonFlayer: null,\n      // 文字标注图层\n      TextGraphicsLayers: [],\n      // 提示 展示\n      tip: {\n        info_tip: null,\n        show_tip: false\n      },\n      // 表单数据\n      form: {\n        // 搜索框\n        search_str: \"\",\n        // 地址选择列表\n        adressList: [],\n        // 渠道选择列表\n        qudaoList: [],\n        social: [\"site\"],\n        siteList: [{\n          value: \"1\",\n          label: \"闸门\"\n        }, {\n          value: \"2\",\n          label: \"阀门\"\n        }],\n        // 状态选择列表\n        statusList: [{\n          value: \"1\",\n          label: \"开启\"\n        }, {\n          value: \"2\",\n          label: \"上升\"\n        }, {\n          value: \"3\",\n          label: \"下降\"\n        }, {\n          value: \"4\",\n          label: \"急停\"\n        }, {\n          value: \"5\",\n          label: \"达上限\"\n        }, {\n          value: \"6\",\n          label: \"达下限\"\n        }, {\n          value: \"7\",\n          label: \"故障\"\n        }, {\n          value: \"8\",\n          label: \"停电\"\n        }, {\n          value: \"9\",\n          label: \"本地控制\"\n        }, {\n          value: \"10\",\n          label: \"关闭\"\n        }],\n        // 多选框列表\n        checkBoxList: [{\n          value: \"site\",\n          size: \"small\",\n          span: 7,\n          // iconType: \"logo-facebook\",\n          title: \"站点\"\n        }, {\n          value: \"STNM\",\n          size: \"small\",\n          span: 7,\n          // iconType: \"logo-facebook\",\n          title: \"站名\"\n        }, {\n          value: \"upz\",\n          size: \"small\",\n          span: 9,\n          // iconType: \"logo-facebook\",\n          title: \"闸前水位\"\n        }, {\n          value: \"state\",\n          size: \"small\",\n          span: 7,\n          // iconType: \"logo-facebook\",\n          title: \"状态\"\n        }, {\n          value: \"q\",\n          size: \"small\",\n          span: 7,\n          // iconType: \"logo-facebook\",\n          title: \"流量\"\n        }, {\n          value: \"dwz\",\n          size: \"small\",\n          span: 9,\n          // iconType: \"logo-facebook\",\n          title: \"闸后水位\"\n        }],\n        // 地址选择\n        model_adress: [],\n        // 渠道\n        model_qudao: null,\n        // 站点\n        model_site: [\"1\", \"2\"],\n        // 状态\n        model_status1: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"] //model_status1: '1,2,3,4,5,6,7,8,9,10',\n\n      },\n      // 表格数据\n      table: {\n        // 表头设置\n        columns: [{\n          title: \"站名\",\n          key: \"STNM\",\n          width: 120,\n          align: \"center\",\n          fixed: \"left\",\n          sortable: \"custom\"\n        }, {\n          title: \"时间\",\n          key: \"TM\",\n          width: 120,\n          align: \"center\",\n          sortable: \"custom\"\n        }, {\n          title: \"状态\",\n          key: \"state\",\n          width: 90,\n          align: \"center\"\n        }, {\n          title: \"流量(m³/s)\",\n          key: \"q\",\n          width: 110,\n          align: \"center\",\n          sortable: \"custom\"\n        }, {\n          title: \"闸前水位(m)\",\n          key: \"upz\",\n          width: 120,\n          align: \"center\",\n          sortable: \"custom\"\n        }, {\n          title: \"闸后水位(m)\",\n          key: \"dwz\",\n          width: 120,\n          align: \"center\",\n          sortable: \"custom\"\n        }],\n        // 表体内容\n        Rows: [],\n        // 表格是否加载中\n        loading: false,\n        // 当前页\n        currentPage: 1,\n        // 每页显示数量\n        pageSizes: 20,\n        // 表体高度\n        height: 300\n      }\n    };\n  },\n  // 引入过滤方法到此组件\n  mixins: [FilterMethods, GetDataMethods],\n  methods: {\n    // 表格每一行点击事件\n    cellClick: function cellClick(item) {\n      var evt = new Object();\n      evt.graphic = new Object();\n      evt.graphic.attributes = item;\n      evt.graphic.attributes.rowinfo = JSON.parse(_JSON$stringify(item));\n      evt.graphic.attributes.rowinfo.tableType = {\n        zfsq: \"historyTable\"\n      };\n      var v = new Object();\n      v.itype = \"zhafazhuangtai\"; // 设置中心缩放\n\n      this.setMapCenterandZoom(item.LGTD, item.LTTD); // 取消所有站点的闪烁\n\n      this.$App.GraphicsLayer_Selection_clear(); // 对应站点闪烁\n\n      this.$App.add_Graphic_To_GraphicsLayer_Selection(item); // 展示抽屉详情框\n\n      this.$App.showDrawer(evt, v);\n    },\n    // 展示提示框\n    showTips: function showTips(item) {\n      // 隐藏之前提示框\n      console.log(item);\n      this.hideTips();\n      var div = \"<div>\\n        <div class=\\\"tip_row\\\">\\n                <span class=\\\"tip_col_5\\\">\\u65F6\\u95F4\\uFF1A</span>\\n                <span class=\\\"tip_col_7\\\">\".concat(item.rowinfo.TM ? item.rowinfo.TM.substr(0, 16) : \"\", \"</span>\\n                <span class=\\\"tip_col_5\\\">\\u6D41\\u91CF\\uFF1A</span>\\n                <span class=\\\"tip_col_7\\\">\").concat(this.$FilterData.Float_Filter(item.rowinfo.q, 3) == \"\" ? \"\" : this.$FilterData.Float_Filter(item.rowinfo.q, 3) + \"m³/s\", \"</span>\\n                <span class=\\\"tip_col_5\\\">\\u72B6\\u6001\\uFF1A</span>\\n                <span class=\\\"tip_col_7\\\">\").concat(item.rowinfo.state, \"</span>\\n              </div>\\n              <div class=\\\"divider\\\"></div>\\n              <div class=\\\"tip_row\\\">\\n                <span class=\\\"tip_col_5\\\">\\u95F8\\u524D\\u6C34\\u4F4D\\uFF1A</span>\\n                <span class=\\\"tip_col_7\\\" >\\n                  \").concat(this.$FilterData.Float_Filter(item.rowinfo.upz) == \"\" ? \"\" : this.$FilterData.Float_Filter(item.rowinfo.upz) + \"m\", \"\\n                </span>\\n                <span class=\\\"tip_col_5\\\" >\\u95F8\\u540E\\u6C34\\u4F4D\\uFF1A</span>\\n                <span class=\\\"tip_col_7\\\" >\\n                \").concat(this.$FilterData.Float_Filter(item.rowinfo.dwz) == \"\" ? \"\" : this.$FilterData.Float_Filter(item.rowinfo.dwz) + \"m\", \"</span>\\n\\n                </div>\\n              <div class=\\\"divider\\\"></div>\\n        <div class=\\\"waterLever\\\" >\\n\\n    <Row type=\\\"flex\\\" justify=\\\"center\\\">\\n      \\u9600\\u95E8\\u5DF2\\u5F00\\u9AD8\\u5EA6\\uFF1A\").concat(this.$FilterData.Float_Filter(item.rowinfo.OD) == \"\" ? \"\" : this.$FilterData.Float_Filter(item.rowinfo.OD) + \"m\", \"\\n    </Row>\\n    <div>\\n      <div id=\\\"\").concat(item.STCD, \"\\\" style=\\\"width: 100%;height: 400px;\\\"></div>\\n    </div>\\n  </div>\\n      </div>\");\n      this.map.infoWindow.resize(570, 650); // 提示框大小\n\n      this.map.infoWindow.setTitle(item.STNM); // 提示题目\n\n      this.map.infoWindow.setContent(div); // 提示内容\n      //获取坐标\n\n      var x = Number(item.LGTD);\n      var y = Number(item.LTTD); //如果basemap使用ArcGIS的就需要\n      //转换坐标系\n\n      x = x / 180.0 * 20037508.34;\n      if (y > 85.05112) y = 85.05112;\n      if (y < -85.05112) y = -85.05112;\n      y = Math.PI / 180.0 * y;\n      var tmp = Math.PI / 4.0 + y / 2.0;\n      y = 20037508.34 * Math.log(Math.tan(tmp)) / Math.PI; //位置点对象\n\n      var zoompoint = {\n        //spatialReference: {wkid: 4326},\n        spatialReference: this.map.spatialReference,\n        x: x,\n        y: y\n      };\n      this.map.infoWindow.show(zoompoint); // 提示位置\n      // 如果事件类型不是鼠标经过，则\n\n      if (item.eventType != \"mouse-over\") {\n        // 设置中心和缩放 (接受经纬度，和缩放比例)\n        this.setMapCenterandZoom(Number(item.LGTD) + 0.1, item.LTTD);\n      }\n\n      this.drawchart(item.STCD, item);\n    },\n    //绘制闸门图\n    drawchart: function drawchart(id, data) {\n      var achart = this.$echarts.init(document.getElementById(id));\n      console.log(achart);\n      achart.resize();\n      achart.setOption({\n        xAxis: {\n          type: 'category',\n          data: ['闸门']\n        },\n        yAxis: [{\n          inverse: true,\n          type: 'value',\n          min: 0,\n          max: data.rowinfo.Strobe_Hight,\n          axisLabel: {\n            show: false\n          }\n        }, {\n          name: \"闸门高度\",\n          type: 'value',\n          min: 0,\n          max: data.rowinfo.Strobe_Hight\n        }],\n        series: [{\n          data: [data.rowinfo.Strobe_Hight - data.rowinfo.OD],\n          type: 'bar'\n        }]\n      });\n    },\n    // 设置中心和缩放 (接受经纬度，和缩放比例)\n    setMapCenterandZoom: function setMapCenterandZoom(LGTD, LTTD, Zoom) {//koen 20190929\n      //暂时不允许点击，防止缩到全球地图的bug\n      //this.map.centerAndZoom([Number(LGTD), Number(LTTD)], Zoom || 1);\n    },\n    // 隐藏提示\n    hideTips: function hideTips() {\n      this.map.infoWindow.hide();\n      this.tip.show_tip = false; // 关闭提示框组件\n    },\n    // 表格加载\n    tableLoading: function tableLoading() {\n      this.table.loading = true;\n    },\n    // 表格加载取消\n    cancelTableLoading: function cancelTableLoading() {\n      this.table.loading = false;\n    },\n    // 加载表格数据\n    loadTableData: function loadTableData(data) {\n      // 加载站点数据\n      this.table.Rows = data;\n    },\n    getDataFromEnd: function getDataFromEnd(url, callback) {\n      // 获取表格数据 `/guanqu/gis/details?ID=${this.info.ID}`\n      this.axios.get(url).then(function (res) {\n        if (typeof callback == \"function\") {\n          callback(res);\n        }\n      });\n    },\n    // 查询\n    search: function search() {\n      var _this = this;\n\n      var body = new Object(); // 如果输入框有内容，添加站名过滤字段\n\n      if (this.form.search_str.length > 0) {\n        body[\"STNM\"] = \"\".concat(this.form.search_str);\n      } else {\n        body[\"STNM\"] = null;\n      } // 如果地址选择框有内容，添加行政区划过滤字段\n\n\n      if (this.form.model_adress && this.form.model_adress.length != 0) {\n        body[\"ADDVCD\"] = \"\".concat(this.$App.ADDVCD_Array_Filter(this.form.model_adress));\n      } else {\n        body[\"ADDVCD\"] = null;\n      } // 如果渠道选择框有内容，添加渠道过滤字段\n\n\n      if (this.form.model_qudao && this.form.model_qudao.length != 0) {\n        body[\"Canal_Code\"] = \"\".concat(this.$App.Canal_Code_Array_Filter(this.form.model_qudao));\n      } else {\n        body[\"Canal_Code\"] = null;\n      } // 如果站点类型选择框有内容，添加行政区划过滤字段\n\n\n      if (this.form.model_site && this.form.model_site.length != 0) {\n        body[\"CTYPE\"] = this.form.model_site.join(\",\");\n      } else {\n        body[\"CTYPE\"] = null;\n      }\n\n      console.log(this.form.model_status1); // 如果状态选择框有内容，添加行政区划过滤字段\n\n      if (this.form.model_status1) {\n        body[\"_status\"] = this.form.model_status1.join(\",\");\n      } else {\n        body[\"_status\"] = null;\n      }\n\n      this.tableLoading(); // 表格加载中\n\n      this.search_FeatrueLayer(\"zhafazhuangtai\", // 图层type类型\n      body, this.featrue, function (newFeatureLayerOBJ) {\n        _this.table.currentPage = 1;\n\n        _this.baseBox_init();\n\n        _this.cancelTableLoading(); //取消表格加载\n\n\n        _this.hideTips();\n      });\n    },\n    // 给图层对象添加方法\n    addEventToJsonFlayer: function addEventToJsonFlayer(JsonFlayer) {\n      var _this2 = this;\n\n      //当鼠标悬停在元素上\n      JsonFlayer.on(\"mouse-over\", function (evt) {\n        var attributes = evt.graphic.attributes;\n        attributes.eventType = \"mouse-over\";\n\n        _this2.showTips(attributes); // 给地图对象添加方法\n\n\n        _this2.addEventToMap();\n      }); //当鼠标悬停在元素上\n\n      JsonFlayer.on(\"mouse-out\", function (evt) {\n        _this2.hideTips();\n      });\n    },\n    // 给地图对象添加方法\n    addEventToMap: function addEventToMap() {\n      var _this3 = this;\n\n      this.map.on(\"click\", function () {\n        // 隐藏提示\n        _this3.hideTips();\n      });\n    },\n    // 处理页码切换\n    handleCurrentChange: function handleCurrentChange(index) {\n      this.table.currentPage = index;\n    },\n    // 处理每页显示条数切换\n    handleSizeChange: function handleSizeChange(pageSizes) {\n      this.table.pageSizes = pageSizes;\n      this.table.currentPage = 1;\n    },\n    // 分页过滤\n    pageFilter: function pageFilter(currentPage, pageSizes) {\n      var _currentPage = currentPage || this.table.currentPage;\n\n      var _pageSizes = pageSizes || this.table.pageSizes; // 截取数组\n\n\n      var newList = this.table.Rows_filter.slice((_currentPage - 1) * _pageSizes, _currentPage * _pageSizes);\n      return newList;\n    },\n    // 过滤table数据\n    filterTableData: function filterTableData() {\n      var _this4 = this;\n\n      this.table.Rows_filter = this.table.Rows.map(function (val) {\n        var val_clone = JSON.parse(_JSON$stringify(val)); // 时间过滤\n\n        val_clone.TM = _this4.dateFilter(val_clone.TM); // 闸前水位过滤\n\n        val_clone.upz = _this4.Z_Filter(val_clone.upz); // 闸后水位过滤\n\n        val_clone.dwz = _this4.Z_Filter(val_clone.dwz); // 流量过滤\n\n        val_clone.q = _this4.Z_Filter(val_clone.q, 3);\n        return val_clone;\n      });\n    },\n    // 选取一部分从父组件传来的数据作为表格的数据\n    getTableDataFormParent: function getTableDataFormParent() {\n      var tableData = this.featrue.Rows.map(function (val) {\n        return val.rowinfo;\n      });\n      return tableData;\n    },\n    // 获取图层对象,从父组件中\n    getJsonFlayerFormParent: function getJsonFlayerFormParent() {\n      this.JsonFlayer = this.featrue.LayerObject;\n    },\n    // 获取地图对象,从父组件中\n    getMapFormParent: function getMapFormParent() {\n      this.map = this.featrue.map;\n    },\n    // 往featrue对象里添加操作TextGraphicsLayer的对象，里面有移除所有TextGraphicsLayer的方法，和根据多选框添加文字标注图层的方法\n    addTextGraphicsLayerControllerToFeatrue: function addTextGraphicsLayerControllerToFeatrue() {\n      this.featrue.TextGraphicsLayerController = new Object();\n      this.featrue.TextGraphicsLayerController.removeAllTextGraphicsLayer = this.removeAllTextGraphicsLayer;\n      this.featrue.TextGraphicsLayerController.addTextGraphicsLayerByCheckGroup = this.addTextGraphicsLayerByCheckGroup;\n    },\n    // 多选框标记勾选触发事件\n    checkboxGroup_onChange: function checkboxGroup_onChange(onCheck_Array) {\n      this.removeAllTextGraphicsLayer(); // 清除所有文本标注图层\n\n      this.addTextGraphicsLayerByCheckGroup(); // 根据多选框添加文字标注图层\n    },\n    // 添加文字标注图层\n    addTextGraphicsLayer: function addTextGraphicsLayer(options) {\n      var textGraphicsLayer = new esri.layers.GraphicsLayer(); // 新增一个标注文本图层\n\n      textGraphicsLayer.textType = options.textType;\n      this.featrue.map.addLayer(textGraphicsLayer); // 给地图添加新增的标注文本图层\n\n      var Rows = this.featrue.Rows; //创建textsymbol文本标注\n\n      if (Rows.length > 0) {\n        //动态读取json数据源结果集\n        for (var i = 0; i < Rows.length; i++) {\n          var Row = Rows[i];\n          var point = new esri.geometry.Point(Row.geometry.x, Row.geometry.y, this.featrue.map.spatialReference); //定义文本symbol\n\n          var textsymbol = new esri.symbol.TextSymbol(Row.rowinfo[options.textType]) //动态设置文本值\n          .setColor(new dojo.Color(options.color || [55, 55, 55])) //setColor设置文本颜色\n          .setFont(new esri.symbol.Font(options.fontSize || \"10pt\") //setFont设置文本大小\n          .setWeight(esri.symbol.Font.WEIGHT_BOLD)) //setWeight设置文本粗体\n          .setOffset(options.offset_x || 0, options.offset_y || -25); //设置偏移方向\n\n          var graphic = new esri.Graphic(point, textsymbol);\n          textGraphicsLayer.add(graphic);\n        }\n      }\n\n      this.TextGraphicsLayers.push(textGraphicsLayer);\n    },\n    // 根据多选框添加文字标注图层\n    addTextGraphicsLayerByCheckGroup: function addTextGraphicsLayerByCheckGroup() {\n      var _this5 = this;\n\n      var textTypeList;\n      var indexOfSocial = this.form.social.indexOf(\"site\"); // 如果多选框里存在 site站点类型\n\n      if (indexOfSocial !== -1) {\n        this.featrue.LayerObject.show();\n        this.featrue.LayerObject_yujing.show();\n        textTypeList = this.form.social.filter(function (val) {\n          if (val != \"site\") {\n            return true;\n          }\n        });\n      } else {\n        this.featrue.LayerObject.hide();\n        this.featrue.LayerObject_yujing.hide();\n        textTypeList = this.form.social;\n      }\n\n      textTypeList.forEach(function (textType, index) {\n        var textGraphicsLayer = new esri.layers.GraphicsLayer(); // 新增一个图形图层\n\n        textGraphicsLayer.textType = textType;\n\n        _this5.featrue.map.addLayer(textGraphicsLayer); // 给地图添加新增的标注文本图层\n\n\n        var Rows = _this5.featrue.Rows; //创建textsymbol文本标注\n\n        if (Rows.length > 0) {\n          //动态读取json数据源结果集\n          for (var i = 0; i < Rows.length; i++) {\n            var Row = Rows[i];\n            var point = new esri.geometry.Point(Row.geometry.x, Row.geometry.y, _this5.featrue.map.spatialReference);\n            var value = Row.rowinfo[textType]; // 过滤\n\n            switch (textType) {\n              case \"q\":\n                var value = \"\".concat(_this5.$FilterData.Float_Filter(Row.rowinfo[textType], 3));\n\n                if (value == \"\") {\n                  value = \"\";\n                } else {\n                  console.log(\"value\", value);\n                  value += \" m³/s\";\n                }\n\n                break;\n\n              case \"upz\":\n                var value = \"\".concat(_this5.Z_Filter(Row.rowinfo[textType]));\n\n                if (value == \"\") {\n                  value = \"\";\n                } else {\n                  value += \" m\";\n                }\n\n                break;\n\n              case \"dwz\":\n                var value = \"\".concat(_this5.Z_Filter(Row.rowinfo[textType]));\n\n                if (value == \"\") {\n                  value = \"\";\n                } else {\n                  value += \" m\";\n                }\n\n                break;\n            } //定义文本symbol\n\n\n            var textsymbol = new esri.symbol.TextSymbol(value) //动态设置文本值\n            .setColor(new dojo.Color(value == \"不正常\" ? [255, 0, 0] : [55, 55, 55])) //setColor设置文本颜色\n            .setFont(new esri.symbol.Font(\"10pt\") //setFont设置文本大小\n            .setWeight(esri.symbol.Font.WEIGHT_BOLD)) //setWeight设置文本粗体\n            .setOffset(0, -(25 + index * 15)); //设置偏移方向\n\n            var graphic = new esri.Graphic(point, textsymbol);\n            textGraphicsLayer.add(graphic);\n          }\n        }\n\n        _this5.TextGraphicsLayers.push(textGraphicsLayer);\n      });\n    },\n    // 移除文字标注图层\n    removeTextGraphicsLayer: function removeTextGraphicsLayer(textType) {\n      // 找到对应的文字标注图层\n      for (var i = 0; i < this.TextGraphicsLayers.length; i++) {\n        var val = this.TextGraphicsLayers[i];\n\n        if (val.textType == textType) {\n          this.featrue.map.removeLayer(val); // 移除对应的文字标注图层\n          // val.hide();\n\n          this.TextGraphicsLayers.splice(i, 1); // 从文字标注图层数组里去除对应的文字图层对象\n        }\n      }\n    },\n    // 移除所有文字标注图层\n    removeAllTextGraphicsLayer: function removeAllTextGraphicsLayer() {\n      for (var i = 0; i < this.TextGraphicsLayers.length; i++) {\n        var val = this.TextGraphicsLayers[i];\n        this.featrue.map.removeLayer(val); // 移除对应的文字标注图层\n      }\n\n      this.TextGraphicsLayers = [];\n    },\n    // 初始化baseBox\n    baseBox_init: function baseBox_init() {\n      var _this6 = this;\n\n      // 获取地图对象,从父组件中\n      this.getMapFormParent(); // 获取图层对象,从父组件中\n\n      this.getJsonFlayerFormParent(); // 选取一部分从父组件传来的数据,将其加载为表格数据\n\n      this.loadTableData(this.getTableDataFormParent()); // 过滤table数据\n\n      this.filterTableData(); // 给图层对象添加方法\n\n      this.addEventToJsonFlayer(this.JsonFlayer); // 获取行政区划数据,然后设置地址选择框选项\n\n      this.getTableData_WRP_AD_B(function (data) {\n        _this6.form.adressList = data; // data.map(val => {\n        //   var newVal = new Object();\n        //   newVal.value = val.AD_CD;\n        //   newVal.label = val.AD_NM;\n        //   return newVal;\n        // })\n      }); // 获取输排水渠道数据,然后设置渠道选择框选项\n\n      this.getTableData_WRP_IrrBTCanalSystem(function (data) {\n        _this6.form.qudaoList = data; // data.map(val => {\n        //   var newVal = new Object();\n        //   newVal.value = val.Canal_Code;\n        //   newVal.label = val.Canal_Name;\n        //   return newVal;\n        // });\n      }); // 多选框标记勾选触发事件\n      // 1.清除所有文本标注图层\n      // 2.根据多选框添加文字标注图层\n\n      this.checkboxGroup_onChange(); // 往featrue对象里添加操作TextGraphicsLayer的对象，里面有移除所有TextGraphicsLayer的方法，和根据多选框添加文字标注图层的方法\n\n      this.addTextGraphicsLayerControllerToFeatrue();\n    },\n    // 排序\n    sort_change: function sort_change(item) {\n      var order = item.order,\n          key = item.prop;\n      this.filterTableData();\n      var newList;\n\n      if (order) {\n        switch (order) {\n          case \"descending\":\n            if (key == \"TM\") {\n              newList = this.table.Rows_filter.sort(function (a, b) {\n                var aTime = new Date(\"20\".concat(a.TM)).getTime(),\n                    bTime = new Date(\"20\".concat(b.TM)).getTime();\n                aTime = isNaN(aTime) ? 0 : aTime;\n                bTime = isNaN(bTime) ? 0 : bTime;\n                return bTime - aTime;\n              });\n            } else {\n              newList = this.table.Rows_filter.sort(function (a, b) {\n                return Number(b[key]) - Number(a[key]);\n              });\n            }\n\n            break;\n\n          case \"ascending\":\n            if (key == \"TM\") {\n              newList = this.table.Rows_filter.sort(function (a, b) {\n                var aTime = new Date(\"20\".concat(a.TM)).getTime(),\n                    bTime = new Date(\"20\".concat(b.TM)).getTime();\n                aTime = isNaN(aTime) ? 0 : aTime;\n                bTime = isNaN(bTime) ? 0 : bTime;\n                return aTime - bTime;\n              });\n            } else {\n              newList = this.table.Rows_filter.sort(function (a, b) {\n                return Number(a[key]) - Number(b[key]);\n              });\n            }\n\n        }\n\n        this.table.Rows_filter = newList;\n      }\n\n      this.$TableMethods.refreshCurrentChange(this.table, 1);\n    }\n  },\n  created: function created() {\n    var _this7 = this;\n\n    // 初始化baseBox\n    this.baseBox_init();\n    this.search();\n    this.baseBox_Interval = setInterval(function () {\n      _this7.search();\n    }, 1000 * 60 * 5);\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.baseBox_Interval);\n  }\n};",null]}