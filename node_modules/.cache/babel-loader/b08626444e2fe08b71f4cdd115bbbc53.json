{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\thread-loader\\dist\\cjs.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\App.vue","mtime":1586851914892},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport _parseInt from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport _parseFloat from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-float\";\nimport _JSON$stringify from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _slicedToArray from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport(\"./assets/shp.min.js\");\nimport { loadModules } from \"esri-loader\"; // 引入Vue\n\nimport Vue from \"vue\"; // 引入页面\n\nimport Table from \"./page/Table\"; // 渠道水情\n\nimport BaseBoxQUDAO from \"@/components/BaseBox/BaseBox-qudaoshuiqing.vue\";\nimport DetailQUDAO from \"@/components/Details/Details-qudaoshuiqing.vue\"; // 闸阀状态\n\nimport BaseBoxZHAFAZHUANGTAI from \"@/components/BaseBox/BaseBox-zhafazhuangtai.vue\";\nimport DetailZHAFAZHUANGTAI from \"@/components/Details/Details-zhafazhuangtai.vue\"; // 闸阀水情\n\nimport BaseBoxZHAFASHUIQING from \"@/components/BaseBox/BaseBox-zhafashuiqing.vue\";\nimport DetailZHAFASHUIQING from \"@/components/Details/Details-zhafashuiqing.vue\"; // 雨情\n\nimport BaseBoxYUQING from \"@/components/BaseBox/BaseBox-yuqing.vue\";\nimport DetailYUQING from \"@/components/Details/Details-yuqing.vue\"; // 水库水情\n\nimport BaseBoxSHUIKUSHUIQING from \"@/components/BaseBox/BaseBox-shuikushuiqing.vue\";\nimport DetailSHUIKUSHUIQING from \"@/components/Details/Details-shuikushuiqing.vue\"; // 河道水情\n\nimport BaseBoxHEDAOSHUIQING from \"@/components/BaseBox/BaseBox-hedaoshuiqing.vue\";\nimport DetailHEDAOSHUIQING from \"@/components/Details/Details-hedaoshuiqing.vue\"; // 视频站\n\nimport BaseBoxSHIPINZHAN from \"@/components/BaseBox/BaseBox-shipinzhan.vue\";\nimport DetailSHIPINZHAN from \"@/components/Details/Details-shipinzhan.vue\"; // 图像站站\n\nimport BaseBoxTUXIANGZHAN from \"@/components/BaseBox/BaseBox-tuxiangzhan.vue\";\nimport DetailTUXIANGZHAN from \"@/components/Details/Details-tuxiangzhan.vue\"; // 运行工况\n\nimport BaseBoxYUNXINGGONGKUANG from \"@/components/BaseBox/BaseBox-yunxinggongkuang.vue\";\nimport DetailYUNXINGGONGKUANG from \"@/components/Details/Details-yunxinggongkuang.vue\";\nimport { debuglog } from \"util\"; // 水位库容\n\nimport DetailSHUIWEIKURONG from \"@/components/Details/Details-shuiweikurong.vue\"; // 引入公用方法\n\nimport FilterMethods from \"@/assets/commonJS/FilterMethods\";\nimport GetDataMethods from \"@/assets/commonJS/GetDataMethods\";\nimport { parse } from \"path\";\nimport { constants } from \"crypto\";\nimport $ from 'jquery';\nvar options = {\n  version: \"3.28\"\n};\nexport default {\n  data: function data() {\n    return {\n      //三维仿真\n      mapBox3D: 0,\n      //ditu.json 加载到的各个图层\n      //koen 20190911\n      tu_ceng_list: [],\n      //当前中心点\n      zhong_xin_dian: null,\n      //地图类型\n      ditu_type: 'topo',\n      listWindow_show_Controller: false,\n      // 列表窗口对象\n      listWindow: {\n        // 列表窗显示控制器\n        show_Controller: false,\n        // 列表窗形态切换\n        mode: 0,\n        activeName: \"qudaoshuiqing\"\n      },\n      mapBox_show: 1,\n      imgflag: \"\",\n      test: true,\n      map: null,\n      details: {\n        // 详情标题\n        drawer_title: \"详情\",\n        // 用于控制 右侧详情栏\n        drawer_show_right: false,\n        // 显示隐藏\n        info_right: {\n          fff: \"5\"\n        },\n        // 右侧详情栏信息\n        // 用于控制 左侧详情栏\n        drawer_show_left: false,\n        // 显示隐藏\n        info_left: {\n          fff: \"5\" // 左侧详情栏信息\n\n        }\n      },\n      // 查询字符串\n      search_str: \"\",\n      // 信息提示\n      info_tips: {\n        itype: \"\"\n      },\n      //顶部导航\n      navbar: [{\n        index: '/tablebasedata-gqxx',\n        url1: '@/assets/image/u444.svg',\n        url2: '@/assets/image/u448.svg',\n        data: '基础数据'\n      }, {\n        index: '/',\n        url1: '@/assets/image/u453.svg',\n        url2: '@/assets/image/u457.svg',\n        data: '信息服务'\n      }, {\n        index: '/tablezfkz-zfdd',\n        url1: '@/assets/image/u462.svg',\n        url2: '@/assets/image/u466.svg',\n        data: '闸阀控制'\n      }, {\n        index: '/tabletest-test13',\n        url1: '@/assets/image/u471.svg',\n        url2: '@/assets/image/u475.svg',\n        data: '值班管理'\n      }, {\n        index: '/tablexgpt-qxxx',\n        url1: '@/assets/image/u480.svg',\n        url2: '@/assets/image/u484.svg',\n        data: '相关平台'\n      }, {\n        index: '/tableyjgl-yjfb',\n        url1: '@/assets/image/u489.svg',\n        url2: '@/assets/image/u493.svg',\n        data: '预警管理'\n      }, {\n        index: '/tableldgl-ldjggl',\n        url1: '@/assets/image/u498.svg',\n        url2: '@/assets/image/u502.svg',\n        data: '率定管理'\n      }, {\n        index: '/water-plan',\n        url1: '@/assets/image/u507.svg',\n        url2: '@/assets/image/u511.svg',\n        data: '配水管理'\n      }, {\n        index: '/tablexxfw-yxgk',\n        url1: '@/assets/image/u516.svg',\n        url2: '@/assets/image/u520.svg',\n        data: '维护管理'\n      }],\n      system_info: null,\n      // 正在开发图层数据集合，其中包含图层对象\n      FeatrueLayers: [],\n      fList: [],\n      // 待开发的图层数据集合，其中包含图层对象\n      FeatrueLayers_waiting: [{\n        title: \"墒情\",\n        show: \"0\"\n      }, {\n        title: \"蒸发量\",\n        show: \"0\"\n      }, {\n        title: \"地下水\",\n        show: \"0\"\n      }, {\n        title: \"地下水开采量\",\n        show: \"0\"\n      }, {\n        title: \"泵站\",\n        show: \"0\"\n      }, {\n        title: \"水质\",\n        show: \"0\"\n      }, {\n        title: \"潮位\",\n        show: \"0\"\n      }, {\n        title: \"泥沙\",\n        show: \"0\"\n      }, {\n        title: \"工情\",\n        show: \"0\"\n      }, {\n        title: \"气象\",\n        show: \"0\"\n      }],\n      FeatrueLayers_control: [{\n        title: \"闸阀控制\",\n        show: \"0\",\n        iconUrl: require('@/assets/image/u28.svg')\n      }],\n      FL_Sel: [],\n      // 用于选中提示的图形图层\n      graphicsLayer_Selection: {\n        LayerObject: null,\n        graphics: []\n      },\n      // 图片放大模态框的走马灯对象\n      enlargeModal_carousel: {\n        Rows: [],\n        initial_index: 0,\n        initial_imgUrl: null,\n        arrow: \"always\",\n        autoplay: false,\n        indicator_position: \"inside\",\n        loop: true,\n        trigger: \"click\",\n        style: {\n          height: \"90%\"\n        },\n        show: true,\n        dialogVisible: false\n      },\n      // 消息窗口对象\n      Message_Window: {\n        // 预警信息\n        notify_info: {\n          // 列表\n          list: []\n        },\n        // 声音开关\n        Voice_Controller: true\n      },\n      // 消息窗口控制器对象\n      Message_Window_Controller: {\n        show: true\n      },\n      //折叠面板\n      activeNames: ['1'],\n      tool_box: true,\n      checkboxGroup1: ['渠道水情', '图像', '闸阀水情'],\n      //底图选择\n      ditu_types: 'topo',\n      isActive1: true,\n      isActive2: true,\n      loginform: {},\n      menus: [],\n      menus_data: {\n        jichu: false,\n        xinxi: false,\n        zhafa: false,\n        zhiban: false,\n        xiangguan: false,\n        yujin: false,\n        lvding: false,\n        peishui: false,\n        weihu: false\n      }\n    };\n  },\n  mixins: [FilterMethods, GetDataMethods],\n  //////////////////////////////////////\n  components: {\n    Table: Table,\n    // 表格\n    BaseBoxQUDAO: BaseBoxQUDAO,\n    DetailQUDAO: DetailQUDAO,\n    // 渠道\n    BaseBoxZHAFASHUIQING: BaseBoxZHAFASHUIQING,\n    DetailZHAFASHUIQING: DetailZHAFASHUIQING,\n    // 闸阀水情\n    BaseBoxZHAFAZHUANGTAI: BaseBoxZHAFAZHUANGTAI,\n    DetailZHAFAZHUANGTAI: DetailZHAFAZHUANGTAI,\n    // 闸阀状态\n    BaseBoxYUQING: BaseBoxYUQING,\n    DetailYUQING: DetailYUQING,\n    // 雨情\n    BaseBoxHEDAOSHUIQING: BaseBoxHEDAOSHUIQING,\n    DetailHEDAOSHUIQING: DetailHEDAOSHUIQING,\n    // 河道水情\n    BaseBoxSHUIKUSHUIQING: BaseBoxSHUIKUSHUIQING,\n    DetailSHUIKUSHUIQING: DetailSHUIKUSHUIQING,\n    // 水库水情\n    DetailSHIPINZHAN: DetailSHIPINZHAN,\n    BaseBoxSHIPINZHAN: BaseBoxSHIPINZHAN,\n    // 视频站\n    DetailTUXIANGZHAN: DetailTUXIANGZHAN,\n    BaseBoxTUXIANGZHAN: BaseBoxTUXIANGZHAN,\n    // 图像站\n    BaseBoxYUNXINGGONGKUANG: BaseBoxYUNXINGGONGKUANG,\n    DetailYUNXINGGONGKUANG: DetailYUNXINGGONGKUANG,\n    // 运行工况\n    DetailSHUIWEIKURONG: DetailSHUIWEIKURONG // 水位库容\n\n  },\n  //////////////////////////////////////\n  mounted: function mounted() {\n    var _this = this;\n\n    //加载地图\n    loadModules([\"esri/map\", \"esri/layers/GraphicsLayer\", \"esri/SpatialReference\", \"esri/symbols/TextSymbol\"], options).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          Map = _ref2[0];\n\n      _this.map = new esri.Map(\"map\", {\n        //basemap: \"satellite\",\n        basemap: \"topo\",\n        center: [112.393, 28.240],\n        zoom: 13,\n        logo: false,\n        fadeOnZoom: true,\n        slider: true // 伸缩滑块\n        // maxZoom:4, //最大空间等级\n        // minZoom:5, //最小空间等级\n        // navigationMode: 'css-transforms' // 调整或缩放地图平滑\n\n      });\n\n      _this.map.on(\"click\", function (ev) {\n        var lat = Math.round(ev.mapPoint.getLatitude() * 1000) / 1000;\n        var lon = Math.round(ev.mapPoint.getLongitude() * 1000) / 1000;\n        console.log(\"当前坐标：\" + lat + \",\" + lon);\n      }); // 设置地图的鼠标样式\n\n\n      _this.map.setMapCursor(\"pointer\"); //加载图层\n      //this.addSHPlayerToMap();\n\n\n      _this.loadSHP(); //获取要素图层数据\n      // this.getAll();\n\n\n      _this.add_GraphicsLayer_Selection_ToMap();\n    }).catch(function (err) {\n      console.error(err);\n    });\n    Vue.prototype.$App = this;\n    this.axios.get('/guanqu/web/users/online-user').then(function (res) {\n      _this.loginform = res.data;\n    });\n    this.axios.get('/guanqu/web/users/online-user/menus').then(function (res) {\n      _this.menus = res.data;\n\n      _this.menus.forEach(function (item) {\n        if (item.label == '基础数据') {\n          _this.menus_data.jichu = true;\n        }\n\n        if (item.label == '信息服务') {\n          _this.menus_data.xinxi = true;\n        }\n\n        if (item.label == '闸阀控制') {\n          _this.menus_data.zhafa = true;\n        }\n\n        if (item.label == '值班管理') {\n          _this.menus_data.zhiban = true;\n        }\n\n        if (item.label == '相关平台') {\n          _this.menus_data.xiangguan = true;\n        }\n\n        if (item.label == '预警管理') {\n          _this.menus_data.yujin = true;\n        }\n\n        if (item.label == '率定管理') {\n          _this.menus_data.lvding = true;\n        }\n\n        if (item.label == '配水管理') {\n          _this.menus_data.peishui = true;\n        }\n\n        if (item.label == '维护管理') {\n          _this.menus_data.weihu = true;\n        }\n      });\n    });\n  },\n  methods: {\n    //关闭页面\n    close: function close() {\n      this.axios.delete('/guanqu/web/user/logout').then(function (res) {\n        console.log(res);\n        window.location.href = 'http://222.240.238.58:7001/static/main/#/';\n      });\n    },\n    //监测显示全部\n    jcxs: function jcxs() {\n      if (this.FeatrueLayers.length > 10) {\n        this.isActive1 = !this.isActive1;\n      } else {\n        this.isActive1 = this.isActive1;\n      }\n    },\n    //图层显示全部\n    tcxs: function tcxs() {\n      if (this.tu_ceng_list.length > 5) {\n        this.isActive2 = !this.isActive2;\n      } else {\n        this.isActive2 = this.isActive2;\n      }\n    },\n    //放大地图按钮\n    fangda: function fangda() {\n      $(\".esriSimpleSliderIncrementButton\").click();\n    },\n    //缩小地图按钮\n    suoxiao: function suoxiao() {\n      $(\".esriSimpleSliderDecrementButton\").click();\n    },\n    //图层关闭或打开\n    //koen 20190911\n    tu_ceng_switch: function tu_ceng_switch(item) {\n      console.log(item);\n      item.show = !item.show;\n      if (item.show) item.layer.show();else item.layer.hide();\n    },\n    //切换底图（卫星、街道...）\n    dituchange1: function dituchange1() {\n      this.ditu_types = '-';\n      var id = this.map.basemapLayerIds[0];\n      if (this.ditu_types == '-') return this.map.getLayer(id).setVisibility(false);else this.map.getLayer(id).setVisibility(true);\n      this.map.setBasemap(this.ditu_types);\n    },\n    dituchange2: function dituchange2() {\n      this.ditu_types = 'satellite';\n      var id = this.map.basemapLayerIds[0];\n      if (this.ditu_types == '-') return this.map.getLayer(id).setVisibility(false);else this.map.getLayer(id).setVisibility(true);\n      this.map.setBasemap(this.ditu_types);\n    },\n    dituchange3: function dituchange3() {\n      this.ditu_types = 'hybrid';\n      var id = this.map.basemapLayerIds[0];\n      if (this.ditu_types == '-') return this.map.getLayer(id).setVisibility(false);else this.map.getLayer(id).setVisibility(true);\n      this.map.setBasemap(this.ditu_types);\n    },\n    dituchange4: function dituchange4() {\n      this.ditu_types = 'streets';\n      var id = this.map.basemapLayerIds[0];\n      if (this.ditu_types == '-') return this.map.getLayer(id).setVisibility(false);else this.map.getLayer(id).setVisibility(true);\n      this.map.setBasemap(this.ditu_types);\n    },\n    dituchange5: function dituchange5() {\n      this.ditu_types = 'topo';\n      var id = this.map.basemapLayerIds[0];\n      if (this.ditu_types == '-') return this.map.getLayer(id).setVisibility(false);else this.map.getLayer(id).setVisibility(true);\n      this.map.setBasemap(this.ditu_types);\n    },\n    ditu_change: function ditu_change() {\n      var id = this.map.basemapLayerIds[0];\n      if (this.ditu_type == '-') return this.map.getLayer(id).setVisibility(false);else this.map.getLayer(id).setVisibility(true);\n      this.map.setBasemap(this.ditu_type);\n    },\n    //koen 20190930\n    //转换坐标系\n    zuobiaoxi: function zuobiaoxi(item) {\n      console.log('处理坐标');\n      console.log(item);\n      item.Rows.forEach(function (one, index) {\n        //获取坐标\n        var x = Number(one.geometry.x);\n        var y = Number(one.geometry.y); //如果basemap使用ArcGIS的就需要\n        //转换坐标系\n\n        x = x / 180.0 * 20037508.34;\n        if (y > 85.05112) y = 85.05112;\n        if (y < -85.05112) y = -85.05112;\n        y = Math.PI / 180.0 * y;\n        var tmp = Math.PI / 4.0 + y / 2.0;\n        y = 20037508.34 * Math.log(Math.tan(tmp)) / Math.PI;\n        item.Rows[index].attributes.LGTD = x;\n        item.Rows[index].attributes.LTTD = y;\n        item.Rows[index].geometry.x = x;\n        item.Rows[index].geometry.y = y;\n      });\n      return item;\n    },\n    //保存原图方法\n    handleClose: function handleClose(done) {\n      this.enlargeModal_carousel.dialogVisible = false;\n      return; // this.$confirm(\"明白了！\")\n      //   .then(_ => {\n      //     done();\n      //   })\n      //   .catch(_ => {});\n    },\n    // 开关切换时的操作\n    switch2change: function switch2change() {\n      console.log(this.mapBox3D);\n\n      if (this.mapBox3D) {\n        window.location.href = \"http://222.240.238.58:7001/static/demo-guanqu-lcs-3d/#/\";\n      }\n    },\n    switchchange: function switchchange() {// if (this.mapBox_show == \"0\") {\n      //   this.$router.push(\"/\");\n      // }\n      // if (this.mapBox_show == \"1\") {\n      //   this.$router.push(\"/\");\n      // }\n    },\n    // 当选择的监控图层发生变化\n    // 重新显示或隐藏部分图层\n    OnLayerChange: function OnLayerChange(item) {\n      var _this2 = this;\n\n      if (item.show == '0') {\n        item.show = '1';\n      } else if (item.show == '1') {\n        item.show = '0';\n      }\n\n      var featrueLayers = this.FeatrueLayers;\n      featrueLayers.forEach(function (v, index) {\n        if (v.show == \"1\") v.LayerObject.show();else {\n          v.LayerObject.hide();\n          v.LayerObject_yujing.hide();\n\n          if (_this2.FeatrueLayers[index].TextGraphicsLayerController) {\n            _this2.FeatrueLayers[index].TextGraphicsLayerController.removeAllTextGraphicsLayer();\n          }\n        }\n      }); // 获取正在显示的图层\n\n      var featrueLayers_showing = this.featrueLayers_showing(); // 如果存在 显示的图层\n\n      if (featrueLayers_showing.length != 0) {\n        // 如果要隐藏图层 并且 隐藏的图层是当前显示的图层的时候\n        if (item.show == 0 && item.itype == this.listWindow.activeName) {\n          // 激活的baseBox为正在显示的图层中的最后一个\n          this.listWindow.activeName = featrueLayers_showing[featrueLayers_showing.length - 1].itype;\n        } else if (item.show == 1) {\n          // 如果要显示图层 并且 当前没有显示的图层的时候\n          // 激活的baseBox为要显示的图层\n          this.listWindow.activeName = item.itype;\n\n          if (featrueLayers_showing.length == 1) {\n            // 列表窗显示\n            this.listWindow_show();\n          }\n        }\n      } else {\n        // 列表窗隐藏\n        this.listWindow_hide();\n      }\n    },\n    // 加载底图\n    loadSHP: function loadSHP() {\n      var _this3 = this;\n\n      this.axios.get(\"/static/demo-hunanguanqu/ditu.json\").then(function (res) {\n        var data = res.data,\n            list = data.shpList;\n        console.warn(\"res\", res);\n        console.warn(\"list\", list);\n        if (list.length <= 0) return;\n        list.forEach(function (val, index) {\n          var data = val.data;\n          var features = data.features;\n          var color = val.color;\n          var size = val.size || 2;\n          console.warn(\"data\", data);\n          var graphicsSHPlayer = new esri.layers.GraphicsLayer();\n\n          _this3.map.addLayer(graphicsSHPlayer);\n\n          for (var j = 0; j < features.length; j++) {\n            var feature = features[j];\n            var graphic = null;\n\n            switch (feature.geometry.type) {\n              //点\n              case \"Point\":\n                //symbol = new esri.symbol.PictureMarkerSymbol(getRootPath() + \"images/point1.png\", 22, 27);\n                symbol = new esri.symbol.SimpleMarkerSymbol({\n                  size: size,\n                  style: \"simplefillsymbol\"\n                });\n                symbol.setColor(color);\n                var mappoint = new esri.geometry.Point(feature.geometry.coordinates[0], feature.geometry.coordinates[1], new esri.SpatialReference({\n                  wkid: 4326\n                }));\n                graphic = new esri.Graphic(mappoint, symbol);\n                var mappoint_text = new esri.geometry.Point(feature.geometry.coordinates[0], feature.geometry.coordinates[1], new esri.SpatialReference({\n                  wkid: 4326\n                }));\n                var textsymbol = new esri.symbol.TextSymbol(feature.properties.NM);\n                textsymbol.setFont(new esri.symbol.Font(\"8pt\").setWeight(esri.symbol.Font.WEIGHT_BOLD).setFamily(\"Arial\"));\n                textsymbol.setOffset(0, 30);\n                textsymbol.setColor(new esri.Color([0, 0, 0]));\n                var graphic_text = new esri.Graphic(mappoint_text, textsymbol);\n                if (graphic_text) graphicsSHPlayer.add(graphic_text);\n                break;\n              //线\n\n              case \"LineString\":\n                symbol = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color(color), size);\n                var polyline = new esri.geometry.Polyline(feature.geometry.coordinates);\n                graphic = new esri.Graphic(polyline, symbol);\n                break;\n              //线\n\n              case \"MultiLineString\":\n                var symbol = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color(color), size);\n                var polyline = new esri.geometry.Polyline(feature.geometry.coordinates);\n                var graphic = new esri.Graphic(polyline, symbol);\n                break;\n              //面\n\n              case \"Polygon\":\n                symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new esri.Color([211, 211, 211]), 1), new esri.Color(color));\n                var polygon = new esri.geometry.Polygon(feature.geometry.coordinates);\n                graphic = new esri.Graphic(polygon, symbol);\n                break;\n            }\n\n            graphicsSHPlayer.add(graphic);\n          }\n\n          console.log(\"graphicsSHPlayer\", graphicsSHPlayer);\n\n          _this3.tu_ceng_list.push({\n            name: val.name,\n            show: val.show,\n            layer: graphicsSHPlayer,\n            icon: val.icon,\n            icon_active: val.icon_active\n          });\n\n          if (val.show == false) {\n            graphicsSHPlayer.hide();\n          } else {\n            graphicsSHPlayer.show();\n          }\n        });\n\n        _this3.getAll();\n      });\n    },\n    //设置地图初始范围\n    setMapExtent: function setMapExtent(options) {\n      var initExtent = new esri.geometry.Extent(options);\n      this.map.setExtent(initExtent); //koen 会出现中心点在太平洋上的bug\n      //木木  但是没有这个函数黄材这边就没办法初始化定位了\n    },\n    //获取各个图层信息\n    getEachFeatureLayers: function getEachFeatureLayers(FeatureLayers) {\n      var _this4 = this;\n\n      var _loop = function _loop(i) {\n        // 获取图层数据（没有过滤条件的）\n        _this4.getFeatrueLayerWithoutPreconditions(FeatureLayers[i].url, function (res) {\n          var featureLayerOBJ = FeatureLayers[i];\n          var data = res.data;\n          var clone_data = JSON.parse(_JSON$stringify(data)); // 创建图层（根据图层数据）\n\n          var featureLayer = _this4.createFeatrueLayer(data); // 获取异常数据\n\n\n          var AbnormalData = _this4.getAbnormalData(data); // 创建预警图层（根据图层异常数据）\n\n\n          var featrueLayer_yujing = _this4.createFeatrueLayer(AbnormalData); //设置图层的特征点图标\n\n\n          _this4.setFeatrueLayerSymbol(featureLayer, featureLayerOBJ.icon, {\n            width: 16,\n            height: 16\n          }); // 设置预警图层的特征点图标\n\n\n          _this4.setFeatrueLayerSymbol(featrueLayer_yujing, \"/static/demo-hunanguanqu/yujing.gif\", {\n            width: 42,\n            height: 42\n          });\n\n          console.log(\"@@@@@@@@@@@@@@@@@@\", featureLayerOBJ); // 默认显示闸阀水情 和 渠道水情图层\n\n          if (featureLayerOBJ.itype === \"qudaoshuiqing\" || featureLayerOBJ.itype === \"zhafashuiqing\" || featureLayerOBJ.itype === \"tuxiang\") {\n            featureLayerOBJ.show = \"1\";\n          }\n\n          if (featureLayerOBJ.show != \"1\") {\n            featrueLayer_yujing.hide();\n            featureLayer.hide();\n          } // 根据数据里面的show属性 决定图层是否隐藏\n\n\n          var obj = {\n            title: JSON.parse(_JSON$stringify(featureLayerOBJ)).title,\n            show: JSON.parse(_JSON$stringify(featureLayerOBJ)).show\n          }; // this.fList.push(obj)\n          // 给图层对象添加 图层，图层特征点数据，地图\n\n          featureLayerOBJ.LayerObject = featureLayer; // 添加图层到图层对象\n\n          featureLayerOBJ.LayerObject_yujing = featrueLayer_yujing; // 添加图层到图层对象\n\n          featureLayerOBJ.Rows = clone_data.features; // 添加图层特征点数据到图层对象\n\n          featureLayerOBJ.map = _this4.map; // 添加地图到图层对象\n          // 添加图层模块\n\n          _this4.addFeatrueLayer([featrueLayer_yujing, featureLayer], featureLayerOBJ); // 给图层里的特征点 添加事件\n\n\n          _this4.addEventToJsonFlayer(featureLayer, featureLayerOBJ);\n        });\n      };\n\n      for (var i = 0; i < FeatureLayers.length; i++) {\n        _loop(i);\n      }\n    },\n    // 获取系统信息\n    getAll: function getAll() {\n      var _this5 = this;\n\n      // /static/demo-hunanguanqu/system.json\n      this.axios.get(\"/guanqu/gis/system_info\").then(function (res) {\n        var data = res.data; // 保存系统信息到system_info\n\n        _this5.system_info = data; // 保存各图层url配置到system_info的FLayerUrl里\n\n        _this5.system_info.FLayerUrl = function () {\n          var FeatureLayers = _this5.system_info.FeatureLayers;\n          var FLayerUrl = new Object();\n          FeatureLayers.forEach(function (val, index) {\n            FLayerUrl[val.itype] = val.url;\n          });\n          return FLayerUrl;\n        }(); // 设置地图 视图初始范围\n\n\n        var GIS_CENTER = data.GIS_CENTER;\n\n        _this5.setMapExtent({\n          xmin: _parseFloat(GIS_CENTER.xmin),\n          xmax: _parseFloat(GIS_CENTER.xmax),\n          ymin: _parseFloat(GIS_CENTER.ymin),\n          ymax: _parseFloat(GIS_CENTER.ymax),\n          spatialReference: {\n            wkid: 4326 //spatialReference: this.map.spatialReference\n            //spatialReference: new esri.SpatialReference({ wkid: 4326 })\n\n          }\n        }); // 获取各个图层信息\n\n\n        _this5.getEachFeatureLayers(data.FeatureLayers);\n      });\n    },\n    // 给特征点元素点添加事件\n    addEventToJsonFlayer: function addEventToJsonFlayer(JsonFlayer, v) {\n      var _this6 = this;\n\n      JsonFlayer.on(\"click\", function (evt) {\n        //当鼠标点击元素\n        // 抽屉组件默认显示表类型\n        evt.graphic.attributes.rowinfo.tableType = {\n          qdsq: \"historyTable\",\n          zfsq: \"historyTable\",\n          hdsq: \"historyTable\",\n          yq: \"hourTable\",\n          sksq: \"historyTable\"\n        }; // 展示抽屉组件\n\n        _this6.showDrawer(evt, v);\n      });\n    },\n    // 获取 子组件传过来 的绘图方法\n    chart: function chart(item) {\n      this.getChart = item.chart;\n    },\n    // 展示抽屉组件\n    showDrawer: function showDrawer(evt, v) {\n      var _this7 = this;\n\n      var graphic = evt.graphic;\n\n      var show_right = function show_right() {\n        _this7.details.info_right = graphic.attributes;\n        _this7.details.info_right.itype = v.itype;\n        _this7.details.drawer_show_right = true;\n      }; // 如果左边抽屉组件显示，显示或替换右边抽屉组件\n\n\n      if (this.details.drawer_show_left) {\n        if (this.details.info_left.STCD == graphic.attributes.STCD) {\n          // 如果打开的站点相同\n          return this.$Message.warning(\"该站点详情已打开\");\n        } // 传递属性数据\n        // 对应类型\n\n\n        if (this.details.drawer_show_right) {\n          this.details.drawer_show_right = false;\n          this.details.info_right.itype = false;\n          setTimeout(function () {\n            show_right();\n          }, 300);\n        } else {\n          show_right();\n        }\n      } else {\n        // 否则 显示左边抽屉组件\n        // 传递属性数据\n        console.log(graphic.attributes);\n        this.details.info_left = graphic.attributes; // 对应类型\n\n        console.log(v.itype);\n        this.details.info_left.itype = v.itype;\n        this.details.drawer_show_left = true;\n      }\n\n      console.log(evt, v);\n    },\n    // 关闭抽屉组件\n    closeDrawer: function closeDrawer(placement) {\n      // 如果关闭的是左抽屉，并且右抽屉未开启\n      if (placement == \"left\" && !this.details.drawer_show_right) {\n        this.GraphicsLayer_Selection_clear(); // 取消所有站点的闪烁\n      } // 如果关闭的是右抽屉，并且左抽屉未开启\n\n\n      if (placement == \"right\" && !this.details.drawer_show_left) {\n        this.GraphicsLayer_Selection_clear(); // 取消所有站点的闪烁\n      } // 如果关闭的是右抽屉，并且左抽屉已开启\n\n\n      if (placement == \"right\" && this.details.drawer_show_left) {\n        // 设置中心缩放\n        //this.setMapCenterandZoom(this.details.info_left.LGTD,this.details.info_left.LTTD);\n        // 取消所有站点的闪烁\n        this.GraphicsLayer_Selection_clear(); // 对应站点闪烁\n\n        this.add_Graphic_To_GraphicsLayer_Selection(this.details.info_left);\n      }\n\n      this.details[\"info_\".concat(placement)].itype = null;\n    },\n    // 设置中心和缩放 (接受经纬度，和缩放比例)\n    setMapCenterandZoom: function setMapCenterandZoom(LGTD, LTTD, Zoom) {\n      this.map.centerAndZoom([Number(LGTD), Number(LTTD)], Zoom || 1);\n    },\n    // 处理标签页点击事件\n    handleTabClick: function handleTabClick(item) {},\n    // 声音提示\n    baiduVoice: function baiduVoice(str, boolean) {\n      //调用百度接口----------------总感觉声音怪怪的\n      var url = \"http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&text=\" + encodeURI(str);\n      var n = new Audio(url);\n      n.src = url;\n\n      if (boolean) {\n        n.play();\n      } // n.pause();\n\n\n      return n;\n    },\n    // 正在显示的图层\n    featrueLayers_showing: function featrueLayers_showing() {\n      var featrueLayers = this.FeatrueLayers; // 获取正在显示的图层\n\n      var featrueLayers_showing = featrueLayers.filter(function (val) {\n        if (val.show == 1) {\n          return true;\n        }\n      });\n      return featrueLayers_showing;\n    },\n    // 列表窗显示隐藏切换(控制面板)\n    listWindow_toggle: function listWindow_toggle() {\n      this.listWindow.show_Controller = !this.listWindow.show_Controller;\n    },\n    // 列表窗显示\n    listWindow_show: function listWindow_show() {\n      this.listWindow.show_Controller = true;\n    },\n    // 列表窗隐藏\n    listWindow_hide: function listWindow_hide() {\n      this.listWindow.show_Controller = false;\n    },\n    // 列表窗形态切换\n    listWindow_changeMode: function listWindow_changeMode() {\n      var mode = this.listWindow.mode;\n\n      if (mode < 3) {\n        this.listWindow.mode++;\n        return console.log(this.listWindow.mode);\n      }\n\n      this.listWindow.mode = 0;\n    },\n    // 列表选项卡位置\n    listWindow_tabPosition: function listWindow_tabPosition(mode) {\n      switch (mode) {\n        case 0:\n          return \"top\";\n\n        case 1:\n          return \"right\";\n\n        case 2:\n          return \"left\";\n\n        case 3:\n          return \"bottom\";\n\n        default:\n          return \"top\";\n      }\n    },\n    // 所有audio标签声音关闭\n    audio_pause: function audio_pause() {\n      var audio_eles = document.getElementsByClassName(\"baiduVoice\");\n\n      for (var index = 0; index < audio_eles.length; index++) {\n        var ele = audio_eles[index];\n\n        if (ele !== null) {\n          ele.pause(); // 这个就是暂停\n          //检测播放是否已暂停.audio.paused 在播放器播放时返回false.\n          // alert(audio.paused);\n          // if (audio_ele.paused) {\n          //   audio.play(); //audio.play();// 这个就是播放\n          // } else {\n          //   audio_ele.pause(); // 这个就是暂停\n          // }\n        }\n      }\n    },\n    // 移除选项卡\n    removeTab: function removeTab(item) {\n      var _this8 = this;\n\n      var featrueLayers = this.FeatrueLayers;\n      featrueLayers.forEach(function (val, index) {\n        if (val.itype == item) {\n          _this8.FeatrueLayers[index].show = 0;\n          val.LayerObject.hide();\n          val.LayerObject_yujing.hide(); // 所有audio标签声音关闭\n\n          _this8.audio_pause();\n\n          if (_this8.FeatrueLayers[index].TextGraphicsLayerController) {\n            _this8.FeatrueLayers[index].TextGraphicsLayerController.removeAllTextGraphicsLayer();\n          }\n        }\n      }); // 获取正在显示的图层\n\n      var featrueLayers_showing = this.featrueLayers_showing();\n\n      if (featrueLayers_showing != 0) {\n        // 激活的baseBox为正在显示的图层中的最后一个\n        this.listWindow.activeName = featrueLayers_showing[featrueLayers_showing.length - 1].itype;\n      } else {\n        // 列表窗隐藏\n        this.listWindow_hide();\n      }\n    },\n    // 还原地图视图默认位置\n    restoreMapView: function restoreMapView() {\n      var system_info = this.system_info,\n          GIS_CENTER = system_info.GIS_CENTER;\n      console.log(); // 设置地图 视图初始范围\n\n      this.setMapExtent({\n        // xmin: 110.97802432948647,\n        // ymin: 27.531235202509322,parseFloat\n        // xmax: 113.8843752444488,\n        // ymax: 28.9647322423371,\n        xmin: _parseFloat(GIS_CENTER.xmin),\n        xmax: _parseFloat(GIS_CENTER.xmax),\n        ymin: _parseFloat(GIS_CENTER.ymin),\n        ymax: _parseFloat(GIS_CENTER.ymax),\n        spatialReference: this.map.spatialReference\n      });\n      this.map.infoWindow.hide();\n    },\n    // 获取异常数据\n    getAbnormalData: function getAbnormalData(graphicsData) {\n      var data = JSON.parse(_JSON$stringify(graphicsData)); // 图层数据深拷贝\n      // 把每个特征点的rowinfo数据放入每个特征点的属性中\n\n      data.features.forEach(function (val, index) {\n        data.features[index].attributes.rowinfo = data.features[index].rowinfo;\n      });\n      var AbnormalData = data.features.filter(function (val, index) {\n        if (val.rowinfo._status == 0) {\n          return true;\n        }\n      });\n      data.features = AbnormalData;\n      return data;\n    },\n    // 通知\n    notify_Layer: function notify_Layer(options, data) {\n      var _this9 = this;\n\n      if (data.length > 0) {\n        this.Message_Window_show(true); // 打开消息窗口\n\n        var Voice_Controller = this.Message_Window.Voice_Controller,\n            notify_info_list = this.Message_Window.notify_info.list;\n        var time = 0;\n        data.forEach(function (val, index, array) {\n          var rowinfo = val.rowinfo;\n          var item = new Object();\n          item.icon = options.icon;\n          item.text = \"\".concat(rowinfo.STNM, \" \\u51FA\\u73B0\\u5F02\\u5E38\");\n          item.voice = _this9.baiduVoice(item.text);\n          item.voice_duration = item.text.length * 300;\n          item.id = notify_info_list.length;\n          notify_info_list.length = 0;\n          notify_info_list.unshift(item);\n          setTimeout(function () {\n            if (Voice_Controller) {\n              var duration = notify_info_list[index].voice.duration;\n              time += duration * 1000;\n              var copyTime = JSON.parse(_JSON$stringify(time));\n              setTimeout(function () {\n                var voice = _this9.Message_Window.notify_info.list[index].voice;\n\n                if (voice) {\n                  voice.play();\n                }\n              }, copyTime);\n            }\n          }, 500);\n        });\n      }\n    },\n    // 声音列表播放\n    voice_list_play: function voice_list_play(list) {\n      var time = 0;\n      list.forEach(function (val, index) {\n        var voice = val.voice,\n            voice_duration = val.voice_duration;\n        time += voice_duration;\n        console.log(\"voice\", voice);\n        var copyTime = JSON.parse(_JSON$stringify(time));\n        setTimeout(function () {\n          voice.play();\n        }, copyTime);\n      });\n    },\n    // 声音列表播放\n    voice_list_pause: function voice_list_pause(list) {\n      var list = list || this.Message_Window.notify_info.list;\n      list.forEach(function (val, index) {\n        list[index].voice = null;\n      });\n    },\n    // 查询图层 (要查询的图层类型, 过滤字段, 所属图层对象)\n    search_FeatrueLayer: function search_FeatrueLayer(type, fields, featureLayerOBJ, callback, errCallback) {\n      var _this10 = this;\n\n      // 获取具有过滤条件的图层数据\n      this.getFeatrueLayer(type, fields, function (res) {\n        var clone_data = JSON.parse(_JSON$stringify(res.data)); // 创建图层（根据图层数据）\n\n        var featrueLayer = _this10.createFeatrueLayer(res.data); // 获取异常数据\n\n\n        var AbnormalData = _this10.getAbnormalData(res.data); // 创建预警图层（根据图层异常数据）\n\n\n        var featrueLayer_yujing = _this10.createFeatrueLayer(AbnormalData); // 移除图层对象里的相应图层\n\n\n        _this10.removeFeatureLayer(featureLayerOBJ); // 移除图层对象里的相应预警图层\n\n\n        _this10.removeFeatureLayer_yujing(featureLayerOBJ); // 设置图层的特征点图标\n\n\n        _this10.setFeatrueLayerSymbol(featrueLayer, featureLayerOBJ.icon, {\n          width: 16,\n          height: 16\n        }); // 设置预警图层的特征点图标\n\n\n        _this10.setFeatrueLayerSymbol(featrueLayer_yujing, \"/static/demo-hunanguanqu/yujing.gif\", {\n          width: 46,\n          height: 46\n        }); // 添加预警图层到地图\n\n\n        _this10.addFeatrueLayerToMap(featrueLayer_yujing); // 添加图层到地图\n\n\n        _this10.addFeatrueLayerToMap(featrueLayer);\n\n        if (AbnormalData.features.length > 0) {\n          // 图层提示预警信息\n          _this10.notify_Layer({\n            icon: featureLayerOBJ.icon_warning,\n            type: \"warning\"\n          }, AbnormalData.features);\n        } // 更新图层对象集合里面 对应图层对象的 图层以及图层数据\n\n\n        var newFeatureLayerOBJ = _this10.updateFeatrueLayers(featureLayerOBJ, featrueLayer, featrueLayer_yujing, clone_data); // 如果有回调，执行回调\n\n\n        if (typeof callback == \"function\") {\n          callback(newFeatureLayerOBJ);\n        } // 取消所有站点的闪烁\n\n\n        _this10.GraphicsLayer_Selection_clear(); // 给图层里的特征点 添加事件\n\n\n        _this10.addEventToJsonFlayer(newFeatureLayerOBJ.LayerObject, newFeatureLayerOBJ);\n      } // errCallback\n      );\n    },\n    // 获取没有过滤条件的图层数据\n    getFeatrueLayerWithoutPreconditions: function getFeatrueLayerWithoutPreconditions(url, callback) {\n      this.axios.get(url).then(function (res) {\n        if (typeof callback == \"function\") {\n          callback(res);\n        }\n      });\n    },\n    // 获取具有过滤条件的图层数据\n    getFeatrueLayer: function getFeatrueLayer(type, fields, callback, errCallback) {\n      /*\r\n                type为数字，以下为不同数字对应图层\r\n                4: 渠道水情\r\n                5: 闸阀水情\r\n                6: 闸阀状态\r\n                7: 图像\r\n                8: 视频\r\n                */\n      var url = this.system_info.FLayerUrl[type];\n      var body = {// _filter: new Object()\n      }; // 增加过滤字段\n\n      for (var key in fields) {\n        body[key] = fields[key];\n      }\n\n      this.axios.post(url, body).then(function (res) {\n        if (typeof errCallback == \"function\") {\n          errCallback();\n        }\n\n        if (typeof callback == \"function\") {\n          callback(res);\n        }\n      });\n    },\n    // 移除指定图层\n    removeFeatureLayer: function removeFeatureLayer(featureLayerOBJ) {\n      // 从地图中移除图层\n      if (featureLayerOBJ.LayerObject) {\n        this.map.removeLayer(featureLayerOBJ.LayerObject);\n      } // 从控制面板的图层对象中清空图层及图层特征点数据\n\n\n      featureLayerOBJ.LayerObject = null;\n      featureLayerOBJ.Rows = [];\n    },\n    // 移除指定图层的预警图层\n    removeFeatureLayer_yujing: function removeFeatureLayer_yujing(featureLayerOBJ) {\n      // 从地图中移除图层\n      if (featureLayerOBJ.LayerObject_yujing) {\n        this.map.removeLayer(featureLayerOBJ.LayerObject_yujing);\n      } // 从控制面板的图层对象中清空图层及图层特征点数据\n\n\n      featureLayerOBJ.LayerObject_yujing = null; // featureLayerOBJ.Rows = [];\n    },\n    // 创建图层（根据图层数据）\n    createFeatrueLayer: function createFeatrueLayer(graphicsData) {\n      var data = JSON.parse(_JSON$stringify(graphicsData)); // 图层数据深拷贝\n      // 把每个特征点的rowinfo数据放入每个特征点的属性中\n\n      data.features.forEach(function (val, index) {\n        data.features[index].attributes.rowinfo = data.features[index].rowinfo;\n      }); //构建图层\n\n      var featureCollection = {\n        layerDefinition: data,\n        featureSet: new esri.tasks.FeatureSet(data)\n      };\n      var featureLayer = new esri.layers.FeatureLayer(featureCollection);\n      return featureLayer;\n    },\n    // 设置图层的特征点图标\n    setFeatrueLayerSymbol: function setFeatrueLayerSymbol(featureLayer, iconUrl, option) {\n      var symbol = new esri.symbol.PictureMarkerSymbol(iconUrl, option ? option.width : 16, option ? option.height : 20);\n      var renderer = new esri.renderer.SimpleRenderer(symbol);\n      featureLayer.setRenderer(renderer);\n    },\n    // 添加图层到地图\n    addFeatrueLayerToMap: function addFeatrueLayerToMap(featureLayer) {\n      this.map.addLayer(featureLayer);\n    },\n    // 添加图层对象到控制面板\n    addFeatrueLayerObjToBaseBox: function addFeatrueLayerObjToBaseBox(featureLayerOBJ) {\n      // 排序\n      switch (featureLayerOBJ.title) {\n        case \"雨情\":\n          this.FeatrueLayers.splice(3, 0, featureLayerOBJ);\n          break;\n\n        case \"水库水情\":\n          this.FeatrueLayers.splice(4, 0, featureLayerOBJ);\n          break;\n\n        case \"河道水情\":\n          this.FeatrueLayers.splice(6, 0, featureLayerOBJ);\n          break;\n\n        case \"渠道水情\":\n          this.FeatrueLayers.splice(0, 0, featureLayerOBJ);\n          break;\n\n        case \"闸阀水情\":\n          this.FeatrueLayers.splice(1, 0, featureLayerOBJ);\n          break;\n\n        case \"闸阀状态\":\n          this.FeatrueLayers.splice(5, 0, featureLayerOBJ);\n          break;\n\n        case \"图像\":\n          this.FeatrueLayers.splice(2, 0, featureLayerOBJ);\n          break;\n\n        case \"视频\":\n          this.FeatrueLayers.splice(7, 0, featureLayerOBJ);\n          break;\n\n        case \"运行工况\":\n          this.FeatrueLayers.splice(8, 0, featureLayerOBJ);\n          break;\n      }\n    },\n    // 添加图层模块\n    addFeatrueLayer: function addFeatrueLayer(featureLayerList, featureLayerOBJ) {\n      var _this11 = this;\n\n      featureLayerList.forEach(function (val) {\n        // 添加图层到地图\n        _this11.addFeatrueLayerToMap(val);\n      }); // 添加图层对象到控制面板\n\n      this.addFeatrueLayerObjToBaseBox(featureLayerOBJ);\n    },\n    // 替换指定图层对象里的图层和特征点数据\n    updateFeatrueLayers: function updateFeatrueLayers(featureLayerOBJ, featureLayer, featrueLayer_yujing, data) {\n      var _this12 = this;\n\n      featureLayerOBJ.LayerObject = featureLayer; // 添加图层到图层对象\n\n      featureLayerOBJ.LayerObject_yujing = featrueLayer_yujing; // 添加图层到图层对象\n\n      featureLayerOBJ.Rows = data.features; // 添加图层特征点数据到图层对象\n      // 更新FeatrueLayers\n\n      this.FeatrueLayers.forEach(function (val, index) {\n        if (val.itype == featureLayerOBJ.itype) {\n          _this12.FeatrueLayers.splice(index, 1, featureLayerOBJ);\n        }\n      });\n      return featureLayerOBJ;\n    },\n    // 添加选中提示的图形图层到地图\n    add_GraphicsLayer_Selection_ToMap: function add_GraphicsLayer_Selection_ToMap() {\n      var graphicsLayer_Selection = new esri.layers.GraphicsLayer();\n      this.map.addLayer(graphicsLayer_Selection);\n      this.graphicsLayer_Selection.LayerObject = graphicsLayer_Selection;\n    },\n    // 添加图形符号到选中提示的图形图层\n    add_Graphic_To_GraphicsLayer_Selection: function add_Graphic_To_GraphicsLayer_Selection(item) {\n      var point = new esri.geometry.Point(item.LGTD, item.LTTD, this.map.spatialReference);\n      var pictureSymbol = new esri.symbol.PictureMarkerSymbol( // getRootPath() + \"images/plot/point1.png\",\n      \"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2229475421,1482637450&fm=26&gp=0.jpg\", 20.4, 20.4);\n      var graphic = new esri.Graphic(point, pictureSymbol);\n      this.graphicsLayer_Selection.LayerObject.add(graphic);\n      this.graphicsLayer_Selection.graphics.push(graphic);\n    },\n    // 清除图形图层里的所有图形符号\n    GraphicsLayer_Selection_clear: function GraphicsLayer_Selection_clear() {\n      this.graphicsLayer_Selection.LayerObject.clear();\n    },\n    // 功能开发提示\n    developing_tip: function developing_tip() {\n      this.$Message.warning(\"从功能正在开发中...\");\n    },\n    // 添加shp地图到map\n    addSHPlayerToMap: function addSHPlayerToMap() {\n      // 创建空底图（基础）部分\n      //var graphicsSHPlayer = new esri.layers.GraphicsLayer();\n      // 往地图对象添置 空底图\n      //this.map.addLayer(graphicsSHPlayer);\n      //图层加载\n      this.loadSHP();\n    },\n    enlarge_img: function enlarge_img(rows, index) {\n      // 图片放大模态框展示\n      this.imgModal_show();\n      var newRows = rows ? JSON.parse(_JSON$stringify(rows)) : this.enlargeModal_carousel.rows;\n      this.enlargeModal_carousel.Rows = newRows;\n      this.enlargeModal_carousel.initial_index = index || 0;\n    },\n    // 图片放大模态框展示\n    imgModal_show: function imgModal_show() {\n      this.$refs.imgModal.style.display = \"block\";\n      this.enlargeModal_carousel.show = true;\n    },\n    // 图片放大模态框隐藏\n    imgModal_hide: function imgModal_hide() {\n      this.$refs.imgModal.style.display = \"none\";\n      this.enlargeModal_carousel.show = false;\n    },\n    // 图片顺时针旋转\n    clockwise_rotation: function clockwise_rotation() {\n      var ele = document.getElementById(\"img\".concat(this.enlargeModal_carousel.initial_index));\n      var rotate = ele.style.transform; // console.log(\"index\",this.enlargeModal_carousel.initial_index);\n      // console.log(\"ele\",ele);\n\n      if (rotate == \"\") {\n        ele.style.transform = \"rotate(90deg)\";\n      } else {\n        rotate = _parseInt(rotate.match(/\\d+/g));\n        ele.style.transform = \"rotate(\".concat(rotate + 90, \"deg)\");\n      } // .match(/\\d+/g)\n\n    },\n    // 图片逆时针旋转\n    counterclockwise_rotation: function counterclockwise_rotation() {\n      var ele = document.getElementById(\"img\".concat(this.enlargeModal_carousel.initial_index));\n      var rotate = ele.style.transform;\n\n      if (rotate == \"\") {\n        ele.style.transform = \"rotate(-90deg)\";\n      } else {\n        rotate = _parseInt(rotate.match(/\\d+/g));\n        ele.style.transform = \"rotate(\".concat(rotate - 90, \"deg)\");\n      }\n    },\n    // 图片还原\n    restore_rotation: function restore_rotation(imgID) {\n      var ele = document.getElementById(imgID);\n\n      if (ele) {\n        ele.style.transform = \"rotate(0deg)\";\n      }\n    },\n    // 图片比率\n    scale: function scale(id, ratio) {\n      var ele = document.getElementById(id);\n\n      if (typeof ratio === \"string\") {\n        switch (ratio) {\n          case \"up\":\n            break;\n        }\n      }\n    },\n    // 设置图片放大模态框轮播图自动播放\n    setCarousel_autoplay: function setCarousel_autoplay() {\n      this.enlargeModal_carousel.autoplay = true;\n    },\n    // 幻灯片切换触发事件\n    carousel_onChange: function carousel_onChange(newIndex, oldIndex) {\n      // 旧图片旋转还原\n      this.restore_rotation(\"img\".concat(oldIndex)); // 更新图片下标\n\n      this.enlargeModal_carousel.initial_index = newIndex;\n    },\n    // 消息窗口显示与否\n    Message_Window_show: function Message_Window_show(boolean) {\n      if (boolean) {\n        this.Message_Window_Controller.show = false;\n      } else {\n        this.Message_Window_Controller.show = true;\n      }\n    },\n    // getFList(){\n    //     console.log('++++++++++++++++++', this.FeatrueLayers);\n    //     for(let i = 0;i < this.FeatrueLayers.length;i ++){\n    //         let obj = {\n    //             title: JSON.parse(JSON.stringify(this.FeatrueLayers))[i].title,\n    //             show: JSON.parse(JSON.stringify(this.FeatrueLayers)).show\n    //         }\n    //         console.log('************',obj)\n    //     }\n    //     console.log('----------------',this.fList)\n    // }\n    // 顶部菜单方法\n    handleSelect: function handleSelect(key, keyPath) {\n      console.log(keyPath);\n      this.mapBox_show = 0;\n      this.$router.push(keyPath[0]);\n    },\n    navchange1: function navchange1() {\n      this.imgflag = 'jichushuju';\n      console.log(this.imgflag);\n    },\n    navchange2: function navchange2() {\n      this.imgflag = 'xinxifuwu';\n      console.log(this.imgflag);\n    },\n    navchange3: function navchange3() {\n      this.imgflag = 'zhafakongzhi';\n      console.log(this.imgflag);\n    },\n    navchange4: function navchange4() {\n      this.imgflag = 'zhibanguanli';\n      console.log(this.imgflag);\n    },\n    navchange5: function navchange5() {\n      this.imgflag = 'xiangguanpingtai';\n      console.log(this.imgflag);\n    },\n    navchange6: function navchange6() {\n      this.imgflag = 'yujingguanli';\n      console.log(this.imgflag);\n    },\n    navchange7: function navchange7() {\n      this.imgflag = 'lvdingguanli';\n      console.log(this.imgflag);\n    },\n    navchange8: function navchange8() {\n      this.imgflag = 'peishuiguanli';\n      console.log(this.imgflag);\n    },\n    navchange9: function navchange9() {\n      this.imgflag = 'weihuguanli';\n      console.log(this.imgflag);\n    }\n  },\n  computed: {}\n};",null]}