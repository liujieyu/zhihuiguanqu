{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-zhafazhuangtai.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-zhafazhuangtai.vue","mtime":1577669404030},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst oEcarts = document.getElementById(\"echartOD\");\nimport FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\nexport default {\n    props: {\n        info: {}\n    },\n    data() {\n        return {\n            OD: '',\n            // 激活标签栏\n            activeName: \"zhuangtaishuju\",\n            // 站点\n            siteInfo: {},\n            //   多选框对象\n            checkBox: {},\n            //   选择框对象\n            select: {},\n            // 表格\n            table: {\n                // 状态数据\n                kaidulishi: {\n                    // 表头设置\n                    columns: {},\n                    // 正在激活的表头\n                    activeColumns: [\n                        {\n                            type: \"index\",\n                            title: \" \",\n                            width: 60,\n                            align: \"center\",\n                            // 自定义序号\n                            indexMethod(item) {\n                                var index =\n                                    item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                                return index;\n                            },\n                            ellipsis: true\n                        },\n                        {\n                            title: \"时间\",\n                            key: \"tm\",\n                            width: 150,\n                            align: \"center\",\n                            sortable: \"custom\"\n                        },\n                        {\n                            title: \"闸门开度(m)\",\n                            width: 125,\n                            key: \"OD\",\n                            align: \"center\",\n                            sortable: \"custom\"\n                        },\n                        {\n                            width: 135,\n                            title: \"闸前水位(m)\",\n                            key: \"UPZ\",\n                            align: \"center\",\n                            sortable: \"custom\"\n                        },\n                        {\n                            width: 135,\n                            title: \"闸后水位(m)\",\n                            key: \"DWZ\",\n                            align: \"center\",\n                            sortable: \"custom\"\n                        },\n                        {\n                            width: 150,\n                            title: \"流量(m³/s)\",\n                            key: \"Q\",\n                            align: \"center\",\n                            sortable: \"custom\"\n                        }\n                    ],\n                    // 表体内容\n                    Rows: [],\n                    // 过滤后的表体内容\n                    Rows_filter: [],\n                    // 表格是否加载中\n                    loading: false,\n                    // 日期时间选择器的选项配置\n                    datePickerOptions: {\n                        shortcuts: [\n                            {\n                                text: \"最近6小时\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 6);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            },\n                            {\n                                text: \"最近12小时\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 12);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            },\n                            {\n                                text: \"最近24小时\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 24);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            },\n                            {\n                                text: \"最近36小时\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 36);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            },\n                            {\n                                text: \"最近72小时\",\n                                onClick(picker) {\n                                    const end = new Date();\n                                    const start = new Date();\n                                    start.setTime(start.getTime() - 3600 * 1000 * 72);\n                                    picker.$emit(\"pick\", [start, end]);\n                                }\n                            }\n                        ]\n                    },\n                    // 日期时间选择器类型\n                    datePickerType: \"datetimerange\",\n                    // 日期时间选择器值\n                    date: null,\n                    // 表格高度\n                    height: 430,\n                    // 表格是否加载中\n                    loading: false,\n                    // 总条数\n                    total: 0,\n                    // 当前页\n                    currentPage: 1,\n                    // 每页显示数量\n                    pageSizes: 20\n                }\n            },\n            // 图形\n            chart: {\n                zhuangtai: null\n            },\n            //   日期数据\n            date: {\n                shuiqing: \"\"\n            },\n            // 输入框对象\n            input: {\n                // 关系曲线换算的\n                huansuan: {\n                    waterLever: \"\",\n                    flowLever: \"\"\n                }\n            },\n            //   导出按钮加载控制\n            outPutLoading: false,\n            //   导出确认对话框控制\n            outPutModal: false,\n            // 整块区域的加载控制\n            boxLoading: false\n        };\n    },\n    mixins: [FilterMethods],\n    methods: {\n        // 绘制开度动态模拟图\n        // createEchartsOD(el) {\n        //     console.log('-------------', el)\n        //     let myChart = this.$echarts.init(el)\n        //     app.title = '柱状图框选';\n        //\n        //     var xAxisData = [];\n        //     var data1 = [];\n        //\n        //     xAxisData.push('已开度');\n        //     data1.push((Math.random() * 2).toFixed(2));\n        //     var itemStyle = {\n        //         normal: {},\n        //         emphasis: {\n        //             barBorderWidth: 1,\n        //             shadowBlur: 10,\n        //             shadowOffsetX: 0,\n        //             shadowOffsetY: 0,\n        //             shadowColor: 'rgba(0,0,0,0.5)'\n        //         }\n        //     };\n        //\n        //     let option = {\n        //         backgroundColor: '#eee',\n        //         legend: {\n        //             data: ['bar'],\n        //             align: 'left',\n        //             left: 10\n        //         },\n        //         brush: {\n        //             toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],\n        //             xAxisIndex: 0\n        //         },\n        //         toolbox: {\n        //             feature: {\n        //                 magicType: {\n        //                     type: ['stack', 'tiled']\n        //                 },\n        //                 dataView: {}\n        //             }\n        //         },\n        //         tooltip: {},\n        //         xAxis: {\n        //             show: false,\n        //             data: xAxisData,\n        //             name: 'X Axis',\n        //             silent: false,\n        //             axisLine: {onZero: true},\n        //             splitLine: {show: false},\n        //             splitArea: {show: false}\n        //         },\n        //         yAxis: [\n        //             {\n        //                 show: false,\n        //                 inverse: true,\n        //                 splitArea: {show: false}\n        //             },\n        //             {\n        //                 inverse: true,\n        //                 splitArea: {show: false}\n        //             },\n        //         ],\n        //         grid: {\n        //             left: 100\n        //         },\n        //\n        //         series: [\n        //             {\n        //                 name: 'bar',\n        //                 type: 'bar',\n        //                 stack: 'one',\n        //                 itemStyle: itemStyle,\n        //                 data: data1\n        //             }\n        //         ]\n        //     };\n        //\n        //     myChart.setOption(option);\n        // },\n\n\n        //   导出站点信息\n        outPutSiteInfo() {\n            //   关闭导出确认对话框\n            this.outPutModal = false;\n            //   按钮加载\n            this.outPutLoading = true;\n            setTimeout(() => {\n                this.outPutLoading = false;\n                this.$Modal.success({\n                    title: \"关于导出\",\n                    content: \"站点信息表导出成功\"\n                });\n            }, 500);\n        },\n        //   确认导出\n        outPutSure() {\n            this.outPutSiteInfo();\n        },\n        // 搜索\n        search_kaidulishi() {\n            // 表格加载中\n            this.table.kaidulishi.loading = true;\n\n            // 传递参数\n            var body = {\n                STCD: this.siteInfo.STCD,\n                _page: this.table.kaidulishi.currentPage || 1,\n                _page_size: this.table.kaidulishi.pageSizes || 20\n            };\n\n            // 如果有选择排序，则传递排序参数\n            if (this.table.kaidulishi.sort) {\n                var _sort = this.$FilterData.sort_Filter(this.table.kaidulishi.sort);\n                if (_sort) {\n                    body._orderby = _sort;\n                }\n            } else {\n                body._orderby = `TM desc`;\n            }\n\n            // 如果有选择日期进行查询，根据表格类型传递参数\n            if (this.table.kaidulishi.date) {\n                var DTT = this.$FilterData\n                    .elDatePicker_Filter(this.table.kaidulishi.date)\n                    .split(\",\");\n                body.Time_min = DTT[1];\n                body.Time_max = DTT[2];\n            }\n            this.$GetData.Survey_History_ZFZT(\n                \"historyTable\",\n                body,\n                {\n                    default: true,\n                    myFilter: data => {\n                        data.map(val => {\n                            val.currentPage = body._page;\n                            val.pageSizes = body._page_size;\n                            return val;\n                        });\n                        return data;\n                    }\n                },\n                data => {\n                    this.setTableTotal(\"kaidulishi\", data.total);\n                    this.setTableData(\"kaidulishi\", data.data);\n                    this.table.kaidulishi.loading = false;\n                    // this.createChart_historyTable(\"ztChart\", \"historyTable\", data.data)\n                    body._page_size = 999999999;\n                    body._page = 1;\n                    this.$GetData.Survey_History_ZFZT(\n                        \"historyTable\",\n                        body,\n                        {\n                            default: true,\n                            myFilter: data => {\n                                data.map(val => {\n                                    val.currentPage = body._page;\n                                    val.pageSizes = body._page_size;\n                                    return val;\n                                });\n                                return data;\n                            }\n                        },\n                        chartData => {\n                            this.createChart_historyTable(\n                                \"ztChart\",\n                                \"historyTable\",\n                                chartData.data\n                            ); // 水情表格\n                        }\n                    );\n                }\n            );\n\n            // this.getTableData_kaidulishi(body, (data) => {\n\n            // })\n        },\n        // 设置水情数据表格的总页数\n        setTableTotal(tableName, total) {\n            this.table[tableName].total = total;\n        },\n        // 绘图\n        createChart_historyTable(id, tableType, data) {\n            var ele = document.getElementById(id);\n\n            if (data.length > 0) {\n                var echartData = this.$App.transform_ZFZT_data_into_ehart_data(\n                    data,\n                    tableType\n                ); // 渠道水情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\n\n                if (!this.chart.zhuangtai) {\n                    this.chart.zhuangtai = this.$echarts.init(ele);\n                }\n                this.chart.zhuangtai.setOption({\n                    title: {\n                        text: echartData.chartName\n                    },\n                    tooltip: {\n                        trigger: \"axis\"\n                    },\n                    legend: {\n                        data: [echartData.y1.name, echartData.y2.name, echartData.y3.name],\n                        y: \"bottom\"\n                    },\n                    toolbox: {\n                        show: true,\n                        feature: {\n                            mark: {show: true},\n                            magicType: {show: true, type: [\"line\", \"bar\"]},\n                            restore: {show: true},\n                            saveAsImage: {show: true}\n                        }\n                    },\n                    calculable: true,\n                    animation: true,\n                    xAxis: [\n                        {\n                            type: \"category\",\n                            // boundaryGap: false,\n                            data: echartData.x.list\n                        }\n                    ],\n                    yAxis: [\n                        {\n                            name: `${echartData.y1.name} m³/s`,\n                            type: \"value\",\n                            axisLabel: {\n                                formatter: \"{value} \"\n                            },\n                            scale: true\n                        },\n                        {\n                            name: `闸阀上/下水位m`,\n                            type: \"value\",\n                            axisLabel: {\n                                formatter: \"{value} \"\n                            },\n                            scale: true\n                        },\n                        // {\n                        //     name: ` `,\n                        //     type: \"value\",\n                        //     axisLabel: {\n                        //         formatter: \"{value} \"\n                        //     },\n                        //     scale: true\n                        // }\n                    ],\n                    series: [\n                        {\n                            name: echartData.y1.name,\n                            type: \"line\",\n                            data: echartData.y1.list\n                        },\n                        {\n                            name: echartData.y2.name,\n                            type: \"line\",\n                            data: echartData.y2.list,\n                            yAxisIndex: 1\n                        },\n                        {\n                            name: echartData.y3.name,\n                            type: \"line\",\n                            data: echartData.y3.list,\n                            yAxisIndex: 1\n                        }\n                    ]\n                });\n            }\n        },\n        // 加载站点数据\n        loadSiteData(data) {\n            this.siteInfo = data;\n        },\n        // 组件加载中\n        componentLoading() {\n            this.boxLoading = true;\n        },\n        // 取消组件加载\n        cancelComponentLoading() {\n            this.boxLoading = false;\n        },\n        // 处理页码切换\n        handleCurrentChange_kaidulishi(index) {\n            this.table[\"kaidulishi\"].currentPage = index;\n            this.search_kaidulishi();\n        },\n        // 处理每页显示条数切换\n        handleSizeChange_kaidulishi(pageSizes) {\n            this.table[\"kaidulishi\"].pageSizes = pageSizes;\n            this.table[\"kaidulishi\"].currentPage = 1;\n            this.search_kaidulishi();\n        },\n\n        // 设置开度历史表默认查询日期\n        setTableDefaultDate_kaidulishi() {\n            const end = new Date();\n            const start = zeroPointOfTheDay();\n\n            var timeSlot = [start, end];\n\n            this.setTableDate(\"kaidulishi\", timeSlot);\n\n            function zeroPointOfTheDay() {\n                var date = new Date();\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                return date;\n            }\n        },\n        // 获取对应水情历史数据表的数据\n        getTableData_kaidulishi(body, callback) {\n            console.log(\"getTableData_kaidulishi\")\n            this.axios\n                .get(`/guanqu/zhafakongzhi/kaidulishi`, {\n                    // params: {\n                    //   STCD: this.info.STCD\n                    // }\n                    params: body\n                })\n                .then(res => {\n                    var data = res.data.list;\n                    console.log(\"========================\")\n                    console.log(data);\n                    var total = res.data.total;\n                    this.OD = data[0].OD;\n                    data = data.map(val => {\n                        val.currentPage = this.table.kaidulishi.currentPage;\n                        val.pageSizes = this.table.kaidulishi.pageSizes;\n                        val.TM = this.dateFilter(val.TM);\n                        val.OD = this.Z_Filter(val.OD);\n                        val.UPZ = this.Z_Filter(val.UPZ);\n                        val.DWZ = this.Z_Filter(val.DWZ);\n                        val.Q = this.Z_Filter(val.Q, 3);\n                        return val;\n                    });\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            data: data,\n                            total: total\n                        });\n                    }\n                });\n        },\n        // 更新 XX 表格的数据\n        setTableData(tableName, data) {\n            this.table[tableName].Rows_filter = data;\n        },\n\n        // 根据行政区划编码获取行政区划\n        getCompartmentByADDVCD(callback) {\n            var ADDVCD = this.info.rowinfo.ADDVCD;\n            if (ADDVCD && ADDVCD != \"\") {\n                this.axios\n                    .get(`/guanqu/admin/WRP_AD_B`, {\n                        params: {\n                            AD_CD: ADDVCD\n                        }\n                    })\n                    .then(res => {\n                        var data = res.data.rows;\n                        if (typeof callback == \"function\") {\n                            callback(data);\n                        }\n                    });\n            }\n        },\n        // 处理日期时间选择器确定事件_开度历史\n        handleDatePickerChange_kaidulishi(item) {\n            this.table.kaidulishi.currentPage = 1;\n            this.search_kaidulishi();\n        },\n        // 设置 xx表格 时间选择器值\n        setTableDate(tableName, val) {\n            this.table[tableName].date = val;\n        },\n        // 排序\n        sort_change_kaidulishi(item) {\n            this.table.kaidulishi.sort = item;\n\n            this.search_kaidulishi();\n        }\n    }\n    ,\n    mounted() {\n        // this.createEchartsOD(document.getElementById('echartOD'))\n        // 组件加载中\n        this.componentLoading();\n        // 获取详情数据\n        this.axios\n            .get(`/guanqu/table/details?ID=${this.info.rowinfo.STCD}&pk=STCD`)\n            .then(res => {\n                this.getCompartmentByADDVCD(data => {\n                    this.siteInfo.AD_NM = data[0].AD_NM;\n                });\n                // 根据河流编码获取河流名\n                this.$GetData.Base_R_I(\n                    {\n                        RVCD: this.info.rowinfo.RVCD\n                    },\n                    true,\n                    data => {\n                        this.siteInfo.RVCD = data.data[0].RVNM;\n                    }\n                );\n\n                // 根据流域编码获取流域名\n                this.$GetData.Base_B_I(\n                    {\n                        CTCD: this.info.rowinfo.CTCD\n                    },\n                    true,\n                    data => {\n                        this.siteInfo.CTCD = data.data[0].CTNM;\n                    }\n                );\n                // 加载站点数据\n                this.loadSiteData(res.data);\n                // 组件加载取消\n                this.cancelComponentLoading();\n                // 设置开度历史数据表默认查询日期\n                this.setTableDefaultDate_kaidulishi();\n                // 查询开度历史数据表的数据\n                this.search_kaidulishi();\n            });\n        this.getTableData_kaidulishi();\n    }\n}\n;\n",null]}