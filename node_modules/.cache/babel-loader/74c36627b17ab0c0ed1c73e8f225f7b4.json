{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\thread-loader\\dist\\cjs.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\huangcaiplace\\zhihuiguanqu\\src\\assets\\commonJS\\GetDataConfig.js","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\assets\\commonJS\\GetDataConfig.js","mtime":1577669403924},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseInt from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport FilterMethods from \"@/assets/commonJS/FilterMethods\";\nimport axios from 'axios';\nexport default {\n  // 基础数据\n  // 监测站点\n  Base_MonitoringSites: function Base_MonitoringSites(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"basic\":\n        tableName = \"ST_STBPRP_B\";\n        break;\n\n      case \"MonitoringType\":\n        tableName = \"ST_STBPRP_F\";\n        break;\n\n      case \"RelatedElements\":\n        tableName = \"ST_STINFO_WRP\";\n        break;\n\n      case \"Z_Q_relation\":\n        tableName = \"ST_ZQRL_B\";\n        break;\n\n      case \"Gate_Z_Q_relation\":\n        tableName = \"ST_G_Q_Z\";\n        break;\n    }\n\n    axios.get(\"/guanqu/admin/\".concat(tableName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.DT = FilterMethods.methods.dateFilter(val.DT); // 时间\n\n              val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n\n              val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z); // 平均水位\n\n              val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n\n              val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z); // 日平均水位\n\n              val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"Z_Q_relation\":\n            newData = data.map(function (val) {\n              // val.YR = FilterMethods.methods.dateFilter(val.YR); // 年份\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"Gate_Z_Q_relation\":\n            newData = data.map(function (val) {\n              val.Q = FilterMethods.methods.dateFilter(val.Q, 3); // 流量\n\n              val.OD = FilterMethods.methods.Float_Filter(val.OD); // 闸门开度\n\n              val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ); // 闸前水位\n\n              val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸后水位\n\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 河流信息\n  Base_R_I: function Base_R_I(body, filter, callBack) {\n    axios.get(\"/guanqu/admin/WRP_RVR_BSIN\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 流域信息\n  Base_B_I: function Base_B_I(body, filter, callBack) {\n    axios.get(\"/guanqu/admin/WRP_LY_BSIN\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 监控模块\n  // 历史统计类\n  // 水库水情\n  Survey_History_SWKR: function Survey_History_SWKR(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single\";\n        break;\n\n      case \"hourTable\":\n        console.log('@@@@@@@@@@@@@@@@@@@' + tableType);\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"overTime\":\n        tableName = \"single_chaoxunxianshijian\";\n        break;\n\n      case \"sishiTable\":\n        tableName = \"single_details\";\n        break;\n    }\n\n    var __url = \"/guanqu/shuiweikurong/\".concat(tableName);\n\n    axios.get(__url, {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, null, 0); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.Min_TM = \"\".concat(FilterMethods.methods.dateFilter(val.Min_TM, 2));\n              ; // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 平均水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); //kuxia\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, \"onlyDate\"); // 时间\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 日平均水位\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 日出库平均流量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n              // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 月平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 月平均水位\n              // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"maxTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              val.FWL = FilterMethods.methods.Float_Filter(val.FWL); // 4-6月汛限水位\n\n              val.FWL79 = FilterMethods.methods.Float_Filter(val.FWL79); // 4-6月汛限水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n\n              return val;\n            });\n            break;\n\n          case \"sishiTable\":\n            newData = res.data;\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 雨情\n  Survey_History_YQ: function Survey_History_YQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single_lishi\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"tenDaysTable\":\n        tableName = \"single_xun\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"yearTable\":\n        tableName = \"single_nian\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"single_yujing\";\n        break;\n\n      case \"alarmTable_shangbao\":\n        tableName = \"single_yujingshangbao\";\n        break;\n    }\n\n    axios.get(\"/guanqu/yuqing/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n              // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.TM) < 10) {\n                val.TM = \"0\".concat(val.TM);\n              } // val.DT = `${val.DT} ${val.TM}`;; // 时间\n              // val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n\n\n              val.P = FilterMethods.methods.Float_Filter(val.P, 1); // 降雨量\n              // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              console.log(val); // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.p = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\n\n              if (val.p === '0.0') {\n                val.p = '';\n              } // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              console.log(val.P);\n\n              if (val.P === '0.0') {\n                val.P = '';\n              } // var DT = val.PTBGDT.split(\"-\"),\n              //     Year = parseInt(DT[0]),\n              //     Month = parseInt(DT[1]),\n              //     Day = parseInt(DT[2]),\n              //     Year_Month = `${Year}-${Month}`\n              //\n              // if (Day > 0 && Day <= 10) {\n              //     val.PTBGDT = `${Year_Month} 上旬`\n              // } else if (Day > 10 && Day <= 20) {\n              //     val.PTBGDT = `${Year_Month} 中旬`\n              // } else {\n              //     val.PTBGDT = `${Year_Month} 下旬`\n              // }\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              // if (parseInt(val.MON) < 10) {\n              //     val.MON = '0'+val.MON\n              // }\n              if (val.P === '0.0') {\n                val.P = '';\n              } // val.DT = `${val.YR}-${val.MON}`; // 时间\n              // // val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 月平均流量\n              // val.P = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\n              // // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              val.P = FilterMethods.methods.Float_Filter(val.P, 1); // 降雨量\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable_shangbao\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 预警水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 雨情雨量统计数据\n  statistics_rain_YQ: function statistics_rain_YQ(tableType, body, filter, callBack) {\n    // debugger;\n    var tbName = '';\n\n    switch (tableType) {\n      case \"historyTable\":\n        tbName = \"tongji_lishi\";\n        break;\n\n      case \"hourTable\":\n        tbName = \"tongji_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        body.Time_min = body.Time_min.substr(0, 10);\n        body.Time_max = body.Time_max.substr(0, 10);\n        tbName = \"tongji_ri\";\n        break;\n\n      case \"tenDaysTable\":\n        tbName = \"tongji_xun\";\n        break;\n\n      case \"monthTable\":\n        tbName = \"tongji_yue\";\n        break;\n\n      case \"yearTable\":\n        tbName = \"tongji_nian\";\n        break;\n\n      case \"alarmTable\":\n        tbName = \"tongji_yujing\";\n        break;\n\n      case \"alarmTable_shangbao\":\n        tbName = \"tongji_ujingshangbao\";\n        break;\n    }\n\n    axios.get(\"/guanqu/yuqing/\".concat(tbName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n        // switch (tableType) {\n        //     case \"historyTable\":\n        //         newData = data.map(val => {\n        //             val.TM = FilterMethods.methods.dateFilter(val.TM, null, null, 0); // 时间\n        //             val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库流量\n        //             val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库流量\n        //             val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 水位\n        //             val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ) // 水位\n        //             return val;\n        //         })\n        //         break;\n        //     case \"hourTable\":\n        //         newData = data.map(val => {\n        //             val.Min_TM = `${FilterMethods.methods.dateFilter(val.Min_TM, 2)}`;\n        //             ; // 时间\n        //             val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库平均流量\n        //             val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库平均流量\n        //             val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 平均水位\n        //             val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)//kuxia\n        //             return val;\n        //         })\n        //         break;\n        //     case \"dayTable\":\n        //         newData = data.map(val => {\n        //             val.TM = FilterMethods.methods.dateFilter(val.TM, null, \"onlyDate\"); // 时间\n        //             val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 日平均水位\n        //             val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日入库平均流量\n        //             val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 日出库平均流量\n        //             val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)\n        //             return val;\n        //         })\n        //         break;\n        //     case \"tenDaysTable\":\n        //         newData = data.map(val => {\n        //             // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n        //             // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n        //             // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n        //             // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n        //             return val;\n        //         })\n        //         break;\n        //     case \"monthTable\":\n        //         newData = data.map(val => {\n        //             if (parseInt(val.MON) < 10) {\n        //                 val.MON = '0' + val.MON\n        //             }\n        //             val.DT = `${val.YR}-${val.MON}`; // 时间\n        //             // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\n        //             val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\n        //             val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 月平均流量\n        //             val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 月平均水位\n        //             // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n        //             val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)\n        //             return val;\n        //         })\n        //         break;\n        //     case \"yearTable\":\n        //         newData = data.map(val => {\n        //             // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n        //             // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n        //             // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n        //             // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n        //             return val;\n        //         })\n        //         break;\n        //     case \"maxTable\":\n        //         newData = data.map(val => {\n        //             // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n        //             // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n        //             // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n        //             return val;\n        //         })\n        //         break;\n        //     case \"alarmTable\":\n        //         newData = data.map(val => {\n        //             // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n        //             val.FWL = FilterMethods.methods.Float_Filter(val.FWL) // 4-6月汛限水位\n        //             val.FWL79 = FilterMethods.methods.Float_Filter(val.FWL79) // 4-6月汛限水位\n        //             // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n        //             // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n        //             return val;\n        //         })\n        //         break;\n        //     case \"sishiTable\":\n        //         newData = res.data\n        //         break;\n        //\n        // }\n\n        return newData;\n      }\n    });\n  },\n  // 水库水情\n  Survey_History_SKSQ: function Survey_History_SKSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single_lishi\";\n        break;\n\n      case \"hourTable\":\n        console.log('@@@@@@@@@@@@@@@@@@@' + tableType);\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"maxZ\":\n        tableName = \"single_zuigaoshuiwe\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"single_yujing\";\n        break;\n\n      case \"overTime\":\n        tableName = \"single_chaoxunxianshijian\";\n        break;\n\n      case \"sishiTable\":\n        tableName = \"single_details\";\n        break;\n    }\n\n    var __url = \"/guanqu/shuikushuiqing/\".concat(tableName);\n\n    axios.get(__url, {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, null, 0); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.Min_TM = \"\".concat(FilterMethods.methods.dateFilter(val.Min_TM, 2));\n              ; // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 平均水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); //kuxia\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, \"onlyDate\"); // 时间\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 日平均水位\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 日出库平均流量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n              // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 月平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 月平均水位\n              // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"maxTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              val.FWL = FilterMethods.methods.Float_Filter(val.FWL); // 4-6月汛限水位\n\n              val.FWL79 = FilterMethods.methods.Float_Filter(val.FWL79); // 4-6月汛限水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n\n              return val;\n            });\n            break;\n\n          case \"sishiTable\":\n            newData = res.data;\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 河道水情\n  Survey_History_HDSQ: function Survey_History_HDSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single_lishi\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"maxZ\":\n        tableName = \"single_zuigaoshuiwe\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"single_yujing\";\n        break;\n\n      case \"overTime\":\n        tableName = \"single_chaoxunxianshijian\";\n        break;\n    }\n\n    axios.get(\"/guanqu/hedaoshuiqing/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              // val.DTT = `${FilterMethods.methods.dateFilter(val.DTT, 2)}`;; // 时间\n              val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM, 2); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 平均水位\n              // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM, 2); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\n              if (_parseInt(val.MON) < 10) {\n                val.MON = \"0\".concat(val.MON);\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 月平均水位\n              // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"maxTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 预警水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 渠道水情\n  Survey_History_QDSQ: function Survey_History_QDSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"ST_Canal_R\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"ST_HCanal_C\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"ST_DCanal_C\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"View_ST_MCanal_C\";\n        break;\n\n      case \"maxQTable\":\n        tableName = \"ST_G_CQORD\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"ST_Canal_Alarm\";\n        break;\n    }\n\n    axios.get(\"/guanqu/table/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.DTT = \"\".concat(FilterMethods.methods.dateFilter(val.DTT, 2));\n              ; // 时间\n\n              val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n\n              val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z); // 平均水位\n\n              val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n\n              val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z); // 日平均水位\n\n              val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n\n              val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 月平均流量\n\n              val.MA_Z = FilterMethods.methods.Float_Filter(val.MA_Z); // 月平均水位\n\n              val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              return val;\n            });\n            break;\n\n          case \"maxQTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n\n              val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ); // 对应水位\n\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 预警水位\n\n              val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n\n              val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 闸阀水情\n  Survey_History_ZFSQ: function Survey_History_ZFSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    console.log(tableType);\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"table/ST_WAS_R\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"zhafashuiqing/item_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"table/ST_DWAS_C\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"table/View_ST_MWAS_C\";\n        break;\n\n      case \"maxQTable\":\n        tableName = \"table/ST_G_WASQORD\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"table/ST_Gate_Alarm\";\n        break;\n    }\n\n    axios.get(\"/guanqu/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 日期过滤\n\n              val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ); // 闸阀前水位过滤\n\n              val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸阀后水位过滤\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量过滤\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.DTT = \"\".concat(FilterMethods.methods.dateFilter(val.DTT, 2)); // 时间\n\n              val.A_UPZ = FilterMethods.methods.Float_Filter(val.A_UPZ); // 平均闸阀前水位过滤\n\n              val.A_DWZ = FilterMethods.methods.Float_Filter(val.A_DWZ); // 平均闸阀后水位过滤\n\n              val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 过闸平均流量过滤\n\n              val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计过闸水量过滤\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 日期过滤\n\n              val.DA_UPZ = FilterMethods.methods.Float_Filter(val.DA_UPZ); // 平均闸阀前水位过滤\n\n              val.DA_DWZ = FilterMethods.methods.Float_Filter(val.DA_DWZ); // 平均闸阀后水位过滤\n\n              val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 平均过闸流量过滤\n\n              val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计过闸水量过滤\n\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.TM = \"\".concat(val.YR, \"-\").concat(val.MON);\n              val.DTT = \"\".concat(val.YE, \"-\").concat(val.MON);\n              val.MA_UPZ = FilterMethods.methods.Float_Filter(val.MA_UPZ); // 平均闸阀前水位过滤\n\n              val.MA_DWZ = FilterMethods.methods.Float_Filter(val.MA_DWZ); // 平均闸阀后水位过滤\n\n              val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 平均过闸流量过滤\n\n              val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计过闸水量过滤\n\n              return val;\n            });\n            break;\n\n          case \"maxQTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXUPQZ = FilterMethods.methods.Float_Filter(val.YMXUPQZ) // 对应闸前水位\n              // val.YMXDNQZ = FilterMethods.methods.Float_Filter(val.YMXDNQZ) // 对应闸后水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n\n              val.SZ = FilterMethods.methods.Float_Filter(val.SZ); // 预警闸前水位\n\n              val.EZ = FilterMethods.methods.Float_Filter(val.EZ); // 预警闸后水位\n\n              val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n\n              val.JYSZ = FilterMethods.methods.Float_Filter(val.JYSZ); // 经验预警闸前水位\n\n              val.JYEZ = FilterMethods.methods.Float_Filter(val.JYEZ); // 经验预警闸后水位\n\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 闸阀状态\n  Survey_History_ZFZT: function Survey_History_ZFZT(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        // 历史表\n        tableName = \"zhafakongzhi/kaidulishi\";\n        break;\n\n      case \"openTimeTable\":\n        // 开启时长统计表\n        tableName = \"table/ST_Gatage_C\";\n        break;\n    }\n\n    axios.get(\"/guanqu/\".concat(tableName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.tm = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 过闸流量\n\n              val.OD = FilterMethods.methods.Float_Filter(val.OD); // 闸门开度\n\n              val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ); // 闸前水位\n\n              val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸后水位\n\n              return val;\n            });\n            break;\n\n          case \"openTimeTable\":\n            newData = data.map(function (val) {\n              // val.DT = FilterMethods.methods.dateFilter(val.DT); // 时间\n              // val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n              // val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z) // 平均水位\n              // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 运行工况\n  Survey_History_YXGK: function Survey_History_YXGK(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        // 历史表\n        tableName = \"ST_StationStatus_H\";\n        break;\n\n      case \"auxiliaryTable\":\n        tableName = \"ST_StationStatusType\";\n        break;\n    }\n\n    console.log(body);\n    axios.get(\"/guanqu/admin/\".concat(tableName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.VOL = FilterMethods.methods.Float_Filter(val.VOL, 1); // 电压\n\n              val.CS = FilterMethods.methods.CS_Filter(val.CS); // 通讯状态\n\n              return val;\n            });\n            break;\n\n          case \"auxiliaryTable\":\n            // newData = data.map(val => {\n            //     val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n            //     val.VOL = FilterMethods.methods.Float_Filter(val.VOL); // 电压\n            //     val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\n            //     return val;\n            // })\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 获取运行工况正常电压范围\n  Survey_Around_YXGK: function Survey_Around_YXGK(tableType, body, filter, callBack) {\n    // var tableName;\n    // // 根据不同类型的表，选择数据库中对应的表名\n    // switch (tableType) {\n    //     case \"historyTable\": // 历史表\n    //         tableName = \"ST_StationStatus_H\"\n    //         break;\n    //\n    //     case \"auxiliaryTable\":\n    //         tableName = \"ST_StationStatusType\"\n    //         break;\n    // }\n    delete body.TM;\n    delete body._page_size;\n    delete body.Time_max;\n    delete body.Time_min;\n    axios.get(\"/guanqu/table/ST_StationStatusType\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // switch (tableType) {\n        //     case \"historyTable\":\n        //         newData = data.map(val => {\n        //             val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n        //             val.VOL = FilterMethods.methods.Float_Filter(val.VOL,1); // 电压\n        //             val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\n        //             return val;\n        //         })\n        //         break;\n        //\n        //     case \"auxiliaryTable\":\n        //         // newData = data.map(val => {\n        //         //     val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n        //         //     val.VOL = FilterMethods.methods.Float_Filter(val.VOL); // 电压\n        //         //     val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\n        //         //     return val;\n        //         // })\n        //         break;\n        // }\n\n        return newData;\n      }\n    });\n  },\n  // 图像\n  Survey_History_TX: function Survey_History_TX(body, filter, callBack) {\n    axios.get(\"/guanqu/table/ST_JPG_H\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          val.url = val.Save_Path; // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 视频\n  Survey_History_SP: function Survey_History_SP(body, filter, callBack) {\n    axios.get(\"/guanqu/shipin/gis\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.features; // 数据\n\n      var total = res.data.features.length; // 数据总条数\n\n      console.log(\"Survey_History_SP\", res.data.features); // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          // val.url = val.Save_Path; // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 获取图层数据  /guanqu/zhafazhuangtai/gis\n  // 获取具有过滤条件的图层数据\n  getFeatrueLayer: function getFeatrueLayer(type, body, callback, errCallback) {\n    /*\r\n    type为数字，以下为不同数字对应图层\r\n    4: 渠道水情\r\n    5: 闸阀水情\r\n    6: 闸阀状态\r\n    7: 图像\r\n    8: 视频\r\n    */\n    var url = \"/guanqu/\".concat(type, \"/gis\"); // var body = {\n    //     // _filter: new Object()\n    // };\n    // // 增加过滤字段\n    // for (var key in fields) {\n    //     body[key] = fields[key];\n    // }\n\n    axios.post(url, body).then(function (res) {\n      if (typeof errCallback == \"function\") {\n        errCallback();\n      }\n\n      if (typeof callback == \"function\") {\n        callback(res);\n      }\n    });\n  }\n};",null]}