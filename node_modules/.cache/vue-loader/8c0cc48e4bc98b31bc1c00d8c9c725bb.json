{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\BaseBox\\BaseBox-qudaoshuiqing.vue?vue&type=style&index=0&lang=less&scope=true&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\BaseBox\\BaseBox-qudaoshuiqing.vue","mtime":1577669404016},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\less-loader\\dist\\cjs.js","mtime":1642129565717},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n/* 引入baseBox公共样式 */\r\n@import \"../../assets/commonLess/baseBox\";\r\n",{"version":3,"sources":["BaseBox-qudaoshuiqing.vue"],"names":[],"mappingsw8BA;AACA","file":"BaseBox-qudaoshuiqing.vue","sourceRoot":"src/components/BaseBox","sourcesContent":["<template>\r\n  <div class=\"baseBoxContent\">\r\n    <!-- 折叠面板 -->\r\n    <!-- 表单, 用于搜索查询 -->\r\n    <Collapse active-key=\"1\">\r\n      <Panel key=\"1\">\r\n        查询\r\n        <div slot=\"content\">\r\n          <div class=\"form\">\r\n            <!-- 选择器, 按钮 -->\r\n            <Row class=\"select-group\" :gutter=\"16\">\r\n              <!-- <Col span=\"2\">\r\n                <span style=\"line-height:25px\">市:</span>\r\n              </Col>-->\r\n              <Col span=\"11\">\r\n                <!-- 地址级联选择器 -->\r\n                <el-cascader\r\n                  clearable\r\n                  filterable\r\n                  size=\"mini\"\r\n                  placeholder=\"请选择地址\"\r\n                  :options=\"form.adressList\"\r\n                  v-model=\"form.model_adress\"\r\n                  @change=\"search\"\r\n                  change-on-select\r\n                ></el-cascader>\r\n              </Col>\r\n\r\n              <Col span=\"11\">\r\n                <!-- 渠道级联选择器 -->\r\n                <el-cascader\r\n                  filterable\r\n                  clearable\r\n                  size=\"mini\"\r\n                  placeholder=\"请选择渠道\"\r\n                  :options=\"form.qudaoList\"\r\n                  v-model=\"form.model_qudao\"\r\n                  @change=\"search\"\r\n                  change-on-select\r\n                ></el-cascader>\r\n              </Col>\r\n            </Row>\r\n            <!-- 分割线 -->\r\n            <div class=\"divider\"></div>\r\n            <Row :gutter=\"16\">\r\n              <Col span=\"22\">\r\n                <Input\r\n                  search\r\n                  enter-button\r\n                  @on-search=\"search\"\r\n                  placeholder=\"请输入要搜索的站名\"\r\n                  size=\"small\"\r\n                  v-model.trim=\"form.search_str\"\r\n                >\r\n                  <!-- <Icon type=\"ios-search\" slot=\"suffix\"/> -->\r\n                </Input>\r\n              </Col>\r\n              <!-- <Col span=\"5\">\r\n                查询按钮\r\n                <Button type=\"info\" size=\"small\" @click=\"search\">查询</Button>\r\n              </Col>-->\r\n            </Row>\r\n            <!-- 分割线 -->\r\n            <div class=\"divider\"></div>\r\n            <Row :gutter=\"16\" type=\"flex\" justify=\"center\" align=\"middle\">\r\n              <Col span=\"4\" style=\"text-align:center;\">\r\n                <span style=\"letter-spacing:5px\">标记:</span>\r\n              </Col>\r\n              <Col span=\"20\">\r\n                <CheckboxGroup\r\n                  @on-change=\"checkboxGroup_onChange\"\r\n                  v-model=\"form.social\"\r\n                  class=\"checkBox-group\"\r\n                  style=\"height:22px\"\r\n                >\r\n                  <Checkbox\r\n                    v-for=\"item in form.checkBoxList\"\r\n                    :label=\"item.value\"\r\n                    :size=\"item.size\"\r\n                    class=\"checkBoxItem\"\r\n                  >\r\n                    <span>{{ item.title }}</span>\r\n                  </Checkbox>\r\n                </CheckboxGroup>\r\n              </Col>\r\n            </Row>\r\n            <!-- 多选框 -->\r\n          </div>\r\n        </div>\r\n      </Panel>\r\n    </Collapse>\r\n\r\n    <!-- 表格, 用于展示数据 -->\r\n    <div>\r\n      <el-table\r\n        @cell-click=\"cellClick\"\r\n        :data=\"pageFilter()\"\r\n        border\r\n        style=\"width: 100%\"\r\n        size=\"small\"\r\n        :height=\"table.height\"\r\n        v-loading=\"table.loading\"\r\n        empty-text=\"暂无站点数据\"\r\n        @sort-change=\"sort_change\"\r\n      >\r\n        <el-table-column\r\n          v-for=\"(item,index) in table.columns\"\r\n          :prop=\"item.key\"\r\n          :align=\"item.align\"\r\n          :label=\"item.title\"\r\n          :width=\"item.width\"\r\n          :fixed=\"item.fixed\"\r\n          :sortable=\"item.sortable\"\r\n          :show-overflow-tooltip=\"true\"\r\n        ></el-table-column>\r\n        <!-- 自定义 -->\r\n        <el-table-column align=\"center\" label=\"水势\" :width=\"80\">\r\n          <template slot-scope=\"scope\">\r\n            <div>\r\n              <strong\r\n                :style=\"{\r\n              color: scope.row.WPTN.status == 4? 'blue' : scope.row.WPTN.status == 5?'red' : 'black',\r\n              fontSize: scope.row.WPTN.status == 6?'12px' : '17px'\r\n            }\"\r\n              >{{ scope.row.WPTN.symbol }}</strong>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <!-- 分割线 -->\r\n      <!-- <Divider/> -->\r\n      <div class=\"divider\"></div>\r\n      <!-- 分页器 -->\r\n      <el-pagination\r\n        background\r\n        :page-size=\"table.pageSizes\"\r\n        layout=\"total, prev, pager, next, jumper, sizes\"\r\n        :page-sizes=\"[20, 50, 100, 200]\"\r\n        :total=\"table.Rows.length\"\r\n        :pager-count=\"5\"\r\n        :current-page=\"table.currentPage\"\r\n        @current-change=\"handleCurrentChange\"\r\n        @size-change=\"handleSizeChange\"\r\n        class=\"pageController\"\r\n        small\r\n      ></el-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport TipsQUDAO from \"@/components/BaseBox/Tips/Tips-qudaoshuiqing.vue\";\r\nimport FilterMethods from \"@/assets/commonJS/FilterMethods\";\r\nimport GetDataMethods from \"@/assets/commonJS/GetDataMethods\";\r\nimport { truncateSync } from \"fs\";\r\nimport { setTimeout, setInterval, clearInterval } from \"timers\";\r\n\r\nexport default {\r\n  props: {\r\n    featrue: {\r\n      type: Object\r\n    },\r\n    search_FeatrueLayer: {\r\n      type: Function\r\n    }\r\n  },\r\n  components: {\r\n    TipsQUDAO\r\n  },\r\n  data() {\r\n    return {\r\n      // 折叠面板对象\r\n      collapse: {\r\n        activeName: \"\",\r\n        list: []\r\n      },\r\n      // 地图对象\r\n      map: null,\r\n      // 该图层对象\r\n      JsonFlayer: null,\r\n      // 文字标注图层\r\n      TextGraphicsLayers: [],\r\n      // 控制面板计时器\r\n      baseBox_Interval: null,\r\n      // 提示 展示\r\n      tip: {\r\n        info_tip: null,\r\n        show_tip: false\r\n      },\r\n      // 表单数据\r\n      form: {\r\n        search_str: \"\",\r\n        adressList: [],\r\n        qudaoList: [],\r\n        social: [\"site\"],\r\n        checkBoxList: [\r\n          {\r\n            value: \"site\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            title: \"站点\"\r\n          },\r\n          {\r\n            value: \"STNM\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            title: \"站名\"\r\n          },\r\n          {\r\n            value: \"Z\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            title: \"水深\"\r\n          },\r\n          {\r\n            value: \"Q\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            title: \"流量\"\r\n          }\r\n        ],\r\n        model_adress: [],\r\n        model_qudao: null\r\n      },\r\n      // 表格数据\r\n      table: {\r\n        // 表头设置\r\n        columns: [\r\n          {\r\n            title: \" \",\r\n            key: \"index\",\r\n            width: 45,\r\n            align: \"center\",\r\n            fixed: \"left\"\r\n          },\r\n          {\r\n            title: \"站名\",\r\n            key: \"STNM\",\r\n            width: 120,\r\n            align: \"center\",\r\n            fixed: \"left\",\r\n            sortable: \"custom\"\r\n          },\r\n          {\r\n            title: \"时间\",\r\n            key: \"TM\",\r\n            width: 130,\r\n            align: \"center\",\r\n            sortable: \"custom\"\r\n          },\r\n          {\r\n            title: \"流量(m³/s)\",\r\n            key: \"Q\",\r\n            width: 120,\r\n            align: \"center\",\r\n            sortable: \"custom\"\r\n          },\r\n          {\r\n            title: \"水深(m)\",\r\n            key: \"Z\",\r\n            width: 120,\r\n            align: \"center\",\r\n            sortable: \"custom\"\r\n          }\r\n        ],\r\n        // 表体内容\r\n        Rows: [],\r\n        // 过滤后的表体内容\r\n        Rows_filter: [],\r\n        // 表格是否加载中\r\n        loading: false,\r\n        // 当前页\r\n        currentPage: 1,\r\n        // 每页显示数量\r\n        pageSizes: 20,\r\n        // 表体高度\r\n        height: 300\r\n      }\r\n    };\r\n  },\r\n  // 引入过滤方法到此组件\r\n  mixins: [FilterMethods, GetDataMethods],\r\n  methods: {\r\n    // 表格每一行点击事件\r\n    cellClick(item) {\r\n      var evt = new Object();\r\n      evt.graphic = new Object();\r\n      evt.graphic.attributes = item;\r\n      evt.graphic.attributes.rowinfo = JSON.parse(JSON.stringify(item));\r\n      evt.graphic.attributes.rowinfo.tableType = {\r\n        qdsq: \"historyTable\"\r\n      };\r\n      var v = new Object();\r\n      v.itype = \"qudaoshuiqing\";\r\n\r\n      // 设置中心缩放\r\n      this.setMapCenterandZoom(item.LGTD, item.LTTD);\r\n      // 取消所有站点的闪烁\r\n      this.$App.GraphicsLayer_Selection_clear();\r\n      // 对应站点闪烁\r\n      this.$App.add_Graphic_To_GraphicsLayer_Selection(item);\r\n      // 展示抽屉详情框\r\n      this.$App.showDrawer(evt, v);\r\n    },\r\n    // 提示展示\r\n    showTips(item) {\r\n      // 隐藏之前提示框\r\n\r\n      // console.log(this.$FilterData.dateFilter(\r\n      //         item.rowinfo.TM\r\n      // ));\r\n      this.hideTips();\r\n      \r\n      console.log('悬浮框');\r\n      console.log(item);\r\n      \r\n      var div = `<div>\r\n        <div class=\"tip_row\">\r\n                <span class=\"tip_col_5\">时间：</span>\r\n                <span class=\"tip_col_7\">${\r\n                  item.rowinfo.TM? '20' + item.rowinfo.TM.substr(0,14) : \"\"\r\n               }</span>\r\n                <span class=\"tip_col_5\">流量：</span>\r\n                <span class=\"tip_col_7\">${\r\n                  this.$FilterData.Float_Filter(item.rowinfo.Q, 3) == \"\"\r\n                    ? \"\"\r\n                    : this.$FilterData.Float_Filter(item.rowinfo.Q, 3) + \"m³/s\"\r\n                }</span>\r\n                <span class=\"tip_col_5\">水深：</span>\r\n                <span class=\"tip_col_7\">${\r\n                  this.$FilterData.Float_Filter(item.rowinfo.Z) == \"\"\r\n                    ? \"\"\r\n                    : this.$FilterData.Float_Filter(item.rowinfo.Z) + \"m\"\r\n                }</span>\r\n              </div>\r\n              <div class=\"divider\"></div>\r\n              <div class=\"tip_row\">\r\n                <span class=\"tip_col_5\">水势：</span>\r\n                <span class=\"tip_col_7\" id=\"${item.STCD}_shuishi\">\r\n\r\n                </span>\r\n                <span class=\"tip_col_5\" >预警水深：</span>\r\n                <span class=\"tip_col_7\" id=\"${item.STCD}_YJZ\">\r\n                ${\r\n                  this.$FilterData.Float_Filter(item.rowinfo.YUJING_Z, 2) == \"\"\r\n                    ? \"\"\r\n                    : this.$FilterData.Float_Filter(item.rowinfo.YUJING_Z, 2) + \"m\"\r\n                }\r\n                </span>\r\n                <span class=\"tip_col_5\" >预警流量：</span>\r\n                <span class=\"tip_col_7\" >\r\n                ${\r\n                  this.$FilterData.Float_Filter(item.rowinfo.YUJING_Q, 3) == \"\"\r\n                    ? \"\"\r\n                    : this.$FilterData.Float_Filter(item.rowinfo.YUJING_Q, 3) + \"m³/s\"\r\n                }\r\n                </span>\r\n              </div>\r\n              <div class=\"divider\"></div>\r\n        <div id=\"${\r\n          item.STCD\r\n        }\" style=\"width: 500px;height:320px;margin:auto\"></div>\r\n      </div>`;\r\n      console.log(item.rowinfo,this.$FilterData.Float_Filter(item.rowinfo.YUJING_Q, 3));\r\n      // var content = `<div id=\"myChart\" :style=\"{width: '340px', height: '250px', margin: 'auto'}\"></div>`; // 获取内容\r\n      this.map.infoWindow.resize(570, 650); // 提示框大小\r\n      this.map.infoWindow.setTitle(item.STNM); // 提示题目\r\n      this.map.infoWindow.setContent(div); // 提示内容\r\n\r\n\r\n                //获取坐标\r\n                var x=Number(item.LGTD);\r\n                var y=Number(item.LTTD);\r\n\r\n\r\n                //如果basemap使用ArcGIS的就需要\r\n                //转换坐标系\r\n                x = (x / 180.0) * 20037508.34\r\n                if (y > 85.05112) y = 85.05112;\r\n                if (y < -85.05112) y = -85.05112;\r\n                y = (Math.PI / 180.0) * y;\r\n                var tmp = Math.PI / 4.0 + y / 2.0;\r\n                y = 20037508.34 * Math.log(Math.tan(tmp)) / Math.PI;\r\n\r\n                //位置点对象\r\n                var zoompoint = {\r\n                    //spatialReference: {wkid: 4326},\r\n                    spatialReference: this.map.spatialReference,\r\n                    x: x,\r\n                    y: y\r\n                };\r\n\r\n\r\n      this.map.infoWindow.show(zoompoint); // 提示位置\r\n      // 如果事件类型不是鼠标经过，则\r\n      if (item.eventType != \"mouse-over\") {\r\n        // 设置中心和缩放 (接受经纬度，和缩放比例)\r\n        this.setMapCenterandZoom(Number(item.LGTD) + 0.1, item.LTTD);\r\n      }\r\n\r\n      var body = {\r\n        STCD: item.STCD,\r\n        _page_size: 999999\r\n      };\r\n\r\n      // 时间参数\r\n      var DTT = this.$FilterData\r\n              .elDatePicker_Filter(this.$App.zeroPointToNowOfTheDay())\r\n              .split(\",\");\r\n      body.Time_min = DTT[1];\r\n      body.Time_max = DTT[2];\r\n\r\n      this.$GetData.Survey_History_QDSQ(\r\n        \"historyTable\",\r\n        body,\r\n        {\r\n          default: true\r\n        },\r\n        data => {\r\n          this.setWPTN_HTML(`${item.STCD}_shuishi`, item.rowinfo.WPTN);\r\n          this.createChart(item.STCD, data.data);\r\n        }\r\n      );\r\n\r\n\r\n      // 延时200毫秒\r\n      // setTimeout(() => {\r\n\r\n      // }, 200);\r\n\r\n      // 延时200毫秒\r\n      // setTimeout(() => {\r\n\r\n      // }, 200);\r\n    },\r\n    setWPTN_HTML(id, WPTN) {\r\n      var div = document.getElementById(id);\r\n      var html;\r\n      switch (WPTN) {\r\n        case \"4\":\r\n          html = `<span style=\"color:blue\">↓</span>`;\r\n          break;\r\n\r\n        case \"5\":\r\n          html = `<span style=\"color:red\">↑</span>`;\r\n          break;\r\n\r\n        case \"6\":\r\n          html = `<span style=\"color:black\">一</span>`;\r\n          break;\r\n        default:\r\n          html = `<span style=\"color:black\">一</span>`;\r\n          break;\r\n      }\r\n      if (div) {\r\n        div.innerHTML = html;\r\n      }\r\n    },\r\n    // 设置中心和缩放 (接受经纬度，和缩放比例)\r\n    setMapCenterandZoom(LGTD, LTTD, Zoom) {\r\n      //koen 20190929\r\n      //暂时不允许点击，防止缩到全球地图的bug\r\n      //this.map.centerAndZoom([Number(LGTD), Number(LTTD)], Zoom || 1);\r\n    },\r\n    // 隐藏提示\r\n    hideTips() {\r\n      this.map.infoWindow.hide();\r\n      // this.tip.show_tip = false; // 关闭提示框组件\r\n    },\r\n    // 制图\r\n    createChart(id, data) {\r\n      if (data.length > 0) {\r\n        // data = data.slice(0, 3);\r\n        var echartData = this.$App.transform_QDSQ_data_into_ehart_data(\r\n          data,\r\n          \"historyTable\"\r\n        );\r\n        // 渠道水情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\r\n        var x_List = echartData.x.list\r\n        .map((val, index, array) => {\r\n          // 时间过滤\r\n          var time = val.split(\" \");\r\n          return time[1];\r\n        });\r\n        myChart = this.$echarts.init(document.getElementById(id));\r\n\r\n        myChart.setOption({\r\n          title: {\r\n            text: \"今日水情图\"\r\n          },\r\n          tooltip: {\r\n            trigger: \"axis\"\r\n          },\r\n          legend: {\r\n            data: [echartData.y1.name, echartData.y2.name],\r\n            y: \"bottom\"\r\n          },\r\n\r\n          // calculable: true,\r\n          animation: false,\r\n          xAxis: [\r\n            {\r\n              type: \"category\",\r\n              boundaryGap: false,\r\n              data: x_List,\r\n              axisTick: {\r\n                interval: function(index, val) {\r\n                  var listLength = echartData.x.list.length;\r\n                  if (listLength >= 4) {\r\n                    var tick = Math.round(listLength / 4);\r\n                    // console.log((index + 1) % tick === 0);\r\n                    // console.log('1575listLength',listLength);\r\n                    // console.log('1576tick',tick);\r\n                    if ((index + 1) % tick === 0) {\r\n                      return true;\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                },\r\n                length: 10\r\n              },\r\n              axisLabel: {\r\n                interval: function(index, val) {\r\n                  var listLength = echartData.x.list.length;\r\n                  if (listLength >= 4) {\r\n                    var tick = Math.round(listLength / 4);\r\n                    // console.log('1575listLength',listLength);\r\n                    // console.log('1576tick',tick);\r\n                    let a = (index + 1) % tick;\r\n                    if ((index + 1) % tick === 0) {\r\n                      return true;\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                },\r\n                rotate: 10,\r\n                margin: 16\r\n              }\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              name: `${echartData.y1.name} m³/s`,\r\n              type: \"value\",\r\n              axisLabel: {\r\n                formatter: \"{value} \"\r\n              },\r\n              scale: true\r\n              // max: echartData.y1.max,\r\n              // min: echartData.y1.min\r\n            },\r\n            {\r\n              name: `${echartData.y2.name}m`,\r\n              type: \"value\",\r\n              axisLabel: {\r\n                formatter: \"{value} \"\r\n              },\r\n              scale: true\r\n              // max: echartData.y2.max,\r\n              // min: echartData.y2.min\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: echartData.y1.name,\r\n              type: \"line\",\r\n              data: echartData.y1.list\r\n            },\r\n            {\r\n              name: echartData.y2.name,\r\n              type: \"line\",\r\n              data: echartData.y2.list,\r\n              yAxisIndex: 1\r\n            }\r\n          ]\r\n        });\r\n      } else {\r\n        var myChart = document.getElementById(id);\r\n        myChart.style.display = \"flex\";\r\n        myChart.style.alignItems = \"center\";\r\n        myChart.style.justifyContent = \"center\";\r\n        myChart.innerHTML = \"暂无今天数据\";\r\n      }\r\n    },\r\n    // 表格加载\r\n    tableLoading() {\r\n      this.table.loading = true;\r\n    },\r\n    // 表格加载取消\r\n    cancelTableLoading() {\r\n      this.table.loading = false;\r\n    },\r\n    // 加载表格数据\r\n    loadTableData(data) {\r\n      // 加载站点数据\r\n      this.table.Rows = data;\r\n    },\r\n    getDataFromEnd(url, callback) {\r\n      // 获取表格数据 `/guanqu/gis/details?ID=${this.info.ID}`\r\n      this.axios.get(url).then(res => {\r\n        if (typeof callback == \"function\") {\r\n          callback(res);\r\n        }\r\n      });\r\n    },\r\n    // 查询\r\n    search() {\r\n      var body = new Object();\r\n      // 如果输入框有内容，添加站名过滤字段\r\n      if (this.form.search_str) {\r\n        body[\"STNM\"] = `${this.form.search_str}`;\r\n      }\r\n      // 如果地址选择框有内容，添加行政区划过滤字段\r\n      if (this.form.model_adress && this.form.model_adress.length != 0) {\r\n        body[\"ADDVCD\"] = `${this.$App.ADDVCD_Array_Filter(\r\n          this.form.model_adress\r\n        )}`;\r\n      }\r\n      // 如果渠道选择框有内容，添加渠道过滤字段\r\n      if (this.form.model_qudao && this.form.model_qudao.length != 0) {\r\n        body[\r\n          \"Canal_Code\"\r\n        ] = `${this.$App.Canal_Code_Array_Filter(this.form.model_qudao)}`;\r\n      }\r\n\r\n      this.tableLoading(); // 表格加载中\r\n      this.search_FeatrueLayer(\"qudaoshuiqing\", body, this.featrue, newFeatureLayerOBJ => {\r\n        this.table.currentPage = 1;\r\n        this.baseBox_init();\r\n        this.cancelTableLoading(); //取消表格加载\r\n        this.hideTips();\r\n      });\r\n      // setTimeout(() => {\r\n      //   this.cancelTableLoading(); //取消表格加载\r\n      // }, 800);\r\n    },\r\n    // 获取 子组件传过来 的绘图方法\r\n    // chart(item) {\r\n    //   this.getChart = item.chart;\r\n    // },\r\n    // 给图层对象添加事件\r\n    addEventToJsonFlayer(JsonFlayer) {\r\n      //当鼠标悬停在元素上\r\n      JsonFlayer.on(\"mouse-over\", evt => {\r\n        setTimeout(() => {\r\n          var attributes = evt.graphic.attributes;\r\n          attributes.eventType = \"mouse-over\";\r\n          this.showTips(attributes); // 展示悬浮框\r\n        }, 100);\r\n        // 给地图对象添加方法\r\n        // this.addEventToMap();\r\n      });\r\n\r\n      // 当鼠标离开元素\r\n      JsonFlayer.on(\"mouse-out\", evt => {\r\n        setTimeout(() => {\r\n          this.hideTips(); // 隐藏悬浮框\r\n        }, 100);\r\n      });\r\n    },\r\n    // 给地图对象添加方法\r\n    addEventToMap() {\r\n      this.map.on(\"click\", () => {\r\n        // 隐藏提示\r\n        this.hideTips();\r\n      });\r\n    },\r\n    // 处理页码切换\r\n    handleCurrentChange(index) {\r\n      this.table.currentPage = index;\r\n    },\r\n    // 处理每页显示条数切换\r\n    handleSizeChange(pageSizes) {\r\n      this.table.pageSizes = pageSizes;\r\n      this.table.currentPage = 1;\r\n    },\r\n    // 分页过滤\r\n    pageFilter(currentPage, pageSizes) {\r\n      var _currentPage = currentPage || this.table.currentPage;\r\n      var _pageSizes = pageSizes || this.table.pageSizes;\r\n      if (this.table.Rows_filter.length != 0) {\r\n        // 截取数组\r\n        var newList = this.table.Rows_filter.slice(\r\n          (_currentPage - 1) * _pageSizes,\r\n          _currentPage * _pageSizes\r\n        );\r\n\r\n        return newList;\r\n      } else {\r\n        return [];\r\n      }\r\n    },\r\n    // 过滤table数据\r\n    filterTableData() {\r\n      this.table.Rows_filter = this.table.Rows.map((val, index) => {\r\n        var val_clone = JSON.parse(JSON.stringify(val));\r\n        // 序号\r\n        val_clone.index = index + 1;\r\n        // 时间过滤\r\n        val_clone.TM = this.$FilterData.dateFilter(val_clone.TM,5,null,0);\r\n        // 水深过滤\r\n        val_clone.Z = this.Z_Filter(val_clone.Z);\r\n        // 流量过滤\r\n        val_clone.Q = this.Z_Filter(val_clone.Q, 3);\r\n        // 水势过滤\r\n        val_clone.WPTN = this.WPTN_Filter(val_clone.WPTN);\r\n        return val_clone;\r\n      });\r\n    },\r\n    // 选取一部分从父组件传来的数据作为表格的数据\r\n    getTableDataFormParent() {\r\n      var tableData = this.featrue.Rows.map(val => {\r\n        return val.rowinfo;\r\n      });\r\n\r\n      return tableData;\r\n    },\r\n    // 获取图层对象,从父组件中\r\n    getJsonFlayerFormParent() {\r\n      this.JsonFlayer = this.featrue.LayerObject;\r\n    },\r\n    // 获取地图对象,从父组件中\r\n    getMapFormParent() {\r\n      this.map = this.featrue.map;\r\n    },\r\n    // 往featrue对象里添加操作TextGraphicsLayer的对象，里面有移除所有TextGraphicsLayer的方法，和根据多选框添加文字标注图层的方法\r\n    addTextGraphicsLayerControllerToFeatrue() {\r\n      this.featrue.TextGraphicsLayerController = new Object();\r\n      this.featrue.TextGraphicsLayerController.removeAllTextGraphicsLayer = this.removeAllTextGraphicsLayer;\r\n      this.featrue.TextGraphicsLayerController.addTextGraphicsLayerByCheckGroup = this.addTextGraphicsLayerByCheckGroup;\r\n    },\r\n    // 多选框标记勾选触发事件\r\n    checkboxGroup_onChange(onCheck_Array) {\r\n      this.removeAllTextGraphicsLayer(); // 清除所有文本标注图层\r\n      this.addTextGraphicsLayerByCheckGroup(); // 根据多选框添加文字标注图层\r\n    },\r\n    // 添加文字标注图层\r\n    addTextGraphicsLayer(options) {\r\n      var textGraphicsLayer = new esri.layers.GraphicsLayer(); // 新增一个标注文本图层\r\n      textGraphicsLayer.textType = options.textType;\r\n      this.featrue.map.addLayer(textGraphicsLayer); // 给地图添加新增的标注文本图层\r\n      var Rows = this.featrue.Rows;\r\n      //创建textsymbol文本标注\r\n      if (Rows.length > 0) {\r\n        //动态读取json数据源结果集\r\n        for (var i = 0; i < Rows.length; i++) {\r\n          var Row = Rows[i];\r\n          var point = new esri.geometry.Point(\r\n            Row.geometry.x,\r\n            Row.geometry.y,\r\n            this.featrue.map.spatialReference\r\n          );\r\n          //定义文本symbol\r\n          var textsymbol = new esri.symbol.TextSymbol(\r\n            Row.rowinfo[options.textType]\r\n          ) //动态设置文本值\r\n            .setColor(new dojo.Color(options.color || [55, 55, 55])) //setColor设置文本颜色\r\n            .setFont(\r\n              new esri.symbol.Font(options.fontSize || \"10pt\") //setFont设置文本大小\r\n                .setWeight(esri.symbol.Font.WEIGHT_BOLD)\r\n            ) //setWeight设置文本粗体\r\n            .setOffset(options.offset_x || 0, options.offset_y || -25); //设置偏移方向\r\n          var graphic = new esri.Graphic(point, textsymbol);\r\n          textGraphicsLayer.add(graphic);\r\n        }\r\n      }\r\n      this.TextGraphicsLayers.push(textGraphicsLayer);\r\n    },\r\n    // 根据多选框添加文字标注图层\r\n    addTextGraphicsLayerByCheckGroup() {\r\n      var textTypeList;\r\n      var indexOfSocial = this.form.social.indexOf(\"site\");\r\n      // 如果多选框里存在 site站点类型\r\n      if (indexOfSocial !== -1) {\r\n        this.featrue.LayerObject.show();\r\n        textTypeList = this.form.social.filter(val => {\r\n          if (val != \"site\") {\r\n            return true;\r\n          }\r\n        });\r\n      } else {\r\n        this.featrue.LayerObject.hide();\r\n        textTypeList = this.form.social;\r\n      }\r\n\r\n      textTypeList.forEach((textType, index) => {\r\n        var textGraphicsLayer = new esri.layers.GraphicsLayer(); // 新增一个图形图层\r\n        textGraphicsLayer.textType = textType;\r\n        this.featrue.map.addLayer(textGraphicsLayer); // 给地图添加新增的标注文本图层\r\n        var Rows = this.featrue.Rows;\r\n        //创建textsymbol文本标注\r\n        if (Rows.length > 0) {\r\n          //动态读取json数据源结果集\r\n          for (var i = 0; i < Rows.length; i++) {\r\n            var Row = Rows[i];\r\n            var point = new esri.geometry.Point(\r\n              Row.geometry.x,\r\n              Row.geometry.y,\r\n              this.featrue.map.spatialReference\r\n            );\r\n            var value = Row.rowinfo[textType];\r\n            // 过滤\r\n            switch (textType) {\r\n              case \"Q\":\r\n                var value = `${this.Z_Filter(Row.rowinfo[textType], 3)}`;\r\n                if (value == \"\") {\r\n                  value = \"\";\r\n                } else {\r\n                  value += \"m³/s\";\r\n                }\r\n                break;\r\n              case \"Z\":\r\n                var value = `${this.Z_Filter(Row.rowinfo[textType])}`;\r\n                if (value == \"\") {\r\n                  value = \"\";\r\n                } else {\r\n                  value += \"m\";\r\n                }\r\n                break;\r\n            }\r\n\r\n            //定义文本symbol\r\n            var textsymbol = new esri.symbol.TextSymbol(value) //动态设置文本值\r\n              .setColor(new dojo.Color([55, 55, 55])) //setColor设置文本颜色\r\n              .setFont(\r\n                new esri.symbol.Font(\"10pt\") //setFont设置文本大小\r\n                  .setWeight(esri.symbol.Font.WEIGHT_BOLD)\r\n              ) //setWeight设置文本粗体\r\n              .setOffset(0, -(25 + index * 15)); //设置偏移方向\r\n            var graphic = new esri.Graphic(point, textsymbol);\r\n            textGraphicsLayer.add(graphic);\r\n          }\r\n        }\r\n        this.TextGraphicsLayers.push(textGraphicsLayer);\r\n      });\r\n    },\r\n    // 移除文字标注图层\r\n    removeTextGraphicsLayer(textType) {\r\n      // 找到对应的文字标注图层\r\n      for (let i = 0; i < this.TextGraphicsLayers.length; i++) {\r\n        var val = this.TextGraphicsLayers[i];\r\n        if (val.textType == textType) {\r\n          this.featrue.map.removeLayer(val); // 移除对应的文字标注图层\r\n          // val.hide();\r\n          this.TextGraphicsLayers.splice(i, 1); // 从文字标注图层数组里去除对应的文字图层对象\r\n        }\r\n      }\r\n    },\r\n    // 移除所有文字标注图层\r\n    removeAllTextGraphicsLayer() {\r\n      for (let i = 0; i < this.TextGraphicsLayers.length; i++) {\r\n        var val = this.TextGraphicsLayers[i];\r\n        this.featrue.map.removeLayer(val); // 移除对应的文字标注图层\r\n      }\r\n      this.TextGraphicsLayers = [];\r\n    },\r\n    // 初始化baseBox\r\n    baseBox_init() {\r\n      // 获取地图对象,从父组件中\r\n      this.getMapFormParent();\r\n      // 获取图层对象,从父组件中\r\n      this.getJsonFlayerFormParent();\r\n      // 选取一部分从父组件传来的数据,将其加载为表格数据\r\n      this.loadTableData(this.getTableDataFormParent());\r\n      // 过滤table数据\r\n      this.filterTableData();\r\n      // 给图层对象添加方法\r\n      this.addEventToJsonFlayer(this.JsonFlayer);\r\n\r\n      // 获取行政区划数据,然后设置地址选择框选项\r\n      this.getTableData_WRP_AD_B(data => {\r\n        this.form.adressList = data;\r\n        // data.map(val => {\r\n        //   var newVal = new Object();\r\n        //   newVal.value = val.AD_CD;\r\n        //   newVal.label = val.AD_NM;\r\n        //   return newVal;\r\n        // })\r\n      });\r\n\r\n      // 获取输排水渠道数据,然后设置渠道选择框选项\r\n      this.getTableData_WRP_IrrBTCanalSystem(data => {\r\n        this.form.qudaoList = data;\r\n        // data.map(val => {\r\n        //   var newVal = new Object();\r\n        //   newVal.value = val.Canal_Code;\r\n        //   newVal.label = val.Canal_Name;\r\n        //   return newVal;\r\n        // });\r\n      });\r\n\r\n      // 多选框标记勾选触发事件\r\n      // 1.清除所有文本标注图层\r\n      // 2.根据多选框添加文字标注图层\r\n      this.checkboxGroup_onChange();\r\n      // 往featrue对象里添加操作TextGraphicsLayer的对象，里面有移除所有TextGraphicsLayer的方法，和根据多选框添加文字标注图层的方法\r\n      this.addTextGraphicsLayerControllerToFeatrue();\r\n\r\n    },\r\n    // 排序\r\n    sort_change(item) {\r\n      var order = item.order,\r\n        key = item.prop;\r\n\r\n      this.filterTableData();\r\n      var newList;\r\n      if (order) {\r\n        switch (order) {\r\n          case \"descending\":\r\n            if (key != \"TM\") {\r\n              newList = this.table.Rows_filter.sort((a, b) => {\r\n                return Number(b[key]) - Number(a[key]);\r\n              });\r\n            } else {\r\n              newList = this.table.Rows_filter.sort((a, b) => {\r\n                var aTime = new Date(`20${a.TM}`).getTime(),\r\n                  bTime = new Date(`20${b.TM}`).getTime();\r\n                aTime = isNaN(aTime) ? 0 : aTime;\r\n                bTime = isNaN(bTime) ? 0 : bTime;\r\n                return bTime - aTime;\r\n              });\r\n            }\r\n            break;\r\n\r\n          case \"ascending\":\r\n            if (key != \"TM\") {\r\n              newList = this.table.Rows_filter.sort((a, b) => {\r\n                return Number(a[key]) - Number(b[key]);\r\n              });\r\n            } else {\r\n              newList = this.table.Rows_filter.sort((a, b) => {\r\n                var aTime = new Date(`20${a.TM}`).getTime(),\r\n                  bTime = new Date(`20${b.TM}`).getTime();\r\n                aTime = isNaN(aTime) ? 0 : aTime;\r\n                bTime = isNaN(bTime) ? 0 : bTime;\r\n                return aTime - bTime;\r\n              });\r\n            }\r\n        }\r\n        this.table.Rows_filter = newList;\r\n      }\r\n      this.$TableMethods.refreshCurrentChange(this.table, 1);\r\n    }\r\n  },\r\n  created() {\r\n    // 初始化baseBox\r\n    this.baseBox_init();\r\n    this.search();\r\n    this.baseBox_Interval = setInterval(() => {\r\n      this.search();\r\n    },1000 * 60 * 5)\r\n  },\r\n  destroyed() {\r\n    clearInterval(this.baseBox_Interval)\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style lang=\"less\" scope>\r\n/* 引入baseBox公共样式 */\r\n@import \"../../assets/commonLess/baseBox\";\r\n</style>\r\n"]}]}