{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-yuqing.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-yuqing.vue","mtime":1577669404028},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\babel.config.js","mtime":1577669403468},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport _parseInt from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\n\nvar _methods;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\n\nimport GetDataMethods from \"../../assets/commonJS/GetDataMethods\"; // 获取数据方法\n\nimport { timingSafeEqual } from \"crypto\";\nimport { type } from \"os\";\nimport { types } from \"util\";\nimport { stat } from \"fs\";\nimport { filter } from \"minimatch\";\nexport default {\n  props: {\n    info: {}\n  },\n  data: function data() {\n    return {\n      // 统计数据的表名\n      biao_yuqing: '',\n      // 激活标签栏\n      activeName: \"shuiqingshuju\",\n      // 站点\n      siteInfo: {},\n      //   多选框对象\n      checkBox: {},\n      // 降雨统计\n      jiangyu_tongji: {\n        rainSum: '',\n        rainVag: '',\n        rainMax: ''\n      },\n      //   选择框对象\n      select: {\n        // 当前激活的降雨数据快速查询选项\n        activeQuickSearchList: [],\n        // 查询绑定值\n        select: \"rec6\",\n        // 日期选择器绑定值\n        yuqing_datePicker: null,\n        // 降雨数据历史表\n        yuqingList: [{\n          value: \"hourTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"小时表\"\n        }, {\n          value: \"dayTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"日表\"\n        }, {\n          value: \"tenDaysTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"旬表\"\n        }, {\n          value: \"monthTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"月表\"\n        }, {\n          value: \"yearTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"年表\"\n        }],\n        // 降雨数据历史表绑定值\n        yuqing_select: \"hourTable\",\n        // 旬选择器列表\n        xunList: [{\n          label: \"上旬\",\n          value: 0\n        }, {\n          label: \"中旬\",\n          value: 1\n        }, {\n          label: \"下旬\",\n          value: 2\n        }],\n        // 旬选择器绑定值\n        xun_select: null\n      },\n      // 表格\n      table: {\n        // 水情\n        shuiqing: {\n          // 表头设置\n          columns: {\n            // 历史表\n            historyTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"时间\",\n              key: \"DT\",\n              width: 180,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"降雨(mm)\",\n              // width: 130,\n              key: \"P\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 小时表\n            hourTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"时间\",\n              key: \"DT\",\n              width: 180,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"降雨(mm)\",\n              // width: 130,\n              key: \"P\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 日表\n            dayTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"日期\",\n              key: \"TM\",\n              width: 150,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"降雨(mm)\",\n              // width: 130,\n              key: \"p\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 旬表\n            tenDaysTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"时间\",\n              key: \"DT\",\n              width: 130,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"降雨(mm)\",\n              // width: 130,\n              key: \"P\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 月表\n            monthTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"时间\",\n              key: \"DT\",\n              width: 130,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"降雨(mm)\",\n              // width: 130,\n              key: \"P\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 年表\n            yearTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"时间\",\n              key: \"YR\",\n              width: 130,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"降雨(mm)\",\n              // width: 130,\n              key: \"P\",\n              align: \"center\",\n              sortable: \"custom\"\n            }]\n          },\n          // 正在激活的表头\n          activeColumns: [],\n          // 表体内容\n          Rows: [],\n          // 过滤后的表体内容\n          Rows_filter: [],\n          // 日期时间选择器的选项配置\n          datePickerOptions: {\n            historyTable: {\n              shortcuts: [{\n                text: \"最近6小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 6);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近12小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 12);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近24小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近36小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 36);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近72小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 72);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }]\n            },\n            hourTable: {\n              shortcuts: [{\n                text: \"最近6小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 6);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近12小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 12);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近24小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近36小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 36);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近72小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 72);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }]\n            },\n            dayTable: {\n              shortcuts: [{\n                text: \"最近10天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 10);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近15天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 15);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近30天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近60天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 60);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近90天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }]\n            },\n            monthTable: {\n              shortcuts: []\n            }\n          },\n          // 日期时间选择器类型\n          datePickerType: \"date\",\n          // 日期时间选择器值\n          date: null,\n          // 开始年\n          start_year: null,\n          //结束年\n          end_year: null,\n          tenDays_value: null,\n          tenDays_lable: null,\n          btn_tenday: null,\n          // 排序\n          sort: null,\n          // 表格是否加载中\n          loading: false,\n          // 总条数\n          total: 0,\n          // 当前页\n          currentPage: 1,\n          // 每页显示数量\n          pageSizes: 20,\n          // 表格高度\n          height: 430\n        },\n        // 特征雨量\n        tezhengyuliang: {\n          // 表头设置\n          columns: [{\n            title: \" \",\n            type: \"index\",\n            width: 50,\n            align: \"center\",\n            // 自定义序号\n            indexMethod: function indexMethod(item) {\n              var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n              return index;\n            },\n            ellipsis: true\n          }, {\n            title: \"年份\",\n            // width: 130,\n            key: \"Years\",\n            width: 150,\n            align: \"center\",\n            sortable: true\n          }, {\n            title: \"最大时段降雨(mm)\",\n            key: \"Max_DP\",\n            align: \"center\",\n            sortable: true\n          }],\n          // 表体内容\n          Rows: [],\n          // 过滤后的表体内容\n          Rows_filter: [],\n          // 总条数\n          total: 0,\n          // 表格是否加载中\n          loading: false,\n          // 当前页\n          currentPage: 1,\n          // 日期时间选择器值\n          date: null,\n          // 日期时间选择器的选项配置\n          datePickerOptions: {\n            shortcuts: [{\n              text: \"最近5年\",\n              onClick: function onClick(picker) {\n                var end = new Date();\n                var start = new Date();\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\n                picker.$emit(\"pick\", [start, end]);\n              }\n            }, {\n              text: \"最近3年\",\n              onClick: function onClick(picker) {\n                var end = new Date();\n                var start = new Date();\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 3);\n                picker.$emit(\"pick\", [start, end]);\n              }\n            }, {\n              text: \"最近2年\",\n              onClick: function onClick(picker) {\n                var end = new Date();\n                var start = new Date();\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 2);\n                picker.$emit(\"pick\", [start, end]);\n              }\n            }, {\n              text: \"最近1年\",\n              onClick: function onClick(picker) {\n                var end = new Date();\n                var start = new Date();\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 1);\n                picker.$emit(\"pick\", [start, end]);\n              }\n            }]\n          },\n          // 表格高度\n          height: 410,\n          // 每页显示数量\n          pageSizes: 20,\n          alarmData: {\n            EWL: \"\",\n            // 预警等级\n            OD_P: \"\",\n            // 24小时降雨\n            TWH_P: \"\",\n            // 12小时降雨\n            SH_P: \"\" // 6小时降雨\n\n          }\n        }\n      },\n      // 图形\n      chart: {\n        shuiqing: null\n      },\n      //   日期数据\n      date: {\n        shuiqing: \"\"\n      },\n      // 输入框对象\n      input: {\n        // 关系曲线换算的\n        huansuan: {\n          waterLever: \"\",\n          flowLever: \"\"\n        }\n      },\n      //   导出按钮加载控制\n      outPutLoading: false,\n      //   导出确认对话框控制\n      outPutModal: false,\n      // 整块区域的加载控制\n      boxLoading: false,\n      tableType: ''\n    };\n  },\n  mixins: [FilterMethods, GetDataMethods],\n  methods: (_methods = {\n    //   导出站点信息\n    outPutSiteInfo: function outPutSiteInfo() {\n      var _this = this;\n\n      //   关闭导出确认对话框\n      this.outPutModal = false; //   按钮加载\n\n      this.outPutLoading = true;\n      setTimeout(function () {\n        _this.outPutLoading = false;\n\n        _this.$Modal.success({\n          title: \"关于导出\",\n          content: \"站点信息表导出成功\"\n        });\n      }, 500);\n    },\n    //   确认导出\n    outPutSure: function outPutSure() {\n      this.outPutSiteInfo();\n    },\n    // 日期时间选择器变化触发事件\n    // handleDatePickerChange(val, valType) {\n    //   var timeInterval = `${val[0].replace(/\\//g, \"-\")},${val[1].replace(\n    //     /\\//g,\n    //     \"-\"\n    //   )}`;\n    //   this.select.yuqing_datePicker = timeInterval;\n    // },\n    datePicke_on_ok: function datePicke_on_ok(tableType) {\n      var _this2 = this;\n\n      this.table[\"shuiqing\"].currentPage = 1; // 重置当前页\n\n      this.table.shuiqing.loading = true; // 表格加载中\n\n      var body = {\n        STCD: this.siteInfo.STCD,\n        TM: \"bt,\".concat(this.select.yuqing_datePicker)\n      };\n      var pageSizes = this.table.shuiqing.pageSizes;\n      var currentPage = 1;\n      this.getTableData_shuiqing(tableType, pageSizes, currentPage, body, function (data) {\n        console.log(data);\n\n        _this2.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\n\n\n        _this2.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\n\n\n        _this2.table.shuiqing.loading = false; // 取消表格加载\n      });\n    },\n    // 查询\n    search_yuqing: function search_yuqing(tableType) {\n      var _this3 = this;\n\n      var tableType = tableType || this.select.yuqing_select;\n      this.letTableLoading(\"shuiqing\"); // 表格加载中\n      // 传递参数\n\n      var body = {\n        STCD: this.siteInfo.STCD,\n        _page: this.table.shuiqing.currentPage || 1,\n        _page_size: this.table.shuiqing.pageSizes || 20\n      }; // 如果有选择排序，则传递排序参数\n\n      if (this.table.shuiqing.sort) {\n        var _sort = this.$FilterData.sort_Filter(this.table.shuiqing.sort);\n\n        if (_sort) {\n          body._orderby = _sort;\n        }\n      } else {\n        switch (tableType) {\n          case \"hourTable\":\n            body._orderby = \"DT \";\n            break;\n\n          case \"dayTable\":\n            body._orderby = \"dt \";\n            break;\n\n          case \"tenDaysTable\":\n            body._orderby = \"dt1 \";\n            break;\n\n          case \"monthTable\":\n            body._orderby = \"dt \";\n            break;\n\n          case \"yearTable\":\n            body._orderby = \"YR \";\n            break;\n        }\n      } // 如果有选择日期进行查询，根据表格类型传递参数\n\n\n      if (this.table.shuiqing.date && tableType !== \"yearTable\") {\n        switch (tableType) {\n          case \"dayTable\":\n            // body.DTT = this.$FilterData.elDatePicker_Filter(\n            //   this.table.shuiqing.date\n            // );\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date).split(\",\");\n            console.log(DTT[1].substr(0, 10), DTT[2].substr(0, 10));\n            body.Time_min = DTT[1].substr(0, 10);\n            body.Time_max = DTT[2].substr(0, 10);\n            break;\n\n          case \"hourTable\":\n            // body.DTT = this.$FilterData.elDatePicker_Filter(\n            //   this.table.shuiqing.date\n            // );\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date).split(\",\");\n            body.Time_min = DTT[1];\n            body.Time_max = DTT[2];\n            break;\n\n          case \"tenDaysTable\":\n            // body.DTT = this.$FilterData.elDatePicker_Filter(\n            //   this.table.shuiqing.date\n            // );\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date).split(\",\");\n            body.Time_min = \"\".concat(DTT[1].substr(0, 7), \"-01\");\n            body.Time_max = \"\".concat(DTT[2].substr(0, 7), \"-01\");\n            break;\n\n          case \"monthTable\":\n            // body.DT = this.$FilterData.elDatePicker_Filter(\n            //   this.table.shuiqing.date,\n            //   \"monthTable\"\n            // );\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date, \"monthTable\").split(\",\");\n            body.Time_min = \"\".concat(DTT[1].substr(0, 7), \"-01\");\n            body.Time_max = \"\".concat(DTT[2].substr(0, 7), \"-01\"); // body.YE = this.$FilterData.elDatePicker_Filter(\n            //   this.table.shuiqing.date,\n            //   \"monthTable\"\n            // ).YE;\n            // body.MON = this.$FilterData.elDatePicker_Filter(\n            //   this.table.shuiqing.date,\n            //   \"monthTable\"\n            // ).MON;\n\n            break;\n        }\n      }\n\n      if (tableType === \"yearTable\") {\n        var start_year = this.table.shuiqing.start_year;\n        var end_year = this.table.shuiqing.end_year;\n\n        if (start_year) {\n          var start = new Date(start_year),\n              end = end_year ? new Date(end_year) : new Date();\n          body.Time_min = start.getFullYear();\n          body.Time_max = end.getFullYear();\n        } // console.log(body.yr_min,body.yr_max)\n\n      } // if (tableType === \"tenDaysrange\") {\n      //     var start = new Date(this.table.shuiqing.start_year),\n      //         end = new Date(this.table.shuiqing.end_year);\n      //     body.yr_min = start.getFullYear()\n      //     body.yr_max = end.getFullYear()\n      //     console.log(body.yr_min,body.yr_max)\n      //\n      // }\n      // 获取雨情历史数据\n\n\n      this.$GetData.Survey_History_YQ(tableType, body, {\n        default: true,\n        myFilter: function myFilter(data) {\n          data.map(function (val) {\n            val.currentPage = body._page;\n            val.pageSizes = body._page_size;\n            return val;\n          });\n          console.log(data);\n          return data;\n        }\n      }, function (data) {\n        _this3.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\n\n\n        _this3.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\n\n\n        body._page_size = 999999999;\n        body._page = 1;\n\n        _this3.$GetData.Survey_History_YQ(tableType, body, {\n          default: true,\n          myFilter: function myFilter(data) {\n            data.map(function (val) {\n              val.currentPage = body._page;\n              val.pageSizes = body._page_size;\n              return val;\n            });\n            return data;\n          }\n        }, function (chartData) {\n          console.log(\"chartData\", chartData);\n\n          _this3.createChart_shuiqingshuju(\"shuiqingChart\", tableType, chartData.data); // 水情表格\n\n        });\n\n        var obj = {};\n        obj.Time_max = body.Time_max;\n        obj.Time_min = body.Time_min;\n        obj.STCD = body.STCD;\n\n        _this3.$GetData.statistics_rain_YQ(tableType, obj, false, function (data) {\n          console.log(\"data\", data.data);\n          var d = data.data; // console.log(this);\n\n          _this3.jiangyu_tongji.rainSum = d.LeiJiYuLiang;\n          _this3.jiangyu_tongji.rainVag = d.PingJunJiangYu;\n          _this3.jiangyu_tongji.rainMax = d.ZuiDaJiangYu;\n        });\n\n        _this3.cancelTableLoading(\"shuiqing\"); // 取消表格加载\n\n      });\n    },\n    // 查询关系曲线表格\n    search_guanxiquxian: function search_guanxiquxian() {\n      var _this4 = this;\n\n      this.letTableLoading(\"guanxiquxian\"); // 传递参数\n\n      var body = {\n        STCD: this.siteInfo.STCD,\n        _page: this.table[\"guanxiquxian\"].currentPage || 1,\n        _page_size: this.table[\"guanxiquxian\"].pageSizes || 20\n      }; // 如果有选择日期进行查询，根据表格类型传递参数\n\n      if (this.table.guanxiquxian.date) {\n        body.YR = this.$FilterData.elDatePicker_Filter(this.table.guanxiquxian.date, \"onlyYear\");\n      }\n\n      this.$GetData.Base_MonitoringSites(\"Z_Q_relation\", body, {\n        default: true,\n        myFilter: function myFilter(data) {\n          data.map(function (val) {\n            val.currentPage = body._page;\n            val.pageSizes = body._page_size;\n            return val;\n          });\n          return data;\n        }\n      }, function (data) {\n        _this4.setTableTotal(\"guanxiquxian\", data.total);\n\n        _this4.setTableData(\"guanxiquxian\", data.data);\n\n        _this4.cancelTableLoading(\"guanxiquxian\");\n      });\n    },\n    // 设置表格总条数\n    setTableTotal: function setTableTotal(tableName, total) {\n      this.table[tableName].total = total;\n    },\n    // 表格加载中\n    letTableLoading: function letTableLoading(tableName) {\n      this.table[tableName].loading = true;\n    },\n    // 取消表格加载\n    cancelTableLoading: function cancelTableLoading(tableName) {\n      this.table[tableName].loading = false;\n    },\n    // 绘图\n    createChart_guanxiquxian: function createChart_guanxiquxian(idName) {\n      var myChart = this.$echarts.init(document.getElementById(idName));\n      myChart.setOption({\n        title: {// text: this.info.STNM\n          // subtext: \"纯属虚构\"\n        },\n        grid: {\n          x: '50%'\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        legend: {\n          data: [\"流量\", \"水位\"]\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            mark: {\n              show: true\n            },\n            dataView: {\n              show: true,\n              readOnly: false\n            },\n            magicType: {\n              show: true,\n              type: [\"line\", \"bar\"]\n            },\n            restore: {\n              show: true\n            },\n            saveAsImage: {\n              show: true\n            }\n          }\n        },\n        calculable: true,\n        xAxis: [{\n          type: \"category\",\n          boundaryGap: false,\n          data: [\"00:00-02:00\", \"02:00-04:00\", \"04:00-06:00\", \"06:00-08:00\", \"08:00-10:00\"]\n        }],\n        yAxis: [{\n          name: \"流量 m³/s\",\n          type: \"value\",\n          axisLabel: {\n            formatter: \"{value}\"\n          }\n        }, {\n          name: \"水位 m\",\n          type: \"value\",\n          axisLabel: {\n            formatter: \"{value} \"\n          }\n        }],\n        series: [{\n          name: \"流量\",\n          type: \"line\",\n          data: [11, 11, 15, 13, 12, 13, 10],\n          markLine: {\n            data: [{\n              type: \"average\",\n              name: \"平均值\"\n            }]\n          }\n        }, {\n          name: \"水位\",\n          type: \"line\",\n          data: [1, 4, 2, 5, 3, 2, 0],\n          yAxisIndex: 1,\n          markLine: {\n            data: [{\n              type: \"average\",\n              name: \"平均值\"\n            }],\n            effect: {\n              show: false,\n              loop: true,\n              period: 15,\n              scaleSize: 10,\n              color: null,\n              shadowColor: null,\n              shadowBlur: null\n            }\n          }\n        }]\n      });\n    },\n    // 制图\n    createChart_shuiqingshuju: function createChart_shuiqingshuju(id, tableType, data) {\n      var ele = document.getElementById(id);\n\n      if (data.length > 0) {\n        // 雨情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\n        var echartData = this.$App.transform_YQ_data_into_ehart_data(data, tableType); // x轴\n        // echartData.x.list = data.map((val, index, array) => {\n        //   // var time = `${index}:00 ~ ${index + 1}:00`;\n        //   var time = val.DT;\n        //   return time;\n        // });\n\n        echartData.x.list = echartData.x.list;\n\n        if (!this.chart.shuiqing) {\n          this.chart.shuiqing = this.$echarts.init(ele);\n        }\n\n        this.chart.shuiqing.setOption({\n          title: {\n            text: echartData.chartName\n          },\n          grid: {\n            x: '20%'\n          },\n          tooltip: {\n            trigger: \"axis\"\n          },\n          legend: {\n            data: [echartData.y1.name],\n            y: \"bottom\"\n          },\n          toolbox: {\n            show: true,\n            feature: {\n              mark: {\n                show: true\n              },\n              magicType: {\n                show: true,\n                type: [\"line\", \"bar\"]\n              },\n              restore: {\n                show: true\n              },\n              saveAsImage: {\n                show: true\n              }\n            }\n          },\n          calculable: true,\n          animation: true,\n          xAxis: [{\n            type: \"category\",\n            // boundaryGap: false,\n            data: echartData.x.list,\n            axisTick: {\n              interval: _parseInt(echartData.x.list.length / 4) //     function (index, val) {\n              //     var listLength = echartData.x.list.length\n              //     if (listLength >= 4) {\n              //\n              //         var tick = Math.round(listLength / 4);\n              //         // console.log((index + 1) % tick === 0);\n              //         // console.log('1575listLength',listLength);\n              //         // console.log('1576tick',tick);\n              //         if ((index + 1) % tick === 0) {\n              //             return true;\n              //         } else {\n              //             return false;\n              //         }\n              //     } else {\n              //         return true\n              //     }\n              // },\n              ,\n              length: 10\n            },\n            axisLabel: {\n              interval: _parseInt(echartData.x.list.length / 4) //     function (index, val) {\n              //     var listLength = echartData.x.list.length\n              //     if (listLength >= 4) {\n              //         console.log(index);\n              //         var tick = Math.round(listLength / 4);\n              //         // console.log('1575listLength',listLength);\n              //         // console.log('1576tick',tick);\n              //         let a = (index + 1) % tick\n              //         console.log(a);\n              //         console.log((index + 1) % tick === 0);\n              //         if ((index + 1) % tick === 0) {\n              //             return true;\n              //         } else {\n              //             return false;\n              //         }\n              //     } else {\n              //         return true\n              //     }\n              // },\n              ,\n              rotate: 10,\n              margin: 16\n            }\n          }],\n          yAxis: [{\n            name: \"\".concat(echartData.y1.name, \" mm\"),\n            type: \"value\",\n            axisLabel: {\n              formatter: \"{value} \"\n            } // scale: true\n            // max: echartData.y1.max,\n            // min: echartData.y1.min\n\n          }],\n          series: [{\n            name: echartData.y1.name,\n            type: \"bar\",\n            data: echartData.y1.list,\n            itemStyle: {\n              //通常情况下：\n              normal: {\n                //每个柱子的颜色即为colorList数组里的每一项，如果柱子数目多于colorList的长度，则柱子颜色循环使用该数组\n                color: function color(params) {\n                  switch (echartData.chartName) {\n                    case \"小时表\":\n                      if (params.data >= 25 && params.data < 50) return 'orange';\n                      if (params.data > 50) return 'red';\n                      return 'blue';\n                      break;\n\n                    case \"日表\":\n                      if (params.data >= 25 && params.data < 50) return 'orange';\n                      if (params.data > 50) return 'red';\n                      return 'blue';\n                      break;\n\n                    case \"月表\":\n                      if (params.data >= 100 && params.data < 250) return 'orange';\n                      if (params.data > 250) return 'red';\n                      return 'blue';\n                      break;\n\n                    case \"旬表\":\n                      if (params.data >= 100 && params.data < 250) return 'orange';\n                      if (params.data > 250) return 'red';\n                      return 'blue';\n                      break;\n\n                    case \"年表\":\n                      if (params.data >= 1400 && params.data < 1650) return 'orange';\n                      if (params.data > 1650) return 'red';\n                      return 'blue';\n                      break;\n                  } //     var colorList = [\n                  //         (() => {\n                  //             if ( === '小时表') {\n                  //                 if (params.data >= 25 && params.data < 50) return 'orange';\n                  //                 if (params.data > 50) return 'red';\n                  //                 return 'blue'\n                  //             }\n                  //         })(),\n                  //         (() => {\n                  //             if (echartData.chartName === '月表') {\n                  //                 if (params.data >= 100 && params.data < 250) return 'orange';\n                  //                 if (params.data > 250) return 'red';\n                  //                 return 'blue'\n                  //             }\n                  //         })(),\n                  //         (() => {\n                  //             if (echartData.chartName === '年表') {\n                  //                 if (params.data >= 1400 && params.data < 1650) return 'orange';\n                  //                 if (params.data > 1650) return 'red';\n                  //                 return 'blue'\n                  //             }\n                  //         })()\n                  // ]\n                  //     return colorList[params.dataIndex];\n\n                }\n              }\n            }\n          }]\n        });\n        console.log(\"this.chart.shuiqing.setOption\", tableType);\n      }\n    },\n    // 加载站点数据\n    loadSiteData: function loadSiteData(data) {\n      this.siteInfo = data;\n    },\n    // 组件加载中\n    componentLoading: function componentLoading() {\n      this.boxLoading = true;\n    },\n    // 取消组件加载\n    cancelComponentLoading: function cancelComponentLoading() {\n      this.boxLoading = false;\n    },\n    // 处理页码切换_降雨数据\n    handleCurrentChange_shuiqing: function handleCurrentChange_shuiqing(index) {\n      this.table[\"shuiqing\"].currentPage = index;\n      this.search_yuqing(this.tableType);\n    },\n    // 处理页码切换_关系曲线\n    handleCurrentChange_guanxiquxian: function handleCurrentChange_guanxiquxian(index) {\n      this.table[\"guanxiquxian\"].currentPage = index;\n      this.search_guanxiquxian();\n    },\n    // 处理页码切换_特征雨量\n    handleCurrentChange_tezhengyuliang: function handleCurrentChange_tezhengyuliang(index) {\n      this.table[\"tezhengyuliang\"].currentPage = index;\n      this.search_tezhengyuliang();\n    },\n    // 处理每页显示条数切换_降雨数据\n    handleSizeChange_shuiqing: function handleSizeChange_shuiqing(pageSizes) {\n      this.table[\"shuiqing\"].pageSizes = pageSizes;\n      this.table[\"shuiqing\"].currentPage = 1;\n      this.search_yuqing(this.tableType);\n    },\n    // 处理每页显示条数切换_关系曲线\n    handleSizeChange_guanxiquxian: function handleSizeChange_guanxiquxian(pageSizes) {\n      this.table[\"guanxiquxian\"].pageSizes = pageSizes;\n      this.table[\"guanxiquxian\"].currentPage = 1;\n      this.search_guanxiquxian();\n    },\n    // 处理每页显示条数切换_特征雨量\n    handleSizeChange_tezhengyuliang: function handleSizeChange_tezhengyuliang(pageSizes) {\n      this.table[\"tezhengyuliang\"].pageSizes = pageSizes;\n      this.table[\"tezhengyuliang\"].currentPage = 1;\n      this.search_tezhengyuliang();\n    },\n    // 分页过滤\n    pageFilter: function pageFilter(currentPage, pageSizes, tableName) {\n      // 截取数组\n      var newList = this.table[tableName].Rows_filter.slice((currentPage - 1) * pageSizes, currentPage * pageSizes);\n      return newList;\n    },\n    // 水情历史数据表 当前正在激活的表头\n    setActiveColumns_shuiqing: function setActiveColumns_shuiqing(tableType) {\n      console.log('********', tableType);\n      this.table.shuiqing.activeColumns = this.table.shuiqing.columns[tableType];\n      this.select.yuqing_select = tableType;\n    },\n    // 切换 水情历史数据表类型\n    tableTypeOnChange_shuiqing: function tableTypeOnChange_shuiqing(tableType) {\n      console.log(tableType);\n      var tabName = '';\n\n      switch (tableType) {\n        case 'hourTable':\n          tabName = '小时';\n          break;\n\n        case 'dayTable':\n          tabName = '日';\n          break;\n\n        case 'tenDaysTable':\n          tabName = '旬';\n          break;\n\n        case 'monthTable':\n          tabName = '月';\n          break;\n\n        case 'yearTable':\n          tabName = '年';\n      }\n\n      this.biao_yuqing = tabName;\n      this.table[\"shuiqing\"].currentPage = 1;\n      this.table[\"shuiqing\"].date = null;\n      this.table[\"shuiqing\"].sort = null;\n      this.tableType = tableType;\n      this.setDatePickerType_shuiqing(tableType); // 设置日期时间选择器的类型\n      // this.select[\"yuqing_select\"] = tableType; // 设置选中的表\n      // this.setSelectOption_quickSearch(tableType); // 设置数据表快速查询选择框内容\n\n      this.setActiveColumns_shuiqing(tableType); // 设置水情历史数据表 当前激活的表头\n\n      this.table.shuiqing.loading = true; // 表格加载中\n\n      if (this[\"setTableDefaultDate_yuqing_\".concat(tableType)]) {\n        this[\"setTableDefaultDate_yuqing_\".concat(tableType)]();\n      } // 获取对应水情历史数据表的数据\n\n\n      this.search_yuqing(tableType);\n    },\n    // 设置降雨数据历史表默认查询日期\n    setTableDefaultDate_yuqing_historyTable: function setTableDefaultDate_yuqing_historyTable() {\n      var end = new Date();\n      var start = eightPointOfTheDay();\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function eightPointOfTheDay() {\n        var date = new Date();\n        date.setHours(8);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置降雨数据小时表默认查询日期\n    setTableDefaultDate_yuqing_hourTable: function setTableDefaultDate_yuqing_hourTable() {\n      var end = new Date();\n      var start = eightPointOfTheDay(); // console.log(end.getHours());\n\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function eightPointOfTheDay() {\n        var date = new Date();\n        date.setHours(8);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置降雨数据日表默认查询日期\n    setTableDefaultDate_yuqing_dayTable: function setTableDefaultDate_yuqing_dayTable() {\n      var end = new Date();\n      var start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function zeroPointOfTheDay() {\n        var date = new Date();\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置降雨数据旬表默认查询日期\n    setTableDefaultDate_yuqing_tenDaysTable: function setTableDefaultDate_yuqing_tenDaysTable() {\n      var end = new Date();\n      var start = new Date();\n      console.log(start.getTime());\n\n      if (start.getHours() < 8) {\n        start.setTime(start.getTime() - 3600 * 1000 * 24 * 30 * 6);\n      }\n\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function zeroPointOfTheDay() {\n        var date = new Date();\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置降雨数据月表默认查询日期\n    setTableDefaultDate_yuqing_monthTable: function setTableDefaultDate_yuqing_monthTable() {\n      var end = new Date();\n      var start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 160);\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function zeroPointOfTheDay() {\n        var date = new Date();\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    }\n  }, _defineProperty(_methods, \"setTableDefaultDate_yuqing_tenDaysTable\", function setTableDefaultDate_yuqing_tenDaysTable() {\n    var end = new Date();\n    var start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 180);\n    var timeSlot = [start, end];\n    this.setTableDate(\"shuiqing\", timeSlot);\n\n    function zeroPointOfTheDay() {\n      var date = new Date();\n      date.setHours(0);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      return date;\n    }\n  }), _defineProperty(_methods, \"setTableDefaultDate_yuqing_yearTable\", function setTableDefaultDate_yuqing_yearTable() {\n    var end = new Date();\n    var start = new Date();\n    console.log(start.getHours(), start.getTime());\n\n    if (start.getHours() < 8) {\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 30 * 12 * 5);\n    }\n\n    var timeSlot = [start, end];\n    this.setTableDate(\"shuiqing\", timeSlot);\n\n    function zeroPointOfTheDay() {\n      var date = new Date();\n      date.setHours(0);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      return date;\n    }\n  }), _defineProperty(_methods, \"setDatePickerType_shuiqing\", function setDatePickerType_shuiqing(tableType) {\n    var datePickerType;\n\n    switch (tableType) {\n      case \"historyTable\":\n        datePickerType = \"datetimerange\";\n        break;\n\n      case \"hourTable\":\n        datePickerType = \"datetimerange\";\n        break;\n\n      case \"dayTable\":\n        datePickerType = \"daterange\";\n        break;\n\n      case \"tenDaysTable\":\n        datePickerType = \"monthrange\";\n        break;\n\n      case \"monthTable\":\n        datePickerType = \"monthrange\";\n        break;\n\n      case \"yearTable\":\n        datePickerType = \"yearrange\";\n        this.table.shuiqing.start_year = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24 * 365 * 5);\n        this.table.shuiqing.end_year = new Date();\n        break;\n    }\n\n    this.table[\"shuiqing\"].datePickerType = datePickerType;\n  }), _defineProperty(_methods, \"setSelectOption_quickSearch\", function setSelectOption_quickSearch(tableType) {\n    this.select.activeQuickSearchList = this.select.quickSearch[tableType];\n    this.select.select = this.select.activeQuickSearchList[0] ? this.select.activeQuickSearchList[0].value : null; // 设置默认值为第一项\n  }), _defineProperty(_methods, \"getTableData_tezhengyuliang\", function getTableData_tezhengyuliang(pageSizes, currentPage, body, callback, callback_beforeFilter) {\n    var _this5 = this;\n\n    this.axios.get(\"/guanqu/admin/ST_G_CQORD?_page_size=\".concat(pageSizes || 20, \"&_page=\").concat(currentPage || 1), {\n      params: body\n    }).then(function (res) {\n      if (typeof callback_beforeFilter == \"function\") {\n        callback_beforeFilter({\n          data: res.data.rows || [],\n          total: res.data.total || 0\n        });\n      }\n\n      console.log(\"tezhengyuliang\", res); // 降雨数据过滤\n\n      var data = res.data.rows.map(function (val) {\n        val.currentPage = _this5.table.shuiqing.currentPage; // 添加数据当前页码\n\n        val.pageSizes = _this5.table.shuiqing.pageSizes; // 添加当前每页条数到数据\n\n        val.TMMXQ = _this5.dateFilter(val.TMMXQ); // 日期过滤\n\n        val.TMXQ = _this5.Z_Filter(val.TMXQ, 3); // 平均流量过滤\n\n        val.YMXQZ = _this5.Z_Filter(val.YMXQZ); // 平均水位过滤\n\n        val.WQ = _this5.Z_Filter(val.WQ, 3); // 小时累计水量过滤\n\n        return val;\n      });\n\n      if (typeof callback == \"function\") {\n        callback({\n          data: data,\n          total: res.data.total\n        });\n      }\n    });\n  }), _defineProperty(_methods, \"getTableData_tezhengyuqing_Alarm\", function getTableData_tezhengyuqing_Alarm(body, callback, callback_beforeFilter) {\n    var _this6 = this;\n\n    this.axios.get(\"/guanqu/admin/ST_Canal_Alarm\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.rows;\n\n      if (typeof callback_beforeFilter == \"function\") {\n        callback_beforeFilter(res);\n      } // 降雨数据过滤\n\n\n      var data = res.data.list.map(function (val) {\n        val.Q = _this6.Z_Filter(val.Q, 3); // 流量过滤\n\n        val.Z = _this6.Z_Filter(val.Z); // 水位过滤\n\n        val.JYQ = _this6.Z_Filter(val.JYQ, 3); // 预警流量过滤\n\n        val.JYZ = _this6.Z_Filter(val.JYZ); // 预警水位过滤\n\n        return val;\n      });\n\n      if (typeof callback == \"function\") {\n        callback(data);\n      }\n    });\n  }), _defineProperty(_methods, \"setTableData\", function setTableData(tableName, data) {\n    this.table[tableName].Rows_filter = data;\n  }), _defineProperty(_methods, \"getTableData_guanxiquxian\", function getTableData_guanxiquxian(callback) {\n    this.axios.get(\"/guanqu/admin/ST_ZQRL_B\", {\n      params: {\n        STCD: this.info.STCD\n      }\n    }).then(function (res) {\n      var data = res.data.rows;\n\n      if (typeof callback == \"function\") {\n        callback(data);\n      }\n    });\n  }), _defineProperty(_methods, \"setTableData_guanxiquxian\", function setTableData_guanxiquxian(data) {\n    this.table.guanxiquxian.Rows_filter = data;\n  }), _defineProperty(_methods, \"getRelateSiteByRelateCode\", function getRelateSiteByRelateCode(callback) {\n    var RELATECODE = this.info.RELATECODE;\n\n    if (RELATECODE && RELATECODE != 0) {\n      this.axios.get(\"/guanqu/admin/ST_STBPRP_B\", {\n        params: {\n          RELATECODE: RELATECODE\n        }\n      }).then(function (res) {\n        var data = res.data.rows;\n\n        if (typeof callback == \"function\") {\n          callback(data);\n        }\n      });\n    }\n  }), _defineProperty(_methods, \"getCompartmentByADDVCD\", function getCompartmentByADDVCD(callback) {\n    var ADDVCD = this.info.rowinfo.ADDVCD;\n\n    if (ADDVCD && ADDVCD != \"\") {\n      this.axios.get(\"/guanqu/admin/WRP_AD_B\", {\n        params: {\n          AD_CD: ADDVCD\n        }\n      }).then(function (res) {\n        var data = res.data.rows;\n\n        if (typeof callback == \"function\") {\n          callback(data);\n        }\n      });\n    }\n  }), _defineProperty(_methods, \"search_tezhengyuliang\", function search_tezhengyuliang() {\n    var _this7 = this;\n\n    this.letTableLoading(\"tezhengyuliang\"); // 表格加载中\n    // 传递站码参数\n\n    var body = {\n      STCD: this.siteInfo.STCD,\n      _page: this.table.tezhengyuliang.currentPage,\n      _page_size: this.table.tezhengyuliang.pageSizes\n    };\n\n    if (this.table.tezhengyuliang.date) {\n      body.YR = this.$FilterData.elDatePicker_Filter(this.table.tezhengyuliang.date, \"maxQTable\");\n    }\n\n    this.$GetData.Survey_History_QDSQ(\"maxQTable\", body, {\n      default: true,\n      myFilter: function myFilter(data) {\n        data.map(function (val) {\n          val.currentPage = body._page;\n          val.pageSizes = body._page_size;\n          return val;\n        });\n        return data;\n      }\n    }, function (data) {\n      _this7.setTableTotal(\"tezhengyuliang\", data.total); // 根据返回的total数量, 设置表格总条数\n\n\n      _this7.setTableData(\"tezhengyuliang\", data.data); // 更新特征降雨数据表的数据\n\n\n      _this7.cancelTableLoading(\"tezhengyuliang\"); // 取消表格加载\n\n    }); // // 获取特征雨量表格数据\n    // this.getTableData_tezhengyuliang(pageSizes, currentPage, body, data => {\n    // });\n  }), _defineProperty(_methods, \"setAlarmData_tezhengyuliang\", function setAlarmData_tezhengyuliang(data) {\n    this.table.tezhengyuliang.alarmData = data;\n  }), _defineProperty(_methods, \"handleDatePickerChange\", function handleDatePickerChange(item) {\n    this.table.shuiqing.currentPage = 1;\n    this.search_yuqing(this.tableType);\n  }), _defineProperty(_methods, \"handleDatePickerChange_tezhengyuliang\", function handleDatePickerChange_tezhengyuliang() {\n    this.table.tezhengyuliang.currentPage = 1;\n    this.search_tezhengyuliang();\n  }), _defineProperty(_methods, \"handleDatePickerChange_guanxiquxian\", function handleDatePickerChange_guanxiquxian(item) {\n    console.log(\"item\", item);\n    this.search_guanxiquxian();\n  }), _defineProperty(_methods, \"setTableDate\", function setTableDate(tableName, val) {\n    // 判断当前时间是否小于8时\n    if (val[1].getHours() < 8) {\n      val[0].setTime(val[0] - 3600 * 1000 * 24);\n    } // val[0].setTime(val[0] - 3600 * 1000 * 24);\n\n\n    console.log('++++++++++++', val[0].getHours());\n    this.table[tableName].date = val;\n  }), _defineProperty(_methods, \"setTableDefaultDate_tezhengyuliang\", function setTableDefaultDate_tezhengyuliang() {\n    var end = new Date();\n    var start = new Date();\n    start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\n    var timeSlot = [start, end];\n    this.setTableDate(\"tezhengyuliang\", timeSlot);\n  }), _defineProperty(_methods, \"sort_change_shuiqing\", function sort_change_shuiqing(item) {\n    this.table.shuiqing.sort = item;\n    this.search_yuqing(this.tableType);\n  }), _methods),\n  mounted: function mounted() {\n    var _this8 = this;\n\n    // 组件加载中\n    this.componentLoading(); // 获取详情数据\n\n    this.axios.get(\"/guanqu/table/details?ID=\".concat(this.info.rowinfo.STCD, \"&pk=STCD\")).then(function (res) {\n      // 站点信息\n      // 根据关联编号获取关联站点\n      _this8.getRelateSiteByRelateCode(function (data) {\n        console.log(\"RelateSite\", data);\n      }); // 根据行政区划码获取行政区划名\n\n\n      _this8.getCompartmentByADDVCD(function (data) {\n        _this8.siteInfo.AD_NM = data[0].AD_NM;\n      }); // 根据河流编码获取河流名\n\n\n      _this8.$GetData.Base_R_I({\n        RVCD: _this8.info.rowinfo.RVCD\n      }, true, function (data) {\n        _this8.siteInfo.RVCD = data.data[0].RVNM;\n      }); // 根据流域编码获取流域名\n\n\n      _this8.$GetData.Base_B_I({\n        CTCD: _this8.info.rowinfo.CTCD\n      }, true, function (data) {\n        _this8.siteInfo.CTCD = data.data[0].CTNM;\n      }); // 加载站点数据\n\n\n      _this8.loadSiteData(res.data); // 加载取消\n\n\n      _this8.cancelComponentLoading(); // 降雨数据\n\n\n      console.log('+++++++', _this8.info);\n\n      _this8.tableTypeOnChange_shuiqing(_this8.info.rowinfo.tableType.yq); // 设置 默认的水情历史数据表\n      // 特征雨量最大流量表数据\n\n\n      if (_this8.setTableDefaultDate_tezhengyuliang) {\n        _this8.setTableDefaultDate_tezhengyuliang(); // 默认查询日期\n\n      }\n\n      _this8.search_tezhengyuliang(); // 特征雨量预警信息表数据\n\n\n      _this8.getTableData_tezhengyuqing_Alarm({\n        STCD: _this8.siteInfo.STCD\n      }, function (data) {\n        _this8.setAlarmData_tezhengyuliang(data[0]);\n      });\n    });\n  }\n};",{"version":3,"sources":["Details-yuqing.vue"],"names":[],"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","sourcesContent":["<template>\r\n    <div v-loading=\"boxLoading\">\r\n        <el-tabs type=\"border-card\" v-model=\"activeName\" @tab-click>\r\n            <!-- 站点信息 -->\r\n            <el-tab-pane name=\"zhandianxinxi\">\r\n        <span slot=\"label\">\r\n          <i class=\"el-icon-tickets\"></i> 站点信息\r\n        </span>\r\n                <div class=\"drawer-profile\">\r\n                    <!-- 导出按钮 -->\r\n                    <Button size=\"small\" class=\"outPutButton\" type=\"success\" @click=\"$App.developing_tip\">\r\n                        <div>导出</div>\r\n                    </Button>\r\n                    <!-- 信息表 -->\r\n                    <div>\r\n                        <!-- 信息内容 -->\r\n                        <div>\r\n                            <!-- table start -->\r\n                            <table\r\n                                    style=\"border: 1px solid #EBEEF5\"\r\n                                    border\r\n                                    cellspacing=\"0\"\r\n                                    width=\"100%\"\r\n                                    class=\"table_detail\"\r\n                            >\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">站名：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                            style=\"border-right: 1px solid #EBEEF5\"\r\n                                    >{{ siteInfo.STNM || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">国家定类：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                    >{{ this.STTP_Filter(siteInfo.STTP) || \"&nbsp;\" }}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">等级：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                            style=\"border-right: 1px solid #EBEEF5\"\r\n                                    >{{ this.$FilterData.STGR_Filter(siteInfo.STGR) || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">行政区划：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.AD_NM || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">经度：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                            style=\"border-right: 1px solid #EBEEF5\"\r\n                                    >{{ siteInfo.LGTD || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">纬度：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.LTTD || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">站址：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                            style=\"border-right: 1px solid #EBEEF5\"\r\n                                    >{{ siteInfo.STLC || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">水系：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.HNNM || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">流域：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                            style=\"border-right: 1px solid #EBEEF5\"\r\n                                    >{{ siteInfo.CTCD || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">河流：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.RVCD || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">建站日期：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                            style=\"border-right: 1px solid #EBEEF5\"\r\n                                    >{{ siteInfo.ESSTDT || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">建设单位：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.DLOG || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\" style=\"border-bottom: none\">录入时间：</td>\r\n                                    <td\r\n                                            align=\"center\"\r\n                                            class=\"dt_vale\"\r\n                                            style=\"border-right: 1px solid #EBEEF5;border-bottom: none\"\r\n                                    ></td>\r\n                                    <td align=\"right\" class=\"dt_name\" style=\"border-bottom: none\">图像按钮：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-bottom: none\">\r\n                                        <Button type=\"info\" @click=\"$App.developing_tip\" size=\"small\">查看图片</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                            <!-- table end -->\r\n\r\n                            <!-- <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">站名：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.STNM || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">国家定类：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ this.STTP_Filter(siteInfo.STTP) || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">等级：</Col>\r\n                              <Col\r\n                                span=\"7\"\r\n                                align=\"center\"\r\n                              >{{ this.$FilterData.STGR_Filter(siteInfo.STGR) || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">行政区划：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.AD_NM || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">经度：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.LGTD || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">纬度：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.LTTD || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">站址：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.STLC || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">水系：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.HNNM || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">流域：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.CTCD || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">河流：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.RVCD || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">建站日期：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.ESSTDT || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">建设单位：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.DLOG || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">隶属单位：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.ATCUNIT || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">管理单位：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.DLOG || \"&nbsp;\" }}</Col>\r\n                            </Row>-->\r\n                            <!--              <Row class=\"row\">-->\r\n                            <!--                <Col span=\"5\" align=\"right\">录入时间：</Col>-->\r\n                            <!--                <Col-->\r\n                            <!--                  span=\"7\"-->\r\n                            <!--                  align=\"center\"-->\r\n                            <!--                >{{ this.$FilterData.dateFilter(siteInfo.MODITIME,8) || \"&nbsp;\" }}</Col>-->\r\n                            <!--                <Col span=\"5\" align=\"right\">图像按钮：</Col>-->\r\n                            <!--                <Col span=\"12\" align=\"center\" style=\"border-right: 1px solid rgb(200, 200, 200); \">-->\r\n                            <!--                  <Button type=\"info\" @click=\"$App.developing_tip\" size=\"small\">查看图片</Button>-->\r\n                            <!--                </Col>-->\r\n                            <!--              </Row>-->\r\n                        </div>\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                        <Row>\r\n                            <el-col class=\"dt_remark\">\r\n                                <Col span=\"24\">备注：{{ siteInfo.COMMENTS || \"&nbsp;\" }}</Col>\r\n                            </el-col>\r\n                        </Row>\r\n                    </div>\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n                    <!-- 关联渠道和闸门 -->\r\n                    <div>\r\n                        <!-- <Row class=\"relationRow\">\r\n                          <Col span=\"4\">关联要素</Col>\r\n                          <Col span=\"20\">\r\n                            <Button\r\n                              @click=\"$App.developing_tip\"\r\n                              v-for=\"item in siteInfo.GUANLIAN\"\r\n                            >{{ item.SLNM }}</Button>\r\n                            <div v-if=\"siteInfo.GUANLIAN && siteInfo.GUANLIAN.length == 0\">暂无此站点的关联要素</div>\r\n                          </Col>\r\n                        </Row>-->\r\n                        <el-col\r\n                                style=\"border: 1px #EBEEF5 solid;border-radius: 2px;padding-left: 10px;padding-bottom: 20px\"\r\n                        >\r\n                            <Row class=\"relationRow\">\r\n                                <Col span=\"4\">同时监测：</Col>\r\n                                <Col span=\"20\">\r\n                                    <!-- <Button\r\n                                      @click=\"$App.developing_tip\"\r\n                                      v-for=\"item in siteInfo.GUANLIAN\"\r\n                                    >{{ item.SLNM }}</Button>-->\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row class=\"relationRow\">\r\n                                <Col span=\"4\">关联站点：</Col>\r\n                                <Col span=\"20\">\r\n                                    <!-- <Button\r\n                                      @click=\"$App.developing_tip\"\r\n                                      v-for=\"item in siteInfo.GUANLIAN\"\r\n                                    >{{ item.SLNM }}</Button>-->\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row class=\"relationRow\">\r\n                                <Col span=\"4\">关联要素：</Col>\r\n                                <Col span=\"20\">\r\n                                    <!-- <Button\r\n                                      @click=\"$App.developing_tip\"\r\n                                      v-for=\"item in siteInfo.GUANLIAN\"\r\n                                    >{{ item.SLNM }}</Button>-->\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                        </el-col>\r\n                    </div>\r\n                </div>\r\n            </el-tab-pane>\r\n            <!-- 降雨数据 -->\r\n            <el-tab-pane name=\"shuiqingshuju\">\r\n        <span slot=\"label\">\r\n          <Icon type=\"ios-water-outline\" style=\"font-size:20px\"/>降雨数据\r\n        </span>\r\n                <div class=\"drawer-profile\">\r\n                    <!-- 导出按钮 -->\r\n                    <Button size=\"small\" class=\"outPutButton\" type=\"success\" @click=\"$App.developing_tip\">\r\n                        <div>导出</div>\r\n                    </Button>\r\n                    <div>\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                        <!-- 选项卡 -->\r\n                        <Tabs type=\"card\">\r\n                            <!-- 表格 -->\r\n                            <TabPane label=\"表格\">\r\n                                <!-- 查询，导出行 -->\r\n                                <Row :gutter=\"16\" type=\"flex\" justify=\"end\" align=\"middle\">\r\n                                    <Col span=\"2\">\r\n                                        <span style=\"letter-spacing:2px\">查询</span>\r\n                                    </Col>\r\n                                    <!-- 开始到结束时间选择 -->\r\n                                    <Col span=\"19\">\r\n                                        <el-date-picker\r\n                                                v-model=\"table.shuiqing.date\"\r\n                                                range-separator=\"至\"\r\n                                                start-placeholder=\"开始日期\"\r\n                                                end-placeholder=\"结束日期\"\r\n                                                @change=\"handleDatePickerChange\"\r\n                                                :picker-options=\"table.shuiqing.datePickerOptions[select.yuqing_select]\"\r\n                                                unlink-panels\r\n                                                :type=\"table.shuiqing.datePickerType\"\r\n                                                size=\"mini\"\r\n                                                style=\"min-width: 360px\"\r\n                                                v-show=\"table.shuiqing.datePickerType != 'yearrange'\"\r\n                                        ></el-date-picker>\r\n\r\n<!--                                        旬表-->\r\n<!--                                        <div class=\"div_tenDay\" v-show=\"table.shuiqing.datePickerType == 'tenDaysrange'\">-->\r\n<!--                                            <el-date-picker-->\r\n<!--                                                    class=\"wAh\"-->\r\n<!--                                                    size=\"mini\"-->\r\n<!--                                                    v-model=\"table.shuiqing.tenDays_m\"-->\r\n<!--                                                    value-format=\"yyyy-mm\"-->\r\n<!--                                                    type=\"month\"-->\r\n<!--                                                    placeholder=\"选择月\">-->\r\n<!--                                            </el-date-picker>-->\r\n<!--                                            <el-select size=\"mini\" @change=\"search_yuqing('tenDaysrange')\" v-model=\"select.xun_select\" placeholder=\"选择旬\">-->\r\n<!--                                                <el-option-->\r\n<!--                                                        v-for=\"item in select.xunList\"-->\r\n<!--                                                        :key=\"item.value\"-->\r\n<!--                                                        :label=\"item.label\"-->\r\n<!--                                                        :value=\"item.value\">-->\r\n<!--                                                </el-option>-->\r\n<!--                                            </el-select>-->\r\n<!--                                        </div>-->\r\n\r\n\r\n<!--                                        年表-->\r\n                                        <div class=\"div_year\" v-show=\"table.shuiqing.datePickerType == 'yearrange'\">\r\n                                            <el-date-picker\r\n                                                    class=\"wAh\"\r\n                                                    size=\"mini\"\r\n                                                    v-model=\"table.shuiqing.start_year\"\r\n                                                    value-format=\"yyyy\"\r\n                                                    type=\"year\"\r\n                                                    placeholder=\"选择年\">\r\n                                            </el-date-picker>\r\n                                             &nbsp;&nbsp;至&nbsp;&nbsp;\r\n                                            <el-date-picker\r\n                                                    class=\"wAh\"\r\n                                                    size=\"mini\"\r\n                                                    v-model=\"table.shuiqing.end_year\"\r\n                                                    type=\"year\"\r\n                                                    value-format=\"yyyy\"\r\n                                                    placeholder=\"选择年\">\r\n                                            </el-date-picker>\r\n\r\n                                            <el-button style=\"margin-left: 20px\"\r\n                                                       type=\"primary\" @click=\"search_yuqing('yearTable')\" size=\"mini\" plain>查询</el-button>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <!-- 分割线 -->\r\n                                <div class=\"divider\"></div>\r\n                                <Row :gutter=\"16\" type=\"flex\" justify=\"end\" align=\"middle\">\r\n                                    <Col span=\"8\">\r\n                                        累计降雨:{{jiangyu_tongji.rainSum}}mm\r\n                                    </Col>\r\n                                    <Col span=\"8\">\r\n                                        平均{{biao_yuqing}}降雨:{{jiangyu_tongji.rainVag}}mm\r\n                                    </Col>\r\n                                    <Col span=\"8\">\r\n                                        最大{{biao_yuqing}}降雨:{{jiangyu_tongji.rainMax}}mm\r\n                                    </Col>\r\n                                </Row>\r\n                                <!-- 分割线 -->\r\n                                <div class=\"divider\"></div>\r\n                                <!-- 表格用于展示数据 -->\r\n                                <div>\r\n                                    <Table\r\n                                            :columns=\"table.shuiqing.activeColumns\"\r\n                                            :data=\"table.shuiqing.Rows_filter\"\r\n                                            :loading=\"table.shuiqing.loading\"\r\n                                            border\r\n                                            size=\"small\"\r\n                                            :height=\"table.shuiqing.height\"\r\n                                            @on-sort-change=\"sort_change_shuiqing\"\r\n                                    ></Table>\r\n                                    <!-- 分割线 -->\r\n                                    <div class=\"divider\"></div>\r\n                                    <!-- 分页器 -->\r\n                                    <el-pagination\r\n                                            background\r\n                                            :page-size=\"table.shuiqing.pageSizes\"\r\n                                            layout=\"sizes, total, prev, pager, next, jumper \"\r\n                                            :page-sizes=\"[20, 50, 100, 200]\"\r\n                                            :total=\"table.shuiqing.total\"\r\n                                            :pager-count=\"5\"\r\n                                            :current-page=\"table.shuiqing.currentPage\"\r\n                                            @current-change=\"handleCurrentChange_shuiqing\"\r\n                                            @size-change=\"handleSizeChange_shuiqing\"\r\n                                            class=\"pageController\"\r\n                                            small\r\n                                    ></el-pagination>\r\n                                    <!-- 分割线 -->\r\n                                    <div class=\"divider\"></div>\r\n                                </div>\r\n                            </TabPane>\r\n                            <TabPane label=\"图形\">\r\n                                <!-- 绘图 -->\r\n                                <div v-show=\"table.shuiqing.Rows_filter.length > 0\" id=\"shuiqingChart\" :style=\"{width: '500px', height: '350px',margin: 'auto'}\"></div>\r\n                                <div\r\n                                        v-show=\"table.shuiqing.Rows_filter.length == 0\"\r\n                                        :style=\"{width: '500px', height: '350px',margin: 'auto', display:'flex', alignItems:'center', justifyContent: 'center'}\"\r\n                                >暂无数据\r\n                                </div>\r\n                            </TabPane>\r\n                            <!-- 历史表选择框 -->\r\n                            <Select\r\n                                    @on-change=\"tableTypeOnChange_shuiqing\"\r\n                                    prefix=\"ios-calendar-outline\"\r\n                                    v-model=\"select.yuqing_select\"\r\n                                    slot=\"extra\"\r\n                            >\r\n                                <Option\r\n                                        v-for=\"item in select.yuqingList\"\r\n                                        :label=\"item.label\"\r\n                                        :value=\"item.value\"\r\n                                        :key=\"item.value\"\r\n                                ></Option>\r\n                            </Select>\r\n                        </Tabs>\r\n\r\n                        <!-- 分割线 -->\r\n                        <!-- <div class=\"divider\"></div> -->\r\n                    </div>\r\n                </div>\r\n            </el-tab-pane>\r\n            <!-- 特征雨量 -->\r\n            <el-tab-pane label=\"特征雨量\" name=\"tezhengyuliang\">\r\n        <span slot=\"label\">\r\n          <Icon type=\"ios-speedometer-outline\" style=\"font-size:20px\"/>特征雨量\r\n        </span>\r\n\r\n                <div class=\"drawer-profile\">\r\n                    <!-- 指标信息 -->\r\n                    <div>\r\n                        <Row class=\"row\">\r\n                            <Col span=\"5\" align=\"right\">预警等级：</Col>\r\n                            <Col span=\"7\" align=\"center\">\r\n                                &nbsp;\r\n                                <!-- {{ table.tezhengyuliang.alarmData.EWL}} -->\r\n                            </Col>\r\n                            <Col span=\"5\" align=\"right\">24小时降雨：</Col>\r\n                            <Col span=\"7\" align=\"center\">\r\n                                &nbsp;\r\n                                <!-- {{ table.tezhengyuliang.alarmData.OD_P + \"mm\"|| \"&nbsp;\" }} -->\r\n                            </Col>\r\n                        </Row>\r\n                        <Row class=\"row last_row\">\r\n                            <Col span=\"5\" align=\"right\">12小时降雨：</Col>\r\n                            <Col span=\"7\" align=\"center\">\r\n                                &nbsp;\r\n                                <!-- {{ table.tezhengyuliang.alarmData.TWH_P + \"mm\" || \"&nbsp;\" }} -->\r\n                            </Col>\r\n                            <Col span=\"5\" align=\"right\">6小时降雨：</Col>\r\n                            <Col span=\"7\" align=\"center\">\r\n                                &nbsp;\r\n                                <!-- {{ table.tezhengyuliang.alarmData.SH_P + \"mm\" || \"&nbsp;\" }} -->\r\n                            </Col>\r\n                        </Row>\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                    </div>\r\n                    <!-- 导出按钮 -->\r\n                    <Button size=\"small\" class=\"outPutButton\" type=\"success\" @click=\"$App.developing_tip\">\r\n                        <div>导出</div>\r\n                    </Button>\r\n                    <!-- 查询，导出行 -->\r\n                    <Row :gutter=\"16\" type=\"flex\" justify=\"center\" align=\"middle\">\r\n                        <Col span=\"2\">\r\n                            <span style=\"letter-spacing:2px\">查询</span>\r\n                        </Col>\r\n                        <!-- 开始到结束时间选择 -->\r\n                        <Col span=\"15\">\r\n                            <el-date-picker\r\n                                    v-model=\"table.tezhengyuliang.date\"\r\n                                    range-separator=\"至\"\r\n                                    start-placeholder=\"开始日期\"\r\n                                    end-placeholder=\"结束日期\"\r\n                                    @change=\"handleDatePickerChange_tezhengyuliang\"\r\n                                    :picker-options=\"table.tezhengyuliang.datePickerOptions\"\r\n                                    unlink-panels\r\n                                    type=\"monthrange\"\r\n                                    size=\"mini\"\r\n                                    style=\"min-width: 360px\"\r\n                            ></el-date-picker>\r\n                        </Col>\r\n                        <Col span=\"3\"></Col>\r\n                    </Row>\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n\r\n                    <!-- 表格用于展示数据 -->\r\n                    <div>\r\n                        <Table\r\n                                :columns=\"table.tezhengyuliang.columns\"\r\n                                :data=\"table.tezhengyuliang.Rows_filter\"\r\n                                :loading=\"table.tezhengyuliang.loading\"\r\n                                border\r\n                                size=\"small\"\r\n                                :height=\"table.tezhengyuliang.height\"\r\n                        ></Table>\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                        <!-- 分页器 -->\r\n                        <el-pagination\r\n                                background\r\n                                :page-size=\"table.tezhengyuliang.pageSizes\"\r\n                                layout=\"sizes, total, prev, pager, next, jumper \"\r\n                                :page-sizes=\"[20, 50, 100, 200]\"\r\n                                :total=\"table.tezhengyuliang.total\"\r\n                                :pager-count=\"5\"\r\n                                :current-page=\"table.tezhengyuliang.currentPage\"\r\n                                @current-change=\"handleCurrentChange_tezhengyuliang\"\r\n                                @size-change=\"handleSizeChange_tezhengyuliang\"\r\n                                class=\"pageController\"\r\n                                small\r\n                        ></el-pagination>\r\n                    </div>\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n                </div>\r\n            </el-tab-pane>\r\n        </el-tabs>\r\n\r\n        <!-- 导出提示对话框 -->\r\n        <Modal\r\n                v-model=\"outPutModal\"\r\n                v-loading=\"loading\"\r\n                title=\"关于导出\"\r\n                @on-ok=\"outPutSure\"\r\n                @on-cancel=\"cancel\"\r\n        >\r\n            <p>您确认导出该站点的信息表吗？</p>\r\n        </Modal>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n    import FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\r\n    import GetDataMethods from \"../../assets/commonJS/GetDataMethods\"; // 获取数据方法\r\n    import {timingSafeEqual} from \"crypto\";\r\n    import {type} from \"os\";\r\n    import {types} from \"util\";\r\n    import {stat} from \"fs\";\r\n    import {filter} from \"minimatch\";\r\n\r\n    export default {\r\n        props: {\r\n            info: {}\r\n        },\r\n        data() {\r\n            return {\r\n                // 统计数据的表名\r\n                biao_yuqing: '',\r\n                // 激活标签栏\r\n                activeName: \"shuiqingshuju\",\r\n                // 站点\r\n                siteInfo: {},\r\n                //   多选框对象\r\n                checkBox: {},\r\n                // 降雨统计\r\n                jiangyu_tongji: {\r\n                    rainSum: '',\r\n                    rainVag: '',\r\n                    rainMax: ''\r\n                },\r\n                //   选择框对象\r\n                select: {\r\n                    // 当前激活的降雨数据快速查询选项\r\n                    activeQuickSearchList: [],\r\n                    // 查询绑定值\r\n                    select: \"rec6\",\r\n                    // 日期选择器绑定值\r\n                    yuqing_datePicker: null,\r\n                    // 降雨数据历史表\r\n                    yuqingList: [\r\n                        {\r\n                            value: \"hourTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"小时表\"\r\n                        },\r\n                        {\r\n                            value: \"dayTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"日表\"\r\n                        },\r\n                        {\r\n                            value: \"tenDaysTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"旬表\"\r\n                        },\r\n                        {\r\n                            value: \"monthTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"月表\"\r\n                        },\r\n                        {\r\n                            value: \"yearTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"年表\"\r\n                        }\r\n                    ],\r\n                    // 降雨数据历史表绑定值\r\n                    yuqing_select: \"hourTable\",\r\n                    // 旬选择器列表\r\n                    xunList: [\r\n                        {\r\n                            label: \"上旬\",\r\n                            value: 0\r\n                        },\r\n                        {\r\n                            label: \"中旬\",\r\n                            value: 1\r\n                        },\r\n                        {\r\n                            label: \"下旬\",\r\n                            value: 2\r\n                        },\r\n                    ],\r\n                    // 旬选择器绑定值\r\n                    xun_select: null\r\n                },\r\n                // 表格\r\n                table: {\r\n                    // 水情\r\n                    shuiqing: {\r\n                        // 表头设置\r\n                        columns: {\r\n                            // 历史表\r\n                            historyTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"DT\",\r\n                                    width: 180,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"降雨(mm)\",\r\n                                    // width: 130,\r\n                                    key: \"P\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 小时表\r\n                            hourTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"DT\",\r\n                                    width: 180,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"降雨(mm)\",\r\n                                    // width: 130,\r\n                                    key: \"P\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 日表\r\n                            dayTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"日期\",\r\n                                    key: \"TM\",\r\n                                    width: 150,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"降雨(mm)\",\r\n                                    // width: 130,\r\n                                    key: \"p\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 旬表\r\n                            tenDaysTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"DT\",\r\n                                    width: 130,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"降雨(mm)\",\r\n                                    // width: 130,\r\n                                    key: \"P\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 月表\r\n                            monthTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"DT\",\r\n                                    width: 130,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"降雨(mm)\",\r\n                                    // width: 130,\r\n                                    key: \"P\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 年表\r\n                            yearTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"YR\",\r\n                                    width: 130,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"降雨(mm)\",\r\n                                    // width: 130,\r\n                                    key: \"P\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ]\r\n                        },\r\n                        // 正在激活的表头\r\n                        activeColumns: [],\r\n                        // 表体内容\r\n                        Rows: [],\r\n                        // 过滤后的表体内容\r\n                        Rows_filter: [],\r\n                        // 日期时间选择器的选项配置\r\n                        datePickerOptions: {\r\n                            historyTable: {\r\n                                shortcuts: [\r\n                                    {\r\n                                        text: \"最近6小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 6);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近12小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 12);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近24小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近36小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 36);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近72小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 72);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            hourTable: {\r\n                                shortcuts: [\r\n                                    {\r\n                                        text: \"最近6小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 6);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近12小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 12);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近24小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近36小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 36);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近72小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 72);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            dayTable: {\r\n                                shortcuts: [\r\n                                    {\r\n                                        text: \"最近10天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 10);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近15天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 15);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近30天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近60天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 60);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近90天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            monthTable: {\r\n                                shortcuts: []\r\n                            }\r\n                        },\r\n                        // 日期时间选择器类型\r\n                        datePickerType: \"date\",\r\n                        // 日期时间选择器值\r\n                        date: null,\r\n                        // 开始年\r\n                        start_year: null,\r\n                        //结束年\r\n                        end_year: null,\r\n\r\n                        tenDays_value: null,\r\n\r\n                        tenDays_lable: null,\r\n                        btn_tenday: null,\r\n                        // 排序\r\n                        sort: null,\r\n                        // 表格是否加载中\r\n                        loading: false,\r\n                        // 总条数\r\n                        total: 0,\r\n                        // 当前页\r\n                        currentPage: 1,\r\n                        // 每页显示数量\r\n                        pageSizes: 20,\r\n                        // 表格高度\r\n                        height: 430\r\n                    },\r\n                    // 特征雨量\r\n                    tezhengyuliang: {\r\n                        // 表头设置\r\n                        columns: [\r\n                            {\r\n                                title: \" \",\r\n                                type: \"index\",\r\n                                width: 50,\r\n                                align: \"center\",\r\n                                // 自定义序号\r\n                                indexMethod(item) {\r\n                                    var index =\r\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                    return index;\r\n                                },\r\n                                ellipsis: true\r\n                            },\r\n                            {\r\n                                title: \"年份\",\r\n                                // width: 130,\r\n                                key: \"Years\",\r\n                                width: 150,\r\n                                align: \"center\",\r\n                                sortable: true\r\n                            },\r\n                            {\r\n                                title: \"最大时段降雨(mm)\",\r\n                                key: \"Max_DP\",\r\n\r\n                                align: \"center\",\r\n                                sortable: true\r\n                            }\r\n                        ],\r\n                        // 表体内容\r\n                        Rows: [],\r\n                        // 过滤后的表体内容\r\n                        Rows_filter: [],\r\n                        // 总条数\r\n                        total: 0,\r\n                        // 表格是否加载中\r\n                        loading: false,\r\n                        // 当前页\r\n                        currentPage: 1,\r\n                        // 日期时间选择器值\r\n                        date: null,\r\n                        // 日期时间选择器的选项配置\r\n                        datePickerOptions: {\r\n                            shortcuts: [\r\n                                {\r\n                                    text: \"最近5年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                },\r\n                                {\r\n                                    text: \"最近3年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 3);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                },\r\n                                {\r\n                                    text: \"最近2年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 2);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                },\r\n                                {\r\n                                    text: \"最近1年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 1);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                }\r\n                            ]\r\n                        },\r\n                        // 表格高度\r\n                        height: 410,\r\n                        // 每页显示数量\r\n                        pageSizes: 20,\r\n                        alarmData: {\r\n                            EWL: \"\", // 预警等级\r\n                            OD_P: \"\", // 24小时降雨\r\n                            TWH_P: \"\", // 12小时降雨\r\n                            SH_P: \"\" // 6小时降雨\r\n                        }\r\n                    }\r\n                },\r\n                // 图形\r\n                chart: {\r\n                    shuiqing: null\r\n                },\r\n                //   日期数据\r\n                date: {\r\n                    shuiqing: \"\"\r\n                },\r\n                // 输入框对象\r\n                input: {\r\n                    // 关系曲线换算的\r\n                    huansuan: {\r\n                        waterLever: \"\",\r\n                        flowLever: \"\"\r\n                    }\r\n                },\r\n                //   导出按钮加载控制\r\n                outPutLoading: false,\r\n                //   导出确认对话框控制\r\n                outPutModal: false,\r\n                // 整块区域的加载控制\r\n                boxLoading: false,\r\n                tableType: ''\r\n            };\r\n        },\r\n        mixins: [FilterMethods, GetDataMethods],\r\n        methods: {\r\n            //   导出站点信息\r\n            outPutSiteInfo() {\r\n                //   关闭导出确认对话框\r\n                this.outPutModal = false;\r\n                //   按钮加载\r\n                this.outPutLoading = true;\r\n                setTimeout(() => {\r\n                    this.outPutLoading = false;\r\n                    this.$Modal.success({\r\n                        title: \"关于导出\",\r\n                        content: \"站点信息表导出成功\"\r\n                    });\r\n                }, 500);\r\n            },\r\n            //   确认导出\r\n            outPutSure() {\r\n                this.outPutSiteInfo();\r\n            },\r\n            // 日期时间选择器变化触发事件\r\n            // handleDatePickerChange(val, valType) {\r\n            //   var timeInterval = `${val[0].replace(/\\//g, \"-\")},${val[1].replace(\r\n            //     /\\//g,\r\n            //     \"-\"\r\n            //   )}`;\r\n            //   this.select.yuqing_datePicker = timeInterval;\r\n            // },\r\n            datePicke_on_ok(tableType) {\r\n                this.table[\"shuiqing\"].currentPage = 1; // 重置当前页\r\n                this.table.shuiqing.loading = true; // 表格加载中\r\n                var body = {\r\n                    STCD: this.siteInfo.STCD,\r\n                    TM: `bt,${this.select.yuqing_datePicker}`\r\n                };\r\n                var pageSizes = this.table.shuiqing.pageSizes;\r\n                var currentPage = 1;\r\n                this.getTableData_shuiqing(\r\n                    tableType,\r\n                    pageSizes,\r\n                    currentPage,\r\n                    body,\r\n                    data => {\r\n                        console.log(data);\r\n                        this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n                        this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\r\n                        this.table.shuiqing.loading = false; // 取消表格加载\r\n                    }\r\n                );\r\n            },\r\n            // 查询\r\n            search_yuqing(tableType) {\r\n                var tableType = tableType || this.select.yuqing_select;\r\n                this.letTableLoading(\"shuiqing\"); // 表格加载中\r\n\r\n                // 传递参数\r\n                var body = {\r\n                    STCD: this.siteInfo.STCD,\r\n                    _page: this.table.shuiqing.currentPage || 1,\r\n                    _page_size: this.table.shuiqing.pageSizes || 20\r\n                };\r\n\r\n                // 如果有选择排序，则传递排序参数\r\n                if (this.table.shuiqing.sort) {\r\n                    var _sort = this.$FilterData.sort_Filter(this.table.shuiqing.sort);\r\n                    if (_sort) {\r\n                        body._orderby = _sort;\r\n                    }\r\n                } else {\r\n                    switch (tableType) {\r\n                        case \"hourTable\":\r\n                            body._orderby = `DT `;\r\n                            break;\r\n\r\n                        case \"dayTable\":\r\n                            body._orderby = `dt `;\r\n                            break;\r\n\r\n                        case \"tenDaysTable\":\r\n                            body._orderby = `dt1 `;\r\n                            break;\r\n\r\n                        case \"monthTable\":\r\n                            body._orderby = `dt `;\r\n                            break;\r\n\r\n                        case \"yearTable\":\r\n                            body._orderby = `YR `;\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                // 如果有选择日期进行查询，根据表格类型传递参数\r\n                if (this.table.shuiqing.date && tableType !== \"yearTable\") {\r\n                    switch (tableType) {\r\n                        case \"dayTable\":\r\n                            // body.DTT = this.$FilterData.elDatePicker_Filter(\r\n                            //   this.table.shuiqing.date\r\n                            // );\r\n                            var DTT = this.$FilterData\r\n                                .elDatePicker_Filter(this.table.shuiqing.date)\r\n                                .split(\",\");\r\n                            console.log(DTT[1].substr(0,10),DTT[2].substr(0,10))\r\n                            body.Time_min = DTT[1].substr(0,10);\r\n                            body.Time_max = DTT[2].substr(0,10);\r\n                            break;\r\n                        case \"hourTable\":\r\n                            // body.DTT = this.$FilterData.elDatePicker_Filter(\r\n                            //   this.table.shuiqing.date\r\n                            // );\r\n                            var DTT = this.$FilterData\r\n                                .elDatePicker_Filter(this.table.shuiqing.date)\r\n                                .split(\",\");\r\n                            body.Time_min = DTT[1];\r\n                            body.Time_max = DTT[2];\r\n                            break;\r\n                        case \"tenDaysTable\":\r\n                            // body.DTT = this.$FilterData.elDatePicker_Filter(\r\n                            //   this.table.shuiqing.date\r\n                            // );\r\n                            var DTT = this.$FilterData\r\n                                .elDatePicker_Filter(this.table.shuiqing.date)\r\n                                .split(\",\");\r\n                            body.Time_min = `${DTT[1].substr(0,7)}-01`;\r\n                            body.Time_max = `${DTT[2].substr(0,7)}-01`;\r\n                            break;\r\n                        case \"monthTable\":\r\n                            // body.DT = this.$FilterData.elDatePicker_Filter(\r\n                            //   this.table.shuiqing.date,\r\n                            //   \"monthTable\"\r\n                            // );\r\n                            var DTT = this.$FilterData\r\n                                .elDatePicker_Filter(this.table.shuiqing.date, \"monthTable\")\r\n                                .split(\",\");\r\n                            body.Time_min = `${DTT[1].substr(0,7)}-01`;\r\n                            body.Time_max = `${DTT[2].substr(0,7)}-01`;\r\n                            // body.YE = this.$FilterData.elDatePicker_Filter(\r\n                            //   this.table.shuiqing.date,\r\n                            //   \"monthTable\"\r\n                            // ).YE;\r\n                            // body.MON = this.$FilterData.elDatePicker_Filter(\r\n                            //   this.table.shuiqing.date,\r\n                            //   \"monthTable\"\r\n                            // ).MON;\r\n                            break;\r\n\r\n                    }\r\n                }\r\n\r\n                if (tableType === \"yearTable\") {\r\n                    var start_year = this.table.shuiqing.start_year;\r\n                    var end_year = this.table.shuiqing.end_year;\r\n                    if (start_year) {\r\n                        var start = new Date(start_year),\r\n                            end = end_year ? new Date(end_year) : new Date();\r\n                        body.Time_min = start.getFullYear()\r\n                        body.Time_max = end.getFullYear()\r\n                    }\r\n                    // console.log(body.yr_min,body.yr_max)\r\n\r\n                }\r\n\r\n                // if (tableType === \"tenDaysrange\") {\r\n                //     var start = new Date(this.table.shuiqing.start_year),\r\n                //         end = new Date(this.table.shuiqing.end_year);\r\n                //     body.yr_min = start.getFullYear()\r\n                //     body.yr_max = end.getFullYear()\r\n                //     console.log(body.yr_min,body.yr_max)\r\n                //\r\n                // }\r\n\r\n                // 获取雨情历史数据\r\n                this.$GetData.Survey_History_YQ(\r\n                    tableType,\r\n                    body,\r\n                    {\r\n                        default: true,\r\n                        myFilter: data => {\r\n                            data.map(val => {\r\n                                val.currentPage = body._page;\r\n                                val.pageSizes = body._page_size;\r\n                                return val;\r\n                            });\r\n                            console.log(data);\r\n                            return data;\r\n                        }\r\n                    },\r\n                    data => {\r\n\r\n                        this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n                        this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\r\n\r\n                        body._page_size = 999999999;\r\n                        body._page = 1;\r\n                        this.$GetData.Survey_History_YQ(\r\n                            tableType,\r\n                            body,\r\n                            {\r\n                                default: true,\r\n                                myFilter: data => {\r\n                                    data.map(val => {\r\n                                        val.currentPage = body._page;\r\n                                        val.pageSizes = body._page_size;\r\n                                        return val;\r\n                                    });\r\n                                    return data;\r\n                                }\r\n                            },\r\n                            chartData => {\r\n                                console.log(\"chartData\", chartData)\r\n                                this.createChart_shuiqingshuju(\r\n                                    \"shuiqingChart\",\r\n                                    tableType,\r\n                                    chartData.data\r\n                                ); // 水情表格\r\n                            }\r\n                        );\r\n\r\n\r\n                        let obj = {};\r\n                        obj.Time_max = body.Time_max;\r\n                        obj.Time_min = body.Time_min;\r\n                        obj.STCD = body.STCD;\r\n\r\n\r\n                        this.$GetData.statistics_rain_YQ(tableType, obj, false, (data) => {\r\n                            console.log(\"data\",data.data)\r\n                            var d = data.data\r\n\r\n                            // console.log(this);\r\n\r\n                            this.jiangyu_tongji.rainSum = d.LeiJiYuLiang;\r\n                            this.jiangyu_tongji.rainVag = d.PingJunJiangYu\r\n                            this.jiangyu_tongji.rainMax = d.ZuiDaJiangYu\r\n\r\n                        })\r\n                        this.cancelTableLoading(\"shuiqing\"); // 取消表格加载\r\n                    }\r\n                );\r\n            },\r\n            // 查询关系曲线表格\r\n            search_guanxiquxian() {\r\n                this.letTableLoading(\"guanxiquxian\");\r\n\r\n                // 传递参数\r\n                var body = {\r\n                    STCD: this.siteInfo.STCD,\r\n                    _page: this.table[\"guanxiquxian\"].currentPage || 1,\r\n                    _page_size: this.table[\"guanxiquxian\"].pageSizes || 20\r\n                };\r\n\r\n                // 如果有选择日期进行查询，根据表格类型传递参数\r\n                if (this.table.guanxiquxian.date) {\r\n                    body.YR = this.$FilterData.elDatePicker_Filter(\r\n                        this.table.guanxiquxian.date,\r\n                        \"onlyYear\"\r\n                    );\r\n                }\r\n\r\n                this.$GetData.Base_MonitoringSites(\r\n                    \"Z_Q_relation\",\r\n                    body,\r\n                    {\r\n                        default: true,\r\n                        myFilter: data => {\r\n                            data.map(val => {\r\n                                val.currentPage = body._page;\r\n                                val.pageSizes = body._page_size;\r\n                                return val;\r\n                            });\r\n                            return data;\r\n                        }\r\n                    },\r\n                    data => {\r\n                        this.setTableTotal(\"guanxiquxian\", data.total);\r\n                        this.setTableData(\"guanxiquxian\", data.data);\r\n                        this.cancelTableLoading(\"guanxiquxian\");\r\n                    }\r\n                );\r\n            },\r\n            // 设置表格总条数\r\n            setTableTotal(tableName, total) {\r\n                this.table[tableName].total = total;\r\n            },\r\n            // 表格加载中\r\n            letTableLoading(tableName) {\r\n                this.table[tableName].loading = true;\r\n            },\r\n            // 取消表格加载\r\n            cancelTableLoading(tableName) {\r\n                this.table[tableName].loading = false;\r\n            },\r\n            // 绘图\r\n            createChart_guanxiquxian(idName) {\r\n                let myChart = this.$echarts.init(document.getElementById(idName));\r\n\r\n                myChart.setOption({\r\n                    title: {\r\n                        // text: this.info.STNM\r\n                        // subtext: \"纯属虚构\"\r\n                    },\r\n                    grid: {\r\n                        x: '50%'\r\n                    },\r\n                    tooltip: {\r\n                        trigger: \"axis\"\r\n                    },\r\n                    legend: {\r\n                        data: [\"流量\", \"水位\"]\r\n                    },\r\n                    toolbox: {\r\n                        show: true,\r\n                        feature: {\r\n                            mark: {show: true},\r\n                            dataView: {show: true, readOnly: false},\r\n                            magicType: {show: true, type: [\"line\", \"bar\"]},\r\n                            restore: {show: true},\r\n                            saveAsImage: {show: true}\r\n                        }\r\n                    },\r\n                    calculable: true,\r\n                    xAxis: [\r\n                        {\r\n                            type: \"category\",\r\n                            boundaryGap: false,\r\n                            data: [\r\n                                \"00:00-02:00\",\r\n                                \"02:00-04:00\",\r\n                                \"04:00-06:00\",\r\n                                \"06:00-08:00\",\r\n                                \"08:00-10:00\"\r\n                            ]\r\n                        }\r\n                    ],\r\n                    yAxis: [\r\n                        {\r\n                            name: \"流量 m³/s\",\r\n                            type: \"value\",\r\n                            axisLabel: {\r\n                                formatter: \"{value}\"\r\n                            }\r\n                        },\r\n                        {\r\n                            name: \"水位 m\",\r\n                            type: \"value\",\r\n                            axisLabel: {\r\n                                formatter: \"{value} \"\r\n                            }\r\n                        }\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: \"流量\",\r\n                            type: \"line\",\r\n                            data: [11, 11, 15, 13, 12, 13, 10],\r\n                            markLine: {\r\n                                data: [{type: \"average\", name: \"平均值\"}]\r\n                            }\r\n                        },\r\n                        {\r\n                            name: \"水位\",\r\n                            type: \"line\",\r\n                            data: [1, 4, 2, 5, 3, 2, 0],\r\n                            yAxisIndex: 1,\r\n                            markLine: {\r\n                                data: [{type: \"average\", name: \"平均值\"}],\r\n                                effect: {\r\n                                    show: false,\r\n                                    loop: true,\r\n                                    period: 15,\r\n                                    scaleSize: 10,\r\n                                    color: null,\r\n                                    shadowColor: null,\r\n                                    shadowBlur: null\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                });\r\n            },\r\n\r\n            // 制图\r\n            createChart_shuiqingshuju(id, tableType, data) {\r\n                var ele = document.getElementById(id);\r\n                if (data.length > 0) {\r\n                    // 雨情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\r\n                    var echartData = this.$App.transform_YQ_data_into_ehart_data(data, tableType);\r\n\r\n\r\n                    // x轴\r\n                    // echartData.x.list = data.map((val, index, array) => {\r\n                    //   // var time = `${index}:00 ~ ${index + 1}:00`;\r\n                    //   var time = val.DT;\r\n                    //   return time;\r\n                    // });\r\n                    echartData.x.list = echartData.x.list\r\n                    if (!this.chart.shuiqing) {\r\n                        this.chart.shuiqing = this.$echarts.init(ele);\r\n                    }\r\n                    this.chart.shuiqing.setOption({\r\n                        title: {\r\n                            text: echartData.chartName\r\n                        },\r\n                        grid: {\r\n                            x: '20%'\r\n                        },\r\n                        tooltip: {\r\n                            trigger: \"axis\"\r\n                        },\r\n                        legend: {\r\n                            data: [echartData.y1.name],\r\n                            y: \"bottom\"\r\n                        },\r\n                        toolbox: {\r\n                            show: true,\r\n                            feature: {\r\n                                mark: {show: true},\r\n                                magicType: {show: true, type: [\"line\", \"bar\"]},\r\n                                restore: {show: true},\r\n                                saveAsImage: {show: true}\r\n                            }\r\n                        },\r\n                        calculable: true,\r\n                        animation: true,\r\n                        xAxis: [\r\n                            {\r\n                                type: \"category\",\r\n                                // boundaryGap: false,\r\n                                data: echartData.x.list,\r\n                                axisTick: {\r\n                                    interval: parseInt(echartData.x.list.length / 4)\r\n                                    //     function (index, val) {\r\n                                    //     var listLength = echartData.x.list.length\r\n                                    //     if (listLength >= 4) {\r\n                                    //\r\n                                    //         var tick = Math.round(listLength / 4);\r\n                                    //         // console.log((index + 1) % tick === 0);\r\n                                    //         // console.log('1575listLength',listLength);\r\n                                    //         // console.log('1576tick',tick);\r\n                                    //         if ((index + 1) % tick === 0) {\r\n                                    //             return true;\r\n                                    //         } else {\r\n                                    //             return false;\r\n                                    //         }\r\n                                    //     } else {\r\n                                    //         return true\r\n                                    //     }\r\n                                    // },\r\n                                    ,\r\n                                    length: 10\r\n                                },\r\n                                axisLabel: {\r\n                                    interval: parseInt(echartData.x.list.length / 4)\r\n                                    //     function (index, val) {\r\n                                    //     var listLength = echartData.x.list.length\r\n                                    //     if (listLength >= 4) {\r\n                                    //         console.log(index);\r\n                                    //         var tick = Math.round(listLength / 4);\r\n                                    //         // console.log('1575listLength',listLength);\r\n                                    //         // console.log('1576tick',tick);\r\n                                    //         let a = (index + 1) % tick\r\n                                    //         console.log(a);\r\n                                    //         console.log((index + 1) % tick === 0);\r\n                                    //         if ((index + 1) % tick === 0) {\r\n                                    //             return true;\r\n                                    //         } else {\r\n                                    //             return false;\r\n                                    //         }\r\n                                    //     } else {\r\n                                    //         return true\r\n                                    //     }\r\n                                    // },\r\n                                    ,\r\n                                    rotate: 10,\r\n                                    margin: 16\r\n                                }\r\n                            }\r\n                        ],\r\n                        yAxis: [\r\n                            {\r\n                                name: `${echartData.y1.name} mm`,\r\n                                type: \"value\",\r\n                                axisLabel: {\r\n                                    formatter: \"{value} \"\r\n                                },\r\n                                // scale: true\r\n                                // max: echartData.y1.max,\r\n                                // min: echartData.y1.min\r\n                            },\r\n                            // {\r\n                            //   name: `${echartData.y2.name}m`,\r\n                            //   type: \"value\",\r\n                            //   axisLabel: {\r\n                            //     formatter: \"{value} \"\r\n                            //   },\r\n                            //   scale: true\r\n                            //   // max: echartData.y2.max,\r\n                            //   // min: echartData.y2.min\r\n                            // }\r\n                        ],\r\n                        series: [\r\n                            {\r\n                                name: echartData.y1.name,\r\n                                type: \"bar\",\r\n                                data: echartData.y1.list,\r\n\r\n                                itemStyle: {\r\n                                    //通常情况下：\r\n                                    normal: {\r\n                                        //每个柱子的颜色即为colorList数组里的每一项，如果柱子数目多于colorList的长度，则柱子颜色循环使用该数组\r\n                                        color: function (params) {\r\n\r\n                                            switch (echartData.chartName) {\r\n                                                case \"小时表\":\r\n                                                    if (params.data >= 25 && params.data < 50) return 'orange';\r\n                                                    if (params.data > 50) return 'red';\r\n                                                    return 'blue'\r\n                                                    break\r\n                                                case \"日表\":\r\n                                                    if (params.data >= 25 && params.data < 50) return 'orange';\r\n                                                    if (params.data > 50) return 'red';\r\n                                                    return 'blue'\r\n                                                    break\r\n                                                case \"月表\":\r\n                                                    if (params.data >= 100 && params.data < 250) return 'orange';\r\n                                                    if (params.data > 250) return 'red';\r\n                                                    return 'blue'\r\n                                                    break\r\n                                                case \"旬表\":\r\n                                                    if (params.data >= 100 && params.data < 250) return 'orange';\r\n                                                    if (params.data > 250) return 'red';\r\n                                                    return 'blue'\r\n                                                    break\r\n                                                case \"年表\":\r\n                                                    if (params.data >= 1400 && params.data < 1650) return 'orange';\r\n                                                    if (params.data > 1650) return 'red';\r\n                                                    return 'blue'\r\n                                                    break\r\n\r\n                                            }\r\n\r\n                                            //     var colorList = [\r\n                                            //         (() => {\r\n                                            //             if ( === '小时表') {\r\n                                            //                 if (params.data >= 25 && params.data < 50) return 'orange';\r\n                                            //                 if (params.data > 50) return 'red';\r\n                                            //                 return 'blue'\r\n                                            //             }\r\n                                            //         })(),\r\n                                            //         (() => {\r\n                                            //             if (echartData.chartName === '月表') {\r\n                                            //                 if (params.data >= 100 && params.data < 250) return 'orange';\r\n                                            //                 if (params.data > 250) return 'red';\r\n                                            //                 return 'blue'\r\n                                            //             }\r\n                                            //         })(),\r\n                                            //         (() => {\r\n                                            //             if (echartData.chartName === '年表') {\r\n                                            //                 if (params.data >= 1400 && params.data < 1650) return 'orange';\r\n                                            //                 if (params.data > 1650) return 'red';\r\n                                            //                 return 'blue'\r\n                                            //             }\r\n                                            //         })()\r\n                                            // ]\r\n                                            //     return colorList[params.dataIndex];\r\n                                        }\r\n                                    },\r\n                                }\r\n                            },\r\n                            // {\r\n                            //   name: echartData.y2.name,\r\n                            //   type: \"line\",\r\n                            //   data: echartData.y2.list,\r\n                            //   yAxisIndex: 1\r\n                            // },\r\n                            // {\r\n                            //   name: echartData.y3.name,\r\n                            //   type: \"bar\",\r\n                            //   data: echartData.y3.list,\r\n                            //   yAxisIndex: 1,\r\n                            //   barMaxWidth: 10\r\n                            // }\r\n                        ]\r\n                    });\r\n                    console.log(\"this.chart.shuiqing.setOption\",tableType)\r\n                }\r\n            },\r\n            // 加载站点数据\r\n            loadSiteData(data) {\r\n                this.siteInfo = data;\r\n            },\r\n            // 组件加载中\r\n            componentLoading() {\r\n                this.boxLoading = true;\r\n            },\r\n            // 取消组件加载\r\n            cancelComponentLoading() {\r\n                this.boxLoading = false;\r\n            },\r\n            // 处理页码切换_降雨数据\r\n            handleCurrentChange_shuiqing(index) {\r\n                this.table[\"shuiqing\"].currentPage = index;\r\n                this.search_yuqing(this.tableType);\r\n            },\r\n            // 处理页码切换_关系曲线\r\n            handleCurrentChange_guanxiquxian(index) {\r\n                this.table[\"guanxiquxian\"].currentPage = index;\r\n                this.search_guanxiquxian();\r\n            },\r\n            // 处理页码切换_特征雨量\r\n            handleCurrentChange_tezhengyuliang(index) {\r\n                this.table[\"tezhengyuliang\"].currentPage = index;\r\n                this.search_tezhengyuliang();\r\n            },\r\n            // 处理每页显示条数切换_降雨数据\r\n            handleSizeChange_shuiqing(pageSizes) {\r\n                this.table[\"shuiqing\"].pageSizes = pageSizes;\r\n                this.table[\"shuiqing\"].currentPage = 1;\r\n                this.search_yuqing(this.tableType);\r\n            },\r\n            // 处理每页显示条数切换_关系曲线\r\n            handleSizeChange_guanxiquxian(pageSizes) {\r\n                this.table[\"guanxiquxian\"].pageSizes = pageSizes;\r\n                this.table[\"guanxiquxian\"].currentPage = 1;\r\n                this.search_guanxiquxian();\r\n            },\r\n            // 处理每页显示条数切换_特征雨量\r\n            handleSizeChange_tezhengyuliang(pageSizes) {\r\n                this.table[\"tezhengyuliang\"].pageSizes = pageSizes;\r\n                this.table[\"tezhengyuliang\"].currentPage = 1;\r\n                this.search_tezhengyuliang();\r\n            },\r\n            // 分页过滤\r\n            pageFilter(currentPage, pageSizes, tableName) {\r\n                // 截取数组\r\n                var newList = this.table[tableName].Rows_filter.slice(\r\n                    (currentPage - 1) * pageSizes,\r\n                    currentPage * pageSizes\r\n                );\r\n\r\n                return newList;\r\n            },\r\n            // 水情历史数据表 当前正在激活的表头\r\n            setActiveColumns_shuiqing(tableType) {\r\n                console.log('********',tableType);\r\n                this.table.shuiqing.activeColumns = this.table.shuiqing.columns[tableType];\r\n                this.select.yuqing_select = tableType;\r\n            },\r\n            // 切换 水情历史数据表类型\r\n            tableTypeOnChange_shuiqing(tableType) {\r\n                console.log(tableType)\r\n                let tabName = ''\r\n                switch (tableType) {\r\n                    case 'hourTable':\r\n                        tabName = '小时';\r\n                        break\r\n                    case 'dayTable':\r\n                        tabName = '日';\r\n                        break\r\n                    case  'tenDaysTable':\r\n                        tabName = '旬';\r\n                        break\r\n                    case  'monthTable':\r\n                        tabName = '月';\r\n                        break\r\n                    case  'yearTable':\r\n                        tabName = '年'\r\n                }\r\n                this.biao_yuqing = tabName;\r\n                this.table[\"shuiqing\"].currentPage = 1;\r\n                this.table[\"shuiqing\"].date = null;\r\n                this.table[\"shuiqing\"].sort = null;\r\n                this.tableType = tableType;\r\n                this.setDatePickerType_shuiqing(tableType); // 设置日期时间选择器的类型\r\n                // this.select[\"yuqing_select\"] = tableType; // 设置选中的表\r\n                // this.setSelectOption_quickSearch(tableType); // 设置数据表快速查询选择框内容\r\n                this.setActiveColumns_shuiqing(tableType); // 设置水情历史数据表 当前激活的表头\r\n                this.table.shuiqing.loading = true; // 表格加载中\r\n                if (this[`setTableDefaultDate_yuqing_${tableType}`]) {\r\n                    this[`setTableDefaultDate_yuqing_${tableType}`]();\r\n                }\r\n                // 获取对应水情历史数据表的数据\r\n                this.search_yuqing(tableType);\r\n            },\r\n            // 设置降雨数据历史表默认查询日期\r\n            setTableDefaultDate_yuqing_historyTable() {\r\n                const end = new Date();\r\n                const start = eightPointOfTheDay();\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function eightPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(8);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置降雨数据小时表默认查询日期\r\n            setTableDefaultDate_yuqing_hourTable() {\r\n                const end = new Date();\r\n                const start = eightPointOfTheDay();\r\n                // console.log(end.getHours());\r\n\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n\r\n                function eightPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(8);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置降雨数据日表默认查询日期\r\n            setTableDefaultDate_yuqing_dayTable() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置降雨数据旬表默认查询日期\r\n            setTableDefaultDate_yuqing_tenDaysTable() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                console.log(start.getTime());\r\n                if(start.getHours() < 8){\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30 * 6);\r\n                }\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置降雨数据月表默认查询日期\r\n            setTableDefaultDate_yuqing_monthTable() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 160);\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置降雨数据旬表默认查询日期\r\n            setTableDefaultDate_yuqing_tenDaysTable() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 180);\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置降雨数据旬表默认查询日期\r\n            setTableDefaultDate_yuqing_yearTable() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                console.log(start.getHours(),start.getTime());\r\n                if(start.getHours() < 8){\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30 * 12 * 5);\r\n                }\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置日期时间选择器的类型\r\n            setDatePickerType_shuiqing(tableType) {\r\n                var datePickerType;\r\n                switch (tableType) {\r\n                    case \"historyTable\":\r\n                        datePickerType = \"datetimerange\";\r\n                        break;\r\n                    case \"hourTable\":\r\n                        datePickerType = \"datetimerange\";\r\n                        break;\r\n                    case \"dayTable\":\r\n                        datePickerType = \"daterange\";\r\n                        break;\r\n                    case \"tenDaysTable\":\r\n                        datePickerType = \"monthrange\";\r\n                        break;\r\n                    case \"monthTable\":\r\n                        datePickerType = \"monthrange\";\r\n                        break;\r\n                    case \"yearTable\":\r\n                        datePickerType = \"yearrange\";\r\n                        this.table.shuiqing.start_year = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24 * 365 * 5);\r\n                        this.table.shuiqing.end_year = new Date();\r\n                        break;\r\n                }\r\n                this.table[\"shuiqing\"].datePickerType = datePickerType;\r\n            },\r\n            // 设置数据表快速查询选择框内容\r\n            setSelectOption_quickSearch(tableType) {\r\n                this.select.activeQuickSearchList = this.select.quickSearch[tableType];\r\n                this.select.select = this.select.activeQuickSearchList[0]\r\n                    ? this.select.activeQuickSearchList[0].value\r\n                    : null; // 设置默认值为第一项\r\n            },\r\n            // 获取特征雨量表格的数据\r\n            getTableData_tezhengyuliang(\r\n                pageSizes,\r\n                currentPage,\r\n                body,\r\n                callback,\r\n                callback_beforeFilter\r\n            ) {\r\n                this.axios\r\n                    .get(\r\n                        `/guanqu/admin/ST_G_CQORD?_page_size=${pageSizes ||\r\n                        20}&_page=${currentPage || 1}`,\r\n                        {\r\n                            params: body\r\n                        }\r\n                    )\r\n                    .then(res => {\r\n                        if (typeof callback_beforeFilter == \"function\") {\r\n                            callback_beforeFilter({\r\n                                data: res.data.rows || [],\r\n                                total: res.data.total || 0\r\n                            });\r\n                        }\r\n                        console.log(\"tezhengyuliang\", res);\r\n                        // 降雨数据过滤\r\n                        var data = res.data.rows.map(val => {\r\n                            val.currentPage = this.table.shuiqing.currentPage; // 添加数据当前页码\r\n                            val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\r\n                            val.TMMXQ = this.dateFilter(val.TMMXQ); // 日期过滤\r\n                            val.TMXQ = this.Z_Filter(val.TMXQ, 3); // 平均流量过滤\r\n                            val.YMXQZ = this.Z_Filter(val.YMXQZ); // 平均水位过滤\r\n                            val.WQ = this.Z_Filter(val.WQ, 3); // 小时累计水量过滤\r\n\r\n                            return val;\r\n                        });\r\n                        if (typeof callback == \"function\") {\r\n                            callback({\r\n                                data: data,\r\n                                total: res.data.total\r\n                            });\r\n                        }\r\n                    });\r\n            },\r\n            // 获取特征雨量预警信息表的数据\r\n            getTableData_tezhengyuqing_Alarm(body, callback, callback_beforeFilter) {\r\n                this.axios\r\n                    .get(`/guanqu/admin/ST_Canal_Alarm`, {\r\n                        params: body\r\n                    })\r\n                    .then(res => {\r\n                        var data = res.data.rows;\r\n                        if (typeof callback_beforeFilter == \"function\") {\r\n                            callback_beforeFilter(res);\r\n                        }\r\n                        // 降雨数据过滤\r\n                        var data = res.data.list.map(val => {\r\n                            val.Q = this.Z_Filter(val.Q, 3); // 流量过滤\r\n                            val.Z = this.Z_Filter(val.Z); // 水位过滤\r\n                            val.JYQ = this.Z_Filter(val.JYQ, 3); // 预警流量过滤\r\n                            val.JYZ = this.Z_Filter(val.JYZ); // 预警水位过滤\r\n\r\n                            return val;\r\n                        });\r\n                        if (typeof callback == \"function\") {\r\n                            callback(data);\r\n                        }\r\n                    });\r\n            },\r\n            // 更新 XX 表格的数据\r\n            setTableData(tableName, data) {\r\n                this.table[tableName].Rows_filter = data;\r\n            },\r\n            // 获取对应关系曲线数据表的数据\r\n            getTableData_guanxiquxian(callback) {\r\n                this.axios\r\n                    .get(`/guanqu/admin/ST_ZQRL_B`, {\r\n                        params: {\r\n                            STCD: this.info.STCD\r\n                        }\r\n                    })\r\n                    .then(res => {\r\n                        var data = res.data.rows;\r\n                        if (typeof callback == \"function\") {\r\n                            callback(data);\r\n                        }\r\n                    });\r\n            },\r\n            // 更新水情历史数据表的数据\r\n            setTableData_guanxiquxian(data) {\r\n                this.table.guanxiquxian.Rows_filter = data;\r\n            },\r\n            // 根据关联编号获取关联站点\r\n            getRelateSiteByRelateCode(callback) {\r\n                var RELATECODE = this.info.RELATECODE;\r\n                if (RELATECODE && RELATECODE != 0) {\r\n                    this.axios\r\n                        .get(`/guanqu/admin/ST_STBPRP_B`, {\r\n                            params: {\r\n                                RELATECODE: RELATECODE\r\n                            }\r\n                        })\r\n                        .then(res => {\r\n                            var data = res.data.rows;\r\n                            if (typeof callback == \"function\") {\r\n                                callback(data);\r\n                            }\r\n                        });\r\n                }\r\n            },\r\n            // 根据行政区划编码获取行政区划\r\n            getCompartmentByADDVCD(callback) {\r\n                var ADDVCD = this.info.rowinfo.ADDVCD;\r\n                if (ADDVCD && ADDVCD != \"\") {\r\n                    this.axios\r\n                        .get(`/guanqu/admin/WRP_AD_B`, {\r\n                            params: {\r\n                                AD_CD: ADDVCD\r\n                            }\r\n                        })\r\n                        .then(res => {\r\n                            var data = res.data.rows;\r\n                            if (typeof callback == \"function\") {\r\n                                callback(data);\r\n                            }\r\n                        });\r\n                }\r\n            },\r\n            // 特征雨量表格查询\r\n            search_tezhengyuliang() {\r\n                this.letTableLoading(\"tezhengyuliang\"); // 表格加载中\r\n                // 传递站码参数\r\n                var body = {\r\n                    STCD: this.siteInfo.STCD,\r\n                    _page: this.table.tezhengyuliang.currentPage,\r\n                    _page_size: this.table.tezhengyuliang.pageSizes\r\n                };\r\n\r\n                if (this.table.tezhengyuliang.date) {\r\n                    body.YR = this.$FilterData.elDatePicker_Filter(\r\n                        this.table.tezhengyuliang.date,\r\n                        \"maxQTable\"\r\n                    );\r\n                }\r\n\r\n                this.$GetData.Survey_History_QDSQ(\r\n                    \"maxQTable\",\r\n                    body,\r\n                    {\r\n                        default: true,\r\n                        myFilter: data => {\r\n                            data.map(val => {\r\n                                val.currentPage = body._page;\r\n                                val.pageSizes = body._page_size;\r\n                                return val;\r\n                            });\r\n                            return data;\r\n                        }\r\n                    },\r\n                    data => {\r\n                        this.setTableTotal(\"tezhengyuliang\", data.total); // 根据返回的total数量, 设置表格总条数\r\n                        this.setTableData(\"tezhengyuliang\", data.data); // 更新特征降雨数据表的数据\r\n                        this.cancelTableLoading(\"tezhengyuliang\"); // 取消表格加载\r\n                    }\r\n                );\r\n\r\n                // // 获取特征雨量表格数据\r\n                // this.getTableData_tezhengyuliang(pageSizes, currentPage, body, data => {\r\n\r\n                // });\r\n            },\r\n            // 设置特征雨量预警信息数据\r\n            setAlarmData_tezhengyuliang(data) {\r\n                this.table.tezhengyuliang.alarmData = data;\r\n            },\r\n            // 处理日期时间选择器确定事件_降雨数据\r\n            handleDatePickerChange(item) {\r\n                this.table.shuiqing.currentPage = 1;\r\n                this.search_yuqing(this.tableType);\r\n            },\r\n            handleDatePickerChange_tezhengyuliang() {\r\n                this.table.tezhengyuliang.currentPage = 1;\r\n                this.search_tezhengyuliang();\r\n            },\r\n            handleDatePickerChange_guanxiquxian(item) {\r\n                console.log(\"item\", item);\r\n                this.search_guanxiquxian();\r\n            },\r\n            // 设置 xx表格 时间选择器值\r\n            setTableDate(tableName, val) {\r\n                // 判断当前时间是否小于8时\r\n                if(val[1].getHours() < 8){\r\n                    val[0].setTime(val[0] - 3600 * 1000 * 24);\r\n                }\r\n                // val[0].setTime(val[0] - 3600 * 1000 * 24);\r\n                console.log('++++++++++++',val[0].getHours());\r\n\r\n                this.table[tableName].date = val;\r\n            },\r\n            // 特征水情表默认查询时间\r\n            setTableDefaultDate_tezhengyuliang() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"tezhengyuliang\", timeSlot);\r\n            },\r\n            // 排序\r\n            sort_change_shuiqing(item) {\r\n                this.table.shuiqing.sort = item;\r\n\r\n                this.search_yuqing(this.tableType);\r\n            }\r\n        },\r\n        mounted() {\r\n            // 组件加载中\r\n            this.componentLoading();\r\n            // 获取详情数据\r\n            this.axios\r\n                .get(`/guanqu/table/details?ID=${this.info.rowinfo.STCD}&pk=STCD`)\r\n                .then(res => {\r\n                    // 站点信息\r\n                    // 根据关联编号获取关联站点\r\n                    this.getRelateSiteByRelateCode(data => {\r\n                        console.log(\"RelateSite\", data);\r\n                    });\r\n                    // 根据行政区划码获取行政区划名\r\n                    this.getCompartmentByADDVCD(data => {\r\n                        this.siteInfo.AD_NM = data[0].AD_NM;\r\n                    });\r\n\r\n\r\n                    // 根据河流编码获取河流名\r\n                    this.$GetData.Base_R_I(\r\n                        {\r\n                            RVCD: this.info.rowinfo.RVCD\r\n                        },\r\n                        true,\r\n                        data => {\r\n                            this.siteInfo.RVCD = data.data[0].RVNM;\r\n                        }\r\n                    );\r\n\r\n                    // 根据流域编码获取流域名\r\n                    this.$GetData.Base_B_I(\r\n                        {\r\n                            CTCD: this.info.rowinfo.CTCD\r\n                        },\r\n                        true,\r\n                        data => {\r\n                            this.siteInfo.CTCD = data.data[0].CTNM;\r\n                        }\r\n                    );\r\n\r\n                    // 加载站点数据\r\n                    this.loadSiteData(res.data);\r\n                    // 加载取消\r\n                    this.cancelComponentLoading();\r\n                    // 降雨数据\r\n                    console.log('+++++++', this.info);\r\n                    this.tableTypeOnChange_shuiqing(this.info.rowinfo.tableType.yq); // 设置 默认的水情历史数据表\r\n                    // 特征雨量最大流量表数据\r\n                    if (this.setTableDefaultDate_tezhengyuliang) {\r\n                        this.setTableDefaultDate_tezhengyuliang(); // 默认查询日期\r\n                    }\r\n                    this.search_tezhengyuliang();\r\n                    // 特征雨量预警信息表数据\r\n                    this.getTableData_tezhengyuqing_Alarm(\r\n                        {\r\n                            STCD: this.siteInfo.STCD\r\n                        },\r\n                        data => {\r\n                            this.setAlarmData_tezhengyuliang(data[0]);\r\n                        }\r\n                    );\r\n                });\r\n        }\r\n    };\r\n</script>\r\n\r\n\r\n<style lang=\"less\" scope>\r\n    @import \"./common/common.less\";\r\n\r\n    .drawer-profile {\r\n        font-size: @siteInfoFontSize;\r\n        position: relative;\r\n\r\n        .outPutButton {\r\n            position: absolute;\r\n            right: -10px;\r\n            top: -45px;\r\n            z-index: 2;\r\n        }\r\n\r\n        .row_header {\r\n            text-align: center;\r\n            font-size: 1.5625rem;\r\n            font-weight: 700;\r\n        }\r\n\r\n        .relationRow {\r\n            margin-top: 1.25rem;\r\n\r\n            button {\r\n                margin-right: 1.25rem;\r\n            }\r\n        }\r\n\r\n        .checkBoxItem {\r\n            margin: 0 0.9375rem;\r\n        }\r\n    }\r\n</style>\r\n"],"sourceRoot":"src/components/Details"}]}