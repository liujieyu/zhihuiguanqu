{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-zhafashuiqing.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-zhafashuiqing.vue","mtime":1577669404029},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\babel.config.js","mtime":1577669403468},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"D:\\\\huangcaiplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _methods;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\n\nimport GetDataMethods from \"../../assets/commonJS/GetDataMethods\"; // 获取数据方法\n\nimport { timingSafeEqual } from \"crypto\";\nexport default {\n  props: {\n    info: {}\n  },\n  data: function data() {\n    var _tezhengshuiqing;\n\n    return {\n      // 激活标签栏\n      activeName: \"shuiqingshuju\",\n      // 站点\n      siteInfo: {},\n      //   多选框对象\n      checkBox: {},\n      //   选择框对象\n      select: {\n        // 水情数据快速查询\n        quickSearch: {\n          historyTable: [{\n            value: 0,\n            label: \"全部\"\n          }, {\n            value: 6,\n            label: \"最近6小时\"\n          }, {\n            value: 12,\n            label: \"最近12小时\"\n          }, {\n            value: 24,\n            label: \"最近24小时\"\n          }, {\n            value: 36,\n            label: \"最近36小时\"\n          }, {\n            value: 72,\n            label: \"最近72小时\"\n          }],\n          hourTable: [{\n            value: 0,\n            label: \"全部\"\n          }, {\n            value: 6,\n            label: \"最近6小时\"\n          }, {\n            value: 12,\n            label: \"最近12小时\"\n          }, {\n            value: 24,\n            label: \"最近24小时\"\n          }, {\n            value: 36,\n            label: \"最近36小时\"\n          }, {\n            value: 72,\n            label: \"最近72小时\"\n          }],\n          dayTable: [{\n            value: 0,\n            label: \"全部\"\n          }, {\n            value: 10,\n            label: \"最近10天\"\n          }, {\n            value: 15,\n            label: \"最近15天\"\n          }, {\n            value: 30,\n            label: \"最近30天\"\n          }, {\n            value: 60,\n            label: \"最近60天\"\n          }, {\n            value: 90,\n            label: \"最近90天\"\n          }],\n          monthTable: []\n        },\n        // 当前激活的水情数据快速查询选项\n        activeQuickSearchList: [],\n        // 查询绑定值\n        select: \"rec6\",\n        // 水情数据历史表\n        shuiqingList: [{\n          value: \"historyTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"历史表\"\n        }, {\n          value: \"hourTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"小时表\"\n        }, {\n          value: \"dayTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"日表\"\n        }, {\n          value: \"monthTable\",\n          size: \"small\",\n          // iconType: \"logo-facebook\",\n          label: \"月表\"\n        }],\n        // 水情数据历史表绑定值\n        shuiqing_select: \"historyTable\"\n      },\n      // 表格数据\n      table: {\n        // 水情\n        shuiqing: {\n          // 表头设置\n          columns: {\n            // 历史表\n            historyTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 60,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              }\n            }, {\n              title: \"时间\",\n              key: \"TM\",\n              width: 150,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"闸前水深(m)\",\n              width: 140,\n              key: \"UPZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"闸后水深(m)\",\n              width: 140,\n              key: \"DWZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 120,\n              title: \"流量(m³/s)\",\n              key: \"Q\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 小时表\n            hourTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"时间\",\n              key: \"dt\",\n              width: 150,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"平均闸前水深(m)\",\n              width: 150,\n              key: \"A_UPZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"平均阀后水深(m)\",\n              width: 150,\n              key: \"A_DWZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 160,\n              title: \"平均过闸流量(m³/s)\",\n              key: \"A_Q\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 180,\n              title: \"小时累计过闸水量(m³)\",\n              key: \"WQ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 日表\n            dayTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"时间\",\n              key: \"tm\",\n              width: 150,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"平均闸前水深(m)\",\n              width: 150,\n              key: \"DA_UPZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"平均闸后水深(m)\",\n              width: 150,\n              key: \"DA_DWZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 160,\n              title: \"平均过闸流量(m³/s)\",\n              key: \"DA_Q\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 170,\n              title: \"日累计过闸水量(m³)\",\n              key: \"DWQ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }],\n            // 月表\n            monthTable: [{\n              title: \" \",\n              type: \"index\",\n              width: 50,\n              align: \"center\",\n              // 自定义序号\n              indexMethod: function indexMethod(item) {\n                var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n                return index;\n              },\n              ellipsis: true\n            }, {\n              title: \"年份\",\n              key: \"dt\",\n              width: 110,\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              title: \"平均闸前水深(m)\",\n              width: 150,\n              key: \"MA_UPZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 150,\n              title: \"平均闸后水深(m)\",\n              key: \"MA_DWZ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 160,\n              title: \"平均过闸流量(m³/s)\",\n              key: \"MA_Q\",\n              align: \"center\",\n              sortable: \"custom\"\n            }, {\n              width: 180,\n              title: \"月累计过闸水量(m³/s)\",\n              key: \"MWQ\",\n              align: \"center\",\n              sortable: \"custom\"\n            }]\n          },\n          // 正在激活的表头\n          activeColumns: [],\n          // 表体内容\n          Rows: [],\n          // 过滤后的表体内容\n          Rows_filter: [],\n          // 日期时间选择器的选项配置\n          datePickerOptions: {\n            historyTable: {\n              shortcuts: [{\n                text: \"最近6小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 6);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近12小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 12);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近24小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近36小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 36);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近72小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 72);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }]\n            },\n            hourTable: {\n              shortcuts: [{\n                text: \"最近6小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 6);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近12小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 12);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近24小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近36小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 36);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近72小时\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 72);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }]\n            },\n            dayTable: {\n              shortcuts: [{\n                text: \"最近10天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 10);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近15天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 15);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近30天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近60天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 60);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }, {\n                text: \"最近90天\",\n                onClick: function onClick(picker) {\n                  var end = new Date();\n                  var start = new Date();\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n                  picker.$emit(\"pick\", [start, end]);\n                }\n              }]\n            },\n            monthTable: {\n              shortcuts: []\n            }\n          },\n          // 日期时间选择器类型\n          datePickerType: \"datetimerange\",\n          // 日期时间选择器值\n          date: null,\n          // 排序\n          sort: null,\n          // 表格是否加载中\n          loading: false,\n          // 总条数\n          total: 0,\n          // 当前页\n          currentPage: 1,\n          // 每页显示数量\n          pageSizes: 20,\n          // 表格高度\n          height: 430\n        },\n        // 关系曲线\n        guanxiquxian: {\n          // 表头设置\n          columns: [{\n            title: \" \",\n            type: \"index\",\n            width: 50,\n            align: \"center\",\n            // 自定义序号\n            indexMethod: function indexMethod(item) {\n              var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n              return index;\n            },\n            ellipsis: true\n          }, {\n            title: \"流量(m³/s)\",\n            key: \"Q\",\n            align: \"center\",\n            width: 100\n          }, {\n            title: \"闸门开度\",\n            // width: 100,\n            key: \"OD\",\n            align: \"center\"\n          }, {\n            width: 100,\n            title: \"闸前水深\",\n            key: \"UPZ\",\n            align: \"center\"\n          }, {\n            width: 100,\n            title: \"闸后水深\",\n            key: \"DWZ\",\n            align: \"center\"\n          }],\n          // 表体内容\n          Rows: [],\n          // 过滤后的表体内容\n          Rows_filter: [],\n          // 表格是否加载中\n          loading: false,\n          // 日期时间选择器值\n          date: null,\n          // 总条数\n          total: 0,\n          // 当前页\n          currentPage: 1,\n          // 每页显示数量\n          pageSizes: 20,\n          // 表格高度\n          height: 440\n        },\n        // 特征水深\n        tezhengshuiqing: (_tezhengshuiqing = {\n          // 表头设置\n          columns: [{\n            title: \" \",\n            type: \"index\",\n            width: 50,\n            align: \"center\",\n            // 自定义序号\n            indexMethod: function indexMethod(item) {\n              var index = item._index + 1 + (item.currentPage - 1) * item.pageSizes;\n              return index;\n            },\n            ellipsis: true\n          }, {\n            title: \"最大流量时间\",\n            width: 130,\n            key: \"TMMXQ\",\n            align: \"center\",\n            sortable: \"custom\"\n          }, {\n            title: \"年最大流量(m³/s)\",\n            key: \"TMXQ\",\n            align: \"center\",\n            width: 150,\n            sortable: \"custom\"\n          }, {\n            width: 150,\n            title: \"对应闸前水深(m)\",\n            key: \"YMXUPQZ\",\n            align: \"center\",\n            sortable: \"custom\"\n          }, {\n            width: 150,\n            title: \"对应闸后水深(m)\",\n            key: \"YMXDNQZ\",\n            align: \"center\",\n            sortable: \"custom\"\n          }],\n          // 表体内容\n          Rows: [],\n          // 过滤后的表体内容\n          Rows_filter: [],\n          // 表格是否加载中\n          loading: false,\n          // 当前页\n          currentPage: 1,\n          // 总条数\n          total: 0\n        }, _defineProperty(_tezhengshuiqing, \"loading\", false), _defineProperty(_tezhengshuiqing, \"currentPage\", 1), _defineProperty(_tezhengshuiqing, \"date\", null), _defineProperty(_tezhengshuiqing, \"datePickerOptions\", {\n          shortcuts: [{\n            text: \"最近5年\",\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\n              picker.$emit(\"pick\", [start, end]);\n            }\n          }, {\n            text: \"最近3年\",\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 3);\n              picker.$emit(\"pick\", [start, end]);\n            }\n          }, {\n            text: \"最近2年\",\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 2);\n              picker.$emit(\"pick\", [start, end]);\n            }\n          }, {\n            text: \"最近1年\",\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 1);\n              picker.$emit(\"pick\", [start, end]);\n            }\n          }]\n        }), _defineProperty(_tezhengshuiqing, \"height\", 400), _defineProperty(_tezhengshuiqing, \"pageSizes\", 20), _defineProperty(_tezhengshuiqing, \"alarmData\", {\n          SQ: \"\",\n          // 预警闸前水深\n          EQ: \"\",\n          // 预警闸后水深\n          JYSQ: \"\",\n          // 经验预警闸前水深\n          JYEQ: \"\" // 经验预警闸后水深\n\n        }), _tezhengshuiqing)\n      },\n      // 图形\n      chart: {\n        shuiqing: null\n      },\n      //   日期数据\n      date: {\n        shuiqing: \"\"\n      },\n      // 输入框对象\n      input: {\n        // 关系曲线换算的\n        huansuan: {\n          waterLever: \"\",\n          flowLever: \"\"\n        }\n      },\n      //   导出按钮加载控制\n      outPutLoading: false,\n      //   导出确认对话框控制\n      outPutModal: false,\n      // 整块区域的加载控制\n      boxLoading: true,\n      //预警数据\n      yujingdata: {}\n    };\n  },\n  mixins: [FilterMethods, GetDataMethods],\n  methods: (_methods = {\n    //   导出站点信息\n    outPutSiteInfo: function outPutSiteInfo() {\n      var _this = this;\n\n      //   关闭导出确认对话框\n      this.outPutModal = false; //   按钮加载\n\n      this.outPutLoading = true;\n      setTimeout(function () {\n        _this.outPutLoading = false;\n\n        _this.$Modal.success({\n          title: \"关于导出\",\n          content: \"站点信息表导出成功\"\n        });\n      }, 500);\n    },\n    //   确认导出\n    outPutSure: function outPutSure() {\n      this.outPutSiteInfo();\n    },\n    // 日期时间选择器变化触发事件\n    handleDatePickerChange: function handleDatePickerChange(val, valType) {\n      var timeInterval = \"\".concat(val[0].replace(/\\//g, \"-\"), \",\").concat(val[1].replace(/\\//g, \"-\"));\n      this.select.shuiqing_datePicker = timeInterval;\n    },\n    // datePicke_on_ok(tableType) {\n    //   this.table[\"shuiqing\"].currentPage = 1; // 重置当前页\n    //   this.table.shuiqing.loading = true; // 表格加载中\n    //   var body = {\n    //     STCD: this.siteInfo.STCD,\n    //     TM: `bt,${this.select.shuiqing_datePicker}`\n    //   };\n    //   var pageSizes = this.table.shuiqing.pageSizes;\n    //   var currentPage = 1;\n    //   this.getTableData_shuiqing(\n    //     tableType,\n    //     pageSizes,\n    //     currentPage,\n    //     body,\n    //     data => {\n    //       this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\n    //       this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\n    //       this.cancelTableLoading(\"shuiqing\"); // 取消表格加载\n    //     }\n    //   );\n    // },\n    // 查询\n    search_shuiqing: function search_shuiqing(tableType) {\n      var _this2 = this;\n\n      console.log('************', tableType);\n      var tableType = tableType || this.select.shuiqing_select;\n      this.letTableLoading(\"shuiqing\"); // 表格加载中\n      // 传递参数\n\n      var body = {\n        STCD: this.siteInfo.STCD,\n        _page: this.table.shuiqing.currentPage || 1,\n        _page_size: this.table.shuiqing.pageSizes || 20\n      }; // 如果有选择排序，则传递排序参数\n\n      if (this.table.shuiqing.sort) {\n        var _sort = this.$FilterData.sort_Filter(this.table.shuiqing.sort);\n\n        if (_sort) {\n          body._orderby = _sort;\n        }\n      } else {\n        switch (tableType) {\n          case 'historyTable':\n            body._orderby = \"TM desc\";\n            break;\n\n          case 'hourTable':\n            body._orderby = \"DT desc\";\n            break;\n\n          case 'dayTable':\n            body._orderby = \"TM desc\";\n            break;\n\n          case 'monthTable':\n            body._orderby = \"DT desc\";\n            break;\n        }\n      }\n\n      console.log(\"body._orderby\", body._orderby); // 如果有选择日期进行查询，根据表格类型传递参数\n\n      if (this.table.shuiqing.date) {\n        switch (tableType) {\n          case \"historyTable\":\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date).split(\",\");\n            body.Time_min = DTT[1];\n            body.Time_max = DTT[2];\n            break;\n\n          case \"dayTable\":\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date, \"dayTable\").split(\",\");\n            body.Time_min = DTT[1];\n            body.Time_max = DTT[2];\n            break;\n\n          case \"hourTable\":\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date).split(\",\");\n            body.Time_min = DTT[1];\n            body.Time_max = DTT[2];\n            break;\n\n          case \"monthTable\":\n            var DTT = this.$FilterData.elDatePicker_Filter(this.table.shuiqing.date, \"monthTable\").split(\",\");\n            body.Time_min = DTT[1];\n            body.Time_max = DTT[2];\n            break;\n        }\n      } // 传表类型，参数，回调函数\n\n\n      this.$GetData.Survey_History_ZFSQ(tableType, body, {\n        default: true,\n        myFilter: function myFilter(data) {\n          data.map(function (val) {\n            val.currentPage = body._page;\n            val.pageSizes = body._page_size;\n            return val;\n          });\n          return data;\n        }\n      }, function (data) {\n        _this2.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\n\n\n        _this2.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\n\n\n        body._page_size = 999999999;\n        body._page = 1;\n\n        _this2.$GetData.Survey_History_ZFSQ(tableType, body, {\n          default: true,\n          myFilter: function myFilter(data) {\n            data.map(function (val) {\n              val.currentPage = body._page;\n              val.pageSizes = body._page_size;\n              return val;\n            });\n            return data;\n          }\n        }, function (chartData) {\n          _this2.createChart_shuiqingshuju(\"shuiqingChart\", tableType, chartData.data); // 水情表格\n\n        });\n\n        _this2.cancelTableLoading(\"shuiqing\"); // 取消表格加载\n\n      });\n    },\n    // 查询关系曲线表格\n    search_guanxiquxian: function search_guanxiquxian() {\n      var _this3 = this;\n\n      this.letTableLoading(\"guanxiquxian\"); // 传递参数\n\n      var body = {\n        STCD: this.siteInfo.STCD,\n        _page: this.table[\"guanxiquxian\"].currentPage || 1,\n        _page_size: this.table[\"guanxiquxian\"].pageSizes || 20\n      }; // 如果有选择日期进行查询，根据表格类型传递参数\n      // if (this.table.guanxiquxian.date) {\n      //   body.YR = this.$FilterData.elDatePicker_Filter(\n      //     this.table.guanxiquxian.date,\n      //     \"onlyYear\"\n      //   );\n      // }\n\n      this.$GetData.Base_MonitoringSites(\"Gate_Z_Q_relation\", body, {\n        default: true,\n        myFilter: function myFilter(data) {\n          data.map(function (val) {\n            val.currentPage = body._page;\n            val.pageSizes = body._page_size;\n            return val;\n          });\n          return data;\n        }\n      }, function (data) {\n        _this3.setTableTotal(\"guanxiquxian\", data.total);\n\n        _this3.setTableData(\"guanxiquxian\", data.data);\n\n        _this3.cancelTableLoading(\"guanxiquxian\");\n      });\n    },\n    // 设置表格总条数\n    setTableTotal: function setTableTotal(tableName, total) {\n      this.table[tableName].total = total;\n    },\n    // 表格加载中\n    letTableLoading: function letTableLoading(tableName) {\n      this.table[tableName].loading = true;\n    },\n    // 取消表格加载\n    cancelTableLoading: function cancelTableLoading(tableName) {\n      this.table[tableName].loading = false;\n    },\n    // 绘图\n    createChart: function createChart(idName) {\n      var myChart = this.$echarts.init(document.getElementById(idName));\n      myChart.setOption({\n        title: {\n          text: this.info.STNM,\n          subtext: \"纯属虚构\"\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        legend: {\n          data: [\"流量\", \"水深\"]\n        },\n        toolbox: {\n          show: true,\n          feature: {\n            mark: {\n              show: true\n            },\n            dataView: {\n              show: true,\n              readOnly: false\n            },\n            magicType: {\n              show: true,\n              type: [\"line\", \"bar\"]\n            },\n            restore: {\n              show: true\n            },\n            saveAsImage: {\n              show: true\n            }\n          }\n        },\n        calculable: true,\n        xAxis: [{\n          type: \"category\",\n          // boundaryGap: false,\n          data: [\"00:00-02:00\", \"02:00-04:00\", \"04:00-06:00\", \"06:00-08:00\", \"08:00-10:00\"]\n        }],\n        yAxis: [{\n          type: \"value\",\n          axisLabel: {\n            formatter: \"{value} m³/s\"\n          },\n          min: 10\n        }, {\n          type: \"value\",\n          axisLabel: {\n            formatter: \"{value} m\"\n          },\n          min: 5\n        }],\n        series: [{\n          name: \"流量\",\n          type: \"line\",\n          data: [20, 20, 28, 35, 24, 13, 25],\n          markLine: {\n            data: [{\n              type: \"average\",\n              name: \"平均值\"\n            }]\n          }\n        }, {\n          name: \"水深\",\n          type: \"line\",\n          data: [7, 18, 15, 12, 13, 18, 12],\n          markPoint: {\n            data: [{\n              name: \"周最低\",\n              value: -2,\n              xAxis: 1,\n              yAxis: -1.5\n            }]\n          },\n          yAxisIndex: 1,\n          markLine: {\n            data: [{\n              type: \"average\",\n              name: \"平均值\"\n            }]\n          }\n        }]\n      });\n    },\n    // 制图\n    createChart_shuiqingshuju: function createChart_shuiqingshuju(id, tableType, data) {\n      var ele = document.getElementById(id);\n      console.log('1575', tableType);\n\n      if (data.length > 0) {\n        var echartData = this.$App.transform_ZFSQ_data_into_ehart_data(data, tableType, true); // 渠道水情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\n\n        console.log(\"echartData.x.list\", echartData.x.list);\n        var y2_y3_max = echartData.y2.max > echartData.y3.max ? echartData.y2.max : echartData.y3.max;\n        var y2_y3_min = echartData.y2.min < echartData.y3.min ? echartData.y2.min : echartData.y3.min;\n\n        if (!this.chart.shuiqing) {\n          this.chart.shuiqing = this.$echarts.init(ele);\n        }\n\n        this.chart.shuiqing.setOption({\n          title: {\n            text: echartData.chartName\n          },\n          tooltip: {\n            trigger: \"axis\"\n          },\n          legend: {\n            data: [echartData.y1.name, echartData.y2.name, echartData.y3.name],\n            y: \"bottom\"\n          },\n          toolbox: {\n            show: true,\n            feature: {\n              mark: {\n                show: true\n              },\n              magicType: {\n                show: true,\n                type: [\"line\", \"bar\"]\n              },\n              restore: {\n                show: true\n              },\n              saveAsImage: {\n                show: true\n              }\n            }\n          },\n          calculable: true,\n          animation: true,\n          xAxis: [{\n            type: \"category\",\n            // boundaryGap: false,\n            data: echartData.x.list\n          }],\n          yAxis: [{\n            name: \"\".concat(echartData.y1.name, \" m\\xB3/s\"),\n            type: \"value\",\n            axisLabel: {\n              formatter: \"{value} \"\n            },\n            max: echartData.y1.max,\n            min: echartData.y1.min\n          }, {\n            name: \"\\u95F8\\u9600\\u4E0A/\\u4E0B\\u6C34\\u6DF1m\",\n            type: \"value\",\n            axisLabel: {\n              formatter: \"{value} \"\n            },\n            max: y2_y3_max,\n            min: y2_y3_min\n          }, {\n            name: \" \",\n            type: \"value\",\n            axisLabel: {\n              formatter: \"{value} \"\n            },\n            max: y2_y3_max,\n            min: y2_y3_min\n          }],\n          series: [{\n            name: echartData.y1.name,\n            type: \"line\",\n            data: echartData.y1.list\n          }, {\n            name: echartData.y2.name,\n            type: \"line\",\n            data: echartData.y2.list,\n            yAxisIndex: 1\n          }, {\n            name: echartData.y3.name,\n            type: \"line\",\n            data: echartData.y3.list,\n            yAxisIndex: 2\n          }]\n        });\n      }\n    },\n    // 加载站点数据\n    loadSiteData: function loadSiteData(data) {\n      this.siteInfo = data;\n    },\n    // 组件加载中\n    componentLoading: function componentLoading() {\n      this.boxLoading = true;\n    },\n    // 取消组件加载\n    cancelComponentLoading: function cancelComponentLoading() {\n      this.boxLoading = false;\n    },\n    // 处理页码切换_水情数据\n    handleCurrentChange_shuiqing: function handleCurrentChange_shuiqing(index) {\n      this.table[\"shuiqing\"].currentPage = index;\n      this.search_shuiqing();\n    },\n    // 处理页码切换_关系曲线\n    handleCurrentChange_guanxiquxian: function handleCurrentChange_guanxiquxian(index) {\n      this.table[\"guanxiquxian\"].currentPage = index;\n      this.search_guanxiquxian();\n    },\n    // 处理页码切换_特征水深\n    handleCurrentChange_tezhengshuiqing: function handleCurrentChange_tezhengshuiqing() {\n      this.table[\"tezhengshuiqing\"].currentPage = index;\n      this.search_tezhengshuiqing();\n    },\n    // 处理每页显示条数切换_水情数据\n    handleSizeChange_shuiqing: function handleSizeChange_shuiqing(pageSizes) {\n      this.table[\"shuiqing\"].pageSizes = pageSizes;\n      this.table[\"shuiqing\"].currentPage = 1;\n      this.search();\n    },\n    // 处理每页显示条数切换_关系曲线\n    handleSizeChange_guanxiquxian: function handleSizeChange_guanxiquxian(pageSizes) {\n      this.table[\"guanxiquxian\"].pageSizes = pageSizes;\n      this.table[\"guanxiquxian\"].currentPage = 1;\n      this.search_guanxiquxian();\n    },\n    // 处理每页显示条数切换_特征水深\n    handleSizeChange_tezhengshuiqing: function handleSizeChange_tezhengshuiqing(pageSizes) {\n      this.table[\"tezhengshuiqing\"].pageSizes = pageSizes;\n      this.table[\"tezhengshuiqing\"].currentPage = 1;\n      this.search_tezhengshuiqing();\n    },\n    // 分页过滤\n    pageFilter: function pageFilter(currentPage, pageSizes, tableName) {\n      // 截取数组\n      var newList = this.table[tableName].Rows_filter.slice((currentPage - 1) * pageSizes, currentPage * pageSizes);\n      return newList;\n    },\n    // 水情历史数据表 当前正在激活的表头\n    setActiveColumns_shuiqing: function setActiveColumns_shuiqing(tableType) {\n      this.table.shuiqing.activeColumns = this.table.shuiqing.columns[tableType];\n      this.select.shuiqing_select = tableType;\n      console.log('+++++++++', tableType);\n      console.log('----------', this.table.shuiqing.activeColumns);\n    },\n    // 切换 水情历史数据表类型\n    tableTypeOnChange_shuiqing: function tableTypeOnChange_shuiqing(tableType) {\n      this.table[\"shuiqing\"].currentPage = 1;\n      this.table[\"shuiqing\"].date = null;\n      this.table[\"shuiqing\"].sort = null;\n      this.setDatePickerType_shuiqing(tableType); // 设置日期时间选择器的类型\n      // 设置水情历史数据表 当前激活的表头\n\n      this.setActiveColumns_shuiqing(tableType);\n      this.table.shuiqing.loading = true; // 表格加载中\n      // 设置表默认查询日期\n\n      if (this[\"setTableDefaultDate_shuiqing_\".concat(tableType)]) {\n        this[\"setTableDefaultDate_shuiqing_\".concat(tableType)]();\n      } // 查询对应水情历史数据表的数据\n\n\n      this.search_shuiqing(tableType);\n    },\n    // 设置数据表快速查询选择框内容\n    setSelectOption_quickSearch: function setSelectOption_quickSearch(tableType) {\n      this.select.activeQuickSearchList = this.select.quickSearch[tableType];\n      this.select.select = this.select.activeQuickSearchList[0] ? this.select.activeQuickSearchList[0].value : null; // 设置默认值为第一项\n    },\n    // 设置水情数据历史表默认查询日期\n    setTableDefaultDate_shuiqing_historyTable: function setTableDefaultDate_shuiqing_historyTable() {\n      var end = new Date();\n      var start = zeroPointOfTheDay();\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function zeroPointOfTheDay() {\n        var date = new Date();\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置水情数据小时表默认查询日期\n    setTableDefaultDate_shuiqing_hourTable: function setTableDefaultDate_shuiqing_hourTable() {\n      var end = new Date();\n      var start = zeroPointOfTheDay();\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function zeroPointOfTheDay() {\n        var date = new Date();\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置水情数据日表默认查询日期\n    setTableDefaultDate_shuiqing_dayTable: function setTableDefaultDate_shuiqing_dayTable() {\n      var end = new Date();\n      var start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function zeroPointOfTheDay() {\n        var date = new Date();\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置水情数据月表默认查询日期\n    setTableDefaultDate_shuiqing_monthTable: function setTableDefaultDate_shuiqing_monthTable() {\n      var end = new Date();\n      var start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 160);\n      var timeSlot = [start, end];\n      this.setTableDate(\"shuiqing\", timeSlot);\n\n      function zeroPointOfTheDay() {\n        var date = new Date();\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n      }\n    },\n    // 设置日期时间选择器的类型\n    setDatePickerType_shuiqing: function setDatePickerType_shuiqing(tableType) {\n      var datePickerType;\n\n      switch (tableType) {\n        case \"historyTable\":\n          datePickerType = \"datetimerange\";\n          break;\n\n        case \"hourTable\":\n          datePickerType = \"datetimerange\";\n          break;\n\n        case \"dayTable\":\n          datePickerType = \"daterange\";\n          break;\n\n        case \"monthTable\":\n          datePickerType = \"monthrange\";\n          break;\n      }\n\n      this.table[\"shuiqing\"].datePickerType = datePickerType;\n    },\n    // 获取对应水情历史数据表的数据\n    getTableData_shuiqing: function getTableData_shuiqing(tableType, pageSizes, currentPage, body, callback, callback_beforeFilter) {\n      var _this4 = this;\n\n      var tableName = null; // 根据不同类型的表，选择数据库中对应的表名\n\n      switch (tableType) {\n        case \"historyTable\":\n          tableName = \"ST_WAS_R\";\n          break;\n\n        case \"hourTable\":\n          tableName = \"ST_HWAS_C\";\n          break;\n\n        case \"dayTable\":\n          tableName = \"ST_DWAS_C\";\n          break;\n\n        case \"monthTable\":\n          tableName = \"ST_MWAS_C\";\n          break;\n\n        default:\n          tableName = \"ST_WAS_R\";\n          break;\n      }\n\n      this.axios.get(\"/guanqu/admin/\".concat(tableName || \"historyTable\", \"?_page_size=\").concat(pageSizes || 20, \"&_page=\").concat(currentPage || 1), {\n        params: body\n      }).then(function (res) {\n        if (typeof callback_beforeFilter == \"function\") {\n          callback_beforeFilter({\n            data: res.data.rows,\n            total: res.data.total\n          });\n        } // 数据过滤\n\n\n        var data = res.data.rows.map(function (val) {\n          if (tableType == \"historyTable\") {\n            val.currentPage = _this4.table.shuiqing.currentPage; // 添加当前页码到数据\n\n            val.pageSizes = _this4.table.shuiqing.pageSizes; // 添加当前每页条数到数据\n\n            val.TM = _this4.dateFilter(val.TM); // 日期过滤\n\n            val.UPZ = _this4.Z_Filter(val.UPZ); // 闸阀前水深过滤\n\n            val.DWZ = _this4.Z_Filter(val.DWZ); // 闸阀后水深过滤\n\n            val.Q = _this4.Z_Filter(val.Q); // 流量过滤\n          }\n\n          if (tableType == \"hourTable\") {\n            val.currentPage = _this4.table.shuiqing.currentPage; // 添加当前页码到数据\n\n            val.pageSizes = _this4.table.shuiqing.pageSizes; // 添加当前每页条数到数据\n\n            val.DT = _this4.dateFilter(val.DT); // 日期过滤\n\n            val.A_UPZ = _this4.Z_Filter(val.A_UPZ); // 平均闸阀前水深过滤\n\n            val.A_DWZ = _this4.Z_Filter(val.A_DWZ); // 平均闸阀后水深过滤\n\n            val.A_Q = _this4.Z_Filter(val.A_Q); // 过闸平均流量过滤\n\n            val.WQ = _this4.Z_Filter(val.WQ); // 小时累计过闸水量过滤\n          }\n\n          if (tableType == \"dayTable\") {\n            val.currentPage = _this4.table.shuiqing.currentPage; // 添加当前页码到数据\n\n            val.pageSizes = _this4.table.shuiqing.pageSizes; // 添加当前每页条数到数据\n\n            val.TM = _this4.dateFilter(val.TM); // 日期过滤\n\n            val.DA_UPZ = _this4.Z_Filter(val.DA_UPZ); // 平均闸阀前水深过滤\n\n            val.DA_DWZ = _this4.Z_Filter(val.DA_DWZ); // 平均闸阀后水深过滤\n\n            val.DA_Q = _this4.Z_Filter(val.DA_Q); // 平均过闸流量过滤\n\n            val.DWQ = _this4.Z_Filter(val.DWQ); // 日累计过闸水量过滤\n          }\n\n          if (tableType == \"monthTable\") {\n            val.currentPage = _this4.table.shuiqing.currentPage; // 添加当前页码到数据\n\n            val.pageSizes = _this4.table.shuiqing.pageSizes; // 添加当前每页条数到数据\n\n            val.MA_UPZ = _this4.Z_Filter(val.MA_UPZ); // 平均闸阀前水深过滤\n\n            val.MA_DWZ = _this4.Z_Filter(val.MA_DWZ); // 平均闸阀后水深过滤\n\n            val.MA_Q = _this4.Z_Filter(val.MA_Q); // 平均过闸流量过滤\n\n            val.MWQ = _this4.Z_Filter(val.MWQ); // 月累计过闸水量过滤\n          }\n\n          return val;\n        });\n\n        if (typeof callback == \"function\") {\n          callback({\n            data: data,\n            total: res.data.total\n          });\n        }\n      });\n    },\n    // 获取特征水深表格的数据\n    getTableData_tezhengshuiqing: function getTableData_tezhengshuiqing(pageSizes, currentPage, body, callback, callback_beforeFilter) {\n      var _this5 = this;\n\n      this.axios.get(\"/guanqu/admin/ST_G_WASQORD?_page_size=\".concat(pageSizes || 20, \"&_page=\").concat(currentPage || 1), {\n        params: body\n      }).then(function (res) {\n        if (typeof callback_beforeFilter == \"function\") {\n          callback_beforeFilter({\n            data: res.data.rows || [],\n            total: res.data.total || 0\n          });\n        } // 水情数据过滤\n\n\n        var data = res.data.rows.map(function (val) {\n          val.currentPage = _this5.table.shuiqing.currentPage; // 添加数据当前页码\n\n          val.pageSizes = _this5.table.shuiqing.pageSizes; // 添加当前每页条数到数据\n\n          val.TMMXQ = _this5.dateFilter(val.TMMXQ); // 日期过滤\n\n          val.TMXQ = _this5.Z_Filter(val.TMXQ, 3); // 年最大流量\n\n          val.YMXUPQZ = _this5.Z_Filter(val.YMXUPQZ); // 对应闸前水深过滤\n\n          val.YMXDNQZ = _this5.Z_Filter(val.YMXDNQZ); // 对应闸后水深过滤\n\n          return val;\n        });\n\n        if (typeof callback == \"function\") {\n          callback({\n            data: data,\n            total: res.data.total\n          });\n        }\n      });\n    },\n    getAlarm: function getAlarm(agmt) {\n      var obj = {\n        STCD: agmt\n      };\n      this.axios.get(\"/guanqu/table/ST_Gate_Alarm\", {\n        params: obj\n      }).then(function (res) {\n        console.log('这是我写的', res);\n      });\n    },\n    // 获取特征水深预警信息表的数据\n    getTableData_tezhengshuiqing_Alarm: function getTableData_tezhengshuiqing_Alarm(body, callback, callback_beforeFilter) {\n      this.axios.get(\"/guanqu/table/ST_Gate_Alarm\", {\n        params: body\n      }).then(function (res) {\n        var data = res.data.list;\n\n        if (typeof callback_beforeFilter == \"function\") {\n          callback_beforeFilter(res);\n        } // 水情数据过滤\n\n\n        console.log('888888888888888888888', data);\n        var data = res.data.list.map(function (val) {\n          console.log(\"val\", val); // val.SZ = this.Z_Filter(val.SZ); // 预警闸前水深过滤\n          // val.EZ = this.Z_Filter(val.EZ); // 预警闸后水深\n          // val.JYSQ = this.Z_Filter(val.JYSQ); // 预警流量过滤\n          // val.JYEQ = this.Z_Filter(val.JYEZ); // 预警水深过滤\n\n          return val;\n        });\n\n        if (typeof callback == \"function\") {\n          callback(data);\n        }\n      });\n    },\n    // 更新 XX 表格的数据\n    setTableData: function setTableData(tableName, data) {\n      this.table[tableName].Rows_filter = data;\n    },\n    // 更新水情历史数据表的数据\n    setTableData_guanxiquxian: function setTableData_guanxiquxian(data) {\n      this.table.guanxiquxian.Rows_filter = data;\n    },\n    // 根据关联编号获取关联站点\n    getRelateSiteByRelateCode: function getRelateSiteByRelateCode(callback) {\n      var RELATECODE = this.info.RELATECODE;\n\n      if (RELATECODE && RELATECODE != 0) {\n        this.axios.get(\"/guanqu/admin/ST_STBPRP_B\", {\n          params: {\n            RELATECODE: RELATECODE\n          }\n        }).then(function (res) {\n          var data = res.data.rows;\n\n          if (typeof callback == \"function\") {\n            callback(data);\n          }\n        });\n      }\n    },\n    // 根据行政区划编码获取行政区划\n    getCompartmentByADDVCD: function getCompartmentByADDVCD(callback) {\n      var ADDVCD = this.info.rowinfo.ADDVCD;\n\n      if (ADDVCD && ADDVCD != \"\") {\n        this.axios.get(\"/guanqu/admin/WRP_AD_B\", {\n          params: {\n            AD_CD: ADDVCD\n          }\n        }).then(function (res) {\n          var data = res.data.rows;\n\n          if (typeof callback == \"function\") {\n            callback(data);\n          }\n        });\n      }\n    },\n    // 根据返回的total数量, 设置表格总条数 (特征水深)\n    setTableTotal_tezhengshuiqing: function setTableTotal_tezhengshuiqing(total) {\n      this.table.tezhengshuiqing.total = total;\n    },\n    // 更新特征水深数据表的数据\n    setTableData_tezhengshuiqing: function setTableData_tezhengshuiqing(data) {\n      this.table.tezhengshuiqing.Rows_filter = data;\n    },\n    // 特征水深表格查询\n    search_tezhengshuiqing: function search_tezhengshuiqing() {\n      var _this6 = this;\n\n      this.letTableLoading(\"tezhengshuiqing\"); // 表格加载中\n      // 传递站码参数\n\n      var body = {\n        STCD: this.siteInfo.STCD,\n        _page: this.table.tezhengshuiqing.currentPage,\n        _page_size: this.table.tezhengshuiqing.pageSizes\n      };\n\n      if (this.table.tezhengshuiqing.date) {\n        var YR = this.$FilterData.elDatePicker_Filter(this.table.tezhengshuiqing.date, \"maxQTable\").split(\",\");\n        body.YR_min = YR[1];\n        body.YR_max = YR[2];\n      } // 获取特征水深表格数据\n\n\n      this.$GetData.Survey_History_ZFSQ(\"maxQTable\", body, {\n        default: true,\n        myFilter: function myFilter(data) {\n          data.map(function (val) {\n            val.currentPage = body._page;\n            val.pageSizes = body._page_size;\n            return val;\n          });\n          return data;\n        }\n      }, function (data) {\n        _this6.setTableTotal(\"tezhengshuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\n\n\n        _this6.setTableData(\"tezhengshuiqing\", data.data); // 更新特征水深数据表的数据\n\n\n        _this6.cancelTableLoading(\"tezhengshuiqing\"); // 取消表格加载\n\n      });\n    },\n    // 设置特征水深预警信息数据\n    setAlarmData_tezhengshuiqing: function setAlarmData_tezhengshuiqing(data) {\n      this.table.tezhengshuiqing.alarmData = data;\n      this.info.rowinfo.YUJING_Q = data.JYQ;\n      this.info.rowinfo.YUJING_Z = data.JYZ;\n    }\n  }, _defineProperty(_methods, \"handleDatePickerChange\", function handleDatePickerChange(item) {\n    this.table.shuiqing.currentPage = 1;\n    this.search_shuiqing();\n  }), _defineProperty(_methods, \"handleDatePickerChange_tezhengshuiqing\", function handleDatePickerChange_tezhengshuiqing() {\n    this.table.tezhengshuiqing.currentPage = 1;\n    this.search_tezhengshuiqing();\n  }), _defineProperty(_methods, \"handleDatePickerChange_guanxiquxian\", function handleDatePickerChange_guanxiquxian(item) {\n    this.search_guanxiquxian();\n  }), _defineProperty(_methods, \"setTableDate\", function setTableDate(tableName, val) {\n    this.table[tableName].date = val;\n  }), _defineProperty(_methods, \"sort_change_shuiqing\", function sort_change_shuiqing(item) {\n    this.table.shuiqing.sort = item;\n    this.search_shuiqing();\n  }), _methods),\n  mounted: function mounted() {\n    var _this7 = this;\n\n    // 组件加载中\n    this.componentLoading(); // 获取详情数据\n\n    console.log(this.info.rowinfo.STCD);\n    this.axios.get(\"/guanqu/table/details?ID=\".concat(this.info.rowinfo.STCD, \"&pk=STCD\")).then(function (res) {\n      //获取预警数据\n      // this.axios.get('/guanqu/table/ST_Gate_Alarm?STCD='+res.data.STCD).then(res =>{\n      //   this.yujingdata = res.data.rows[0];\n      //   this.yujingdata.SZ = this.Z_Filter(this.yujingdata.SZ);\n      //   this.yujingdata.EZ = this.Z_Filter(this.yujingdata.EZ);\n      //   this.yujingdata.Q = this.Z_Filter(this.yujingdata.Q,3);\n      // });\n      // 根据行政区划码获取行政区划名\n      _this7.getCompartmentByADDVCD(function (data) {\n        _this7.siteInfo.AD_NM = data[0].AD_NM;\n      }); // 根据河流编码获取河流名\n\n\n      _this7.$GetData.Base_R_I({\n        RVCD: _this7.info.rowinfo.RVCD\n      }, true, function (data) {\n        _this7.siteInfo.RVCD = data.data[0].RVNM;\n      }); // 根据流域编码获取流域名\n\n\n      _this7.$GetData.Base_B_I({\n        CTCD: _this7.info.rowinfo.CTCD\n      }, true, function (data) {\n        _this7.siteInfo.CTCD = data.data[0].CTNM;\n      }); //获取近5年时间\n\n\n      var newdate = new Array();\n      var end = new Date();\n      var start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\n      newdate[0] = start;\n      newdate[1] = end;\n      _this7.table.tezhengshuiqing.date = newdate; // 加载站点数据\n\n      _this7.loadSiteData(res.data); // 加载取消\n\n\n      _this7.cancelComponentLoading(); // 水情数据\n\n\n      _this7.tableTypeOnChange_shuiqing(_this7.info.rowinfo.tableType.zfsq); // 设置 默认的水情历史数据表\n      // 关系曲线\n\n\n      _this7.search_guanxiquxian(); // 特征水深最大流量表数据\n\n\n      _this7.search_tezhengshuiqing();\n\n      _this7.getAlarm(_this7.info.rowinfo.STCD); // 特征水深预警信息表数据\n      // this.getTableData_tezhengshuiqing_Alarm(\n      //   {\n      //     STCD: this.siteInfo.STCD\n      //   },\n      //   data => {\n      //     this.setAlarmData_tezhengshuiqing(data[0]);\n      //   }\n      // );\n\n    });\n  }\n};",{"version":3,"sources":["Details-zhafashuiqing.vue"],"names":[],"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","sourcesContent":["<template>\r\n    <div v-loading=\"boxLoading\">\r\n        <el-tabs v-model=\"activeName\" type=\"border-card\">\r\n            <!-- 站点信息 -->\r\n            <el-tab-pane name=\"zhandianxinxi\">\r\n        <span slot=\"label\">\r\n          <i class=\"el-icon-tickets\"></i> 站点信息\r\n        </span>\r\n                <div class=\"drawer-profile\">\r\n                    <!-- 导出按钮 -->\r\n                    <Button size=\"small\" class=\"outPutButton\" type=\"success\" @click=\"$App.developing_tip\">\r\n                        <div>导出</div>\r\n                    </Button>\r\n                    <!-- 信息表 -->\r\n                    <div>\r\n                        <!-- 信息内容 -->\r\n                        <div>\r\n                            <!-- table start -->\r\n                            <table style=\"border: 1px solid #EBEEF5\" border cellspacing=\"0\" width=\"100%\"\r\n                                   class=\"table_detail\">\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">站名：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-right: 1px solid #EBEEF5\">{{\r\n                                        siteInfo.STNM || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">国家定类：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ this.STTP_Filter(siteInfo.STTP) || \"&nbsp;\"\r\n                                        }}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">等级：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-right: 1px solid #EBEEF5\">{{\r\n                                        this.$FilterData.STGR_Filter(siteInfo.STGR) || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">行政区划：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.AD_NM || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">经度：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-right: 1px solid #EBEEF5\">{{\r\n                                        siteInfo.LGTD || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">纬度：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.LTTD || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">站址：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-right: 1px solid #EBEEF5\">{{\r\n                                        siteInfo.STLC || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">水系：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.HNNM || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">流域：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-right: 1px solid #EBEEF5\">{{\r\n                                        siteInfo.CTCD || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">河流：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.RVCD || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\">建站日期：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-right: 1px solid #EBEEF5\">{{\r\n                                        siteInfo.ESSTDT || \"&nbsp;\" }}\r\n                                    </td>\r\n                                    <td align=\"right\" class=\"dt_name\">建设单位：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\">{{ siteInfo.DLOG || \"&nbsp;\" }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td align=\"right\" class=\"dt_name\" style=\"border-bottom: none\">录入时间：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\"\r\n                                        style=\"border-right: 1px solid #EBEEF5;border-bottom: none\"></td>\r\n                                    <td align=\"right\" class=\"dt_name\" style=\"border-bottom: none\">图像按钮：</td>\r\n                                    <td align=\"center\" class=\"dt_vale\" style=\"border-bottom: none\">\r\n                                        <Button type=\"info\" @click=\"$App.developing_tip\" size=\"small\">查看图片</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                            <!-- table end -->\r\n\r\n\r\n                            <!-- <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">站名：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.STNM || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">国家定类：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ this.STTP_Filter(siteInfo.STTP) || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">等级：</Col>\r\n                              <Col\r\n                                span=\"7\"\r\n                                align=\"center\"\r\n                              >{{ this.$FilterData.STGR_Filter(siteInfo.STGR) || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">行政区划：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.AD_NM || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">经度：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.LGTD || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">纬度：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.LTTD || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">站址：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.STLC || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">水系：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.HNNM || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">流域：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.CTCD || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">河流：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.RVCD || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">建站日期：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.ESSTDT || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">建设单位：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.DLOG || \"&nbsp;\" }}</Col>\r\n                            </Row>\r\n                            <Row class=\"row\">\r\n                              <Col span=\"5\" align=\"right\">隶属单位：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.ATCUNIT || \"&nbsp;\" }}</Col>\r\n                              <Col span=\"5\" align=\"right\">管理单位：</Col>\r\n                              <Col span=\"7\" align=\"center\">{{ siteInfo.DLOG || \"&nbsp;\" }}</Col>\r\n                            </Row>-->\r\n                            <!--              <Row class=\"row\">-->\r\n                            <!--                <Col span=\"5\" align=\"right\">录入时间：</Col>-->\r\n                            <!--                <Col-->\r\n                            <!--                  span=\"7\"-->\r\n                            <!--                  align=\"center\"-->\r\n                            <!--                >{{ this.$FilterData.dateFilter(siteInfo.MODITIME,8) || \"&nbsp;\" }}</Col>-->\r\n                            <!--                <Col span=\"5\" align=\"right\">图像按钮：</Col>-->\r\n                            <!--                <Col span=\"12\" align=\"center\" style=\"border-right: 1px solid rgb(200, 200, 200); \">-->\r\n                            <!--                  <Button type=\"info\" @click=\"$App.developing_tip\" size=\"small\">查看图片</Button>-->\r\n                            <!--                </Col>-->\r\n                            <!--              </Row>-->\r\n\r\n                        </div>\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                        <Row>\r\n                            <el-col class=\"dt_remark\">\r\n                                <Col span=\"24\">备注：{{ siteInfo.COMMENTS || \"&nbsp;\" }}</Col>\r\n                            </el-col>\r\n                        </Row>\r\n                    </div>\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n                    <!-- 关联渠道和闸门 -->\r\n                    <div>\r\n                        <!-- <Row class=\"relationRow\">\r\n                          <Col span=\"4\">关联要素</Col>\r\n                          <Col span=\"20\">\r\n                            <Button\r\n                              @click=\"$App.developing_tip\"\r\n                              v-for=\"item in siteInfo.GUANLIAN\"\r\n                            >{{ item.SLNM }}</Button>\r\n                            <div v-if=\"siteInfo.GUANLIAN && siteInfo.GUANLIAN.length == 0\">暂无此站点的关联要素</div>\r\n                          </Col>\r\n                        </Row> -->\r\n                        <el-col style=\"border: 1px #EBEEF5 solid;border-radius: 2px;padding-left: 10px;padding-bottom: 20px\">\r\n                            <Row class=\"relationRow\">\r\n                                <Col span=\"4\">同时监测：</Col>\r\n                                <Col span=\"20\">\r\n                                    <!-- <Button\r\n                                      @click=\"$App.developing_tip\"\r\n                                      v-for=\"item in siteInfo.GUANLIAN\"\r\n                                    >{{ item.SLNM }}</Button> -->\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row class=\"relationRow\">\r\n                                <Col span=\"4\">关联站点：</Col>\r\n                                <Col span=\"20\">\r\n                                    <!-- <Button\r\n                                      @click=\"$App.developing_tip\"\r\n                                      v-for=\"item in siteInfo.GUANLIAN\"\r\n                                    >{{ item.SLNM }}</Button> -->\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row class=\"relationRow\">\r\n                                <Col span=\"4\">关联要素：</Col>\r\n                                <Col span=\"20\">\r\n                                    <!-- <Button\r\n                                      @click=\"$App.developing_tip\"\r\n                                      v-for=\"item in siteInfo.GUANLIAN\"\r\n                                    >{{ item.SLNM }}</Button> -->\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                        </el-col>\r\n\r\n                    </div>\r\n                </div>\r\n            </el-tab-pane>\r\n            <!-- 水情数据 -->\r\n            <el-tab-pane name=\"shuiqingshuju\">\r\n        <span slot=\"label\">\r\n          <Icon type=\"ios-water-outline\" style=\"font-size:20px\"/>水情数据\r\n        </span>\r\n                <div class=\"drawer-profile\">\r\n                    <!-- 导出按钮 -->\r\n                    <Button size=\"small\" class=\"outPutButton\" type=\"success\" @click=\"$App.developing_tip\">\r\n                        <div>导出</div>\r\n                    </Button>\r\n                    <div>\r\n\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                        <!-- 选项卡 -->\r\n                        <Tabs type=\"card\">\r\n                            <!-- 表格 -->\r\n                            <TabPane label=\"表格\">\r\n                                <!-- 查询，导出行 -->\r\n                                <Row :gutter=\"16\" type=\"flex\" justify=\"end\" align=\"middle\">\r\n                                    <Col span=\"2\">\r\n                                        <span style=\"letter-spacing:2px\">查询</span>\r\n                                    </Col>\r\n                                    <!-- 开始到结束时间选择 -->\r\n                                    <Col span=\"19\">\r\n                                        <el-date-picker\r\n                                                v-model=\"table.shuiqing.date\"\r\n                                                range-separator=\"至\"\r\n                                                start-placeholder=\"开始日期\"\r\n                                                end-placeholder=\"结束日期\"\r\n                                                @change=\"handleDatePickerChange\"\r\n                                                :picker-options=\"table.shuiqing.datePickerOptions[select.shuiqing_select]\"\r\n                                                unlink-panels\r\n                                                :type=\"table.shuiqing.datePickerType\"\r\n                                                size=\"mini\"\r\n                                                style=\"min-width: 360px\"\r\n                                        ></el-date-picker>\r\n                                    </Col>\r\n                                </Row>\r\n                                <!-- 分割线 -->\r\n                                <div class=\"divider\"></div>\r\n                                <Row :gutter=\"16\" type=\"flex\" justify=\"end\" align=\"middle\">\r\n                                    <Col span=\"8\">\r\n                                        预警闸阀前水深:{{$FilterData.Float_Filter(info.rowinfo.YUJING_SZ)}} m\r\n                                    </Col>\r\n                                    <Col span=\"8\">\r\n                                        预警闸阀后水深:{{$FilterData.Float_Filter(info.rowinfo.YUJING_EZ)}} m\r\n                                    </Col>\r\n                                    <Col span=\"8\">\r\n                                        预警流量:{{$FilterData.Float_Filter(info.rowinfo.YUJING_Q, 3)}} m³/s\r\n                                    </Col>\r\n                                </Row>\r\n                                <!-- 分割线 -->\r\n                                <div class=\"divider\"></div>\r\n                                <!-- 表格用于展示数据 -->\r\n                                <div>\r\n                                    <Table\r\n                                            :columns=\"table.shuiqing.activeColumns\"\r\n                                            :data=\"table.shuiqing.Rows_filter\"\r\n                                            :loading=\"table.shuiqing.loading\"\r\n                                            border\r\n                                            size=\"small\"\r\n                                            :height=\"table.shuiqing.height\"\r\n                                            @on-sort-change=\"sort_change_shuiqing\"\r\n                                    ></Table>\r\n                                    <!-- 分割线 -->\r\n                                    <div class=\"divider\"></div>\r\n                                    <!-- 分页器 -->\r\n                                    <el-pagination\r\n                                            background\r\n                                            :page-size=\"table.shuiqing.pageSizes\"\r\n                                            layout=\"sizes, total, prev, pager, next, jumper \"\r\n                                            :page-sizes=\"[20, 50, 100, 200]\"\r\n                                            :total=\"table.shuiqing.total\"\r\n                                            :pager-count=\"5\"\r\n                                            :current-page=\"table.shuiqing.currentPage\"\r\n                                            @current-change=\"handleCurrentChange_shuiqing\"\r\n                                            @size-change=\"handleSizeChange_shuiqing\"\r\n                                            class=\"pageController\"\r\n                                            small\r\n                                    ></el-pagination>\r\n                                    <!-- 分割线 -->\r\n                                    <div class=\"divider\"></div>\r\n                                </div>\r\n                            </TabPane>\r\n                            <TabPane label=\"图形\">\r\n                                <!-- 绘图 -->\r\n                                <div\r\n                                        v-show=\"table.shuiqing.Rows_filter.length > 0\"\r\n                                        id=\"shuiqingChart\"\r\n                                        :style=\"{width: '500px', height: '350px',margin: 'auto'}\"\r\n                                ></div>\r\n                                <div\r\n                                        v-if=\"table.shuiqing.Rows_filter.length == 0\"\r\n                                        :style=\"{width: '500px', height: '350px',margin: 'auto', display:'flex', alignItems:'center', justifyContent: 'center'}\"\r\n                                >暂无数据\r\n                                </div>\r\n                            </TabPane>\r\n                            <!-- 历史表选择框 -->\r\n                            <Select\r\n                                    @on-change=\"tableTypeOnChange_shuiqing\"\r\n                                    prefix=\"ios-calendar-outline\"\r\n                                    v-model=\"select.shuiqing_select\"\r\n                                    slot=\"extra\"\r\n                            >\r\n                                <Option\r\n                                        v-for=\"item in select.shuiqingList\"\r\n                                        :label=\"item.label\"\r\n                                        :value=\"item.value\"\r\n                                        :key=\"item.value\"\r\n                                ></Option>\r\n                            </Select>\r\n                        </Tabs>\r\n                    </div>\r\n                </div>\r\n            </el-tab-pane>\r\n            <!-- 关系曲线 -->\r\n            <el-tab-pane name=\"guanxiquxian\">\r\n        <span slot=\"label\">\r\n          <Icon type=\"md-trending-up\" style=\"font-size:20px\"/>关系曲线\r\n        </span>\r\n                <div class=\"drawer-profile\">\r\n                    <!-- 导出按钮 -->\r\n                    <Button size=\"small\" class=\"outPutButton\" type=\"success\" @click=\"$App.developing_tip\">\r\n                        <div>导出</div>\r\n                    </Button>\r\n                    <Tabs type=\"card\">\r\n                        <TabPane label=\"表格\">\r\n                            <!-- 查询&换算 -->\r\n                            <Row class=\"row\" :gutter=\"16\" type=\"flex\" align=\"end\">\r\n                                <Col span=\"24\">\r\n                                    <Row :gutter=\"8\">\r\n                                        <Col span=\"6\">\r\n                                            <span>水深：</span>\r\n                                            <Input\r\n                                                    v-model=\"input.huansuan.waterLever\"\r\n                                                    placeholder=\"水深 m\"\r\n                                                    class=\"huansuanInput\"\r\n                                                    size=\"small\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col span=\"6\">\r\n                                            <span>流量：</span>\r\n                                            <Input\r\n                                                    v-model=\"input.huansuan.flowLever\"\r\n                                                    placeholder=\"流量m³/s\"\r\n                                                    class=\"huansuanInput\"\r\n                                                    size=\"small\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col span=\"8\">\r\n                                            <span>闸门开度：</span>\r\n                                            <Input\r\n                                                    v-model=\"input.huansuan.ODLever\"\r\n                                                    placeholder=\"闸门 m\"\r\n                                                    class=\"huansuanInput\"\r\n                                                    size=\"small\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col span=\"4\">\r\n                                            <Button type=\"success\" size=\"small\" @click=\"$App.developing_tip\">换算</Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                            <!-- 分割线 -->\r\n                            <!-- <div class=\"divider\"></div> -->\r\n                            <div class=\"divider\"></div>\r\n                            <!-- 表格用于展示数据 -->\r\n                            <div>\r\n                                <Table\r\n                                        :columns=\"table.guanxiquxian.columns\"\r\n                                        :data=\"table.guanxiquxian.Rows_filter\"\r\n                                        :loading=\"table.guanxiquxian.loading\"\r\n                                        border\r\n                                        size=\"small\"\r\n                                        :height=\"table.guanxiquxian.height\"\r\n                                ></Table>\r\n                                <!-- 分割线 -->\r\n                                <div class=\"divider\"></div>\r\n                                <!-- 分页器 -->\r\n                                <el-pagination\r\n                                        background\r\n                                        :page-size=\"20\"\r\n                                        layout=\"total, prev, pager, next, jumper\"\r\n                                        :total=\"table.guanxiquxian.total\"\r\n                                        :pager-count=\"5\"\r\n                                        :current-page=\"table.guanxiquxian.currentPage\"\r\n                                        @current-change=\"handleCurrentChange_guanxiquxian\"\r\n                                        @size-change=\"handleSizeChange_guanxiquxian\"\r\n                                        class=\"pageController\"\r\n                                        small\r\n                                ></el-pagination>\r\n                            </div>\r\n                            <!-- 分割线 -->\r\n                            <div class=\"divider\"></div>\r\n                        </TabPane>\r\n                        <TabPane label=\"图形\">\r\n                            <!-- 查询&换算 -->\r\n                            <Row class=\"row\" :gutter=\"16\" type=\"flex\" align=\"end\">\r\n                                <Col span=\"24\">\r\n                                    <Row :gutter=\"8\">\r\n                                        <Col span=\"6\">\r\n                                            <span>水深：</span>\r\n                                            <Input\r\n                                                    v-model=\"input.huansuan.waterLever\"\r\n                                                    placeholder=\"水深 m\"\r\n                                                    class=\"huansuanInput\"\r\n                                                    size=\"small\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col span=\"6\">\r\n                                            <span>流量：</span>\r\n                                            <Input\r\n                                                    v-model=\"input.huansuan.flowLever\"\r\n                                                    placeholder=\"流量m³/s\"\r\n                                                    class=\"huansuanInput\"\r\n                                                    size=\"small\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col span=\"8\">\r\n                                            <span>闸门开度：</span>\r\n                                            <Input\r\n                                                    v-model=\"input.huansuan.ODLever\"\r\n                                                    placeholder=\"闸门 m\"\r\n                                                    class=\"huansuanInput\"\r\n                                                    size=\"small\"\r\n                                            />\r\n                                        </Col>\r\n                                        <Col span=\"4\">\r\n                                            <Button type=\"success\" size=\"small\" @click=\"$App.developing_tip\">换算</Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                            <!-- 绘图 -->\r\n                            <div id=\"guanxiChart\" :style=\"{width: '500px', height: '350px',margin: 'auto'}\"></div>\r\n                        </TabPane>\r\n                    </Tabs>\r\n                </div>\r\n            </el-tab-pane>\r\n            <!-- 特征水深 -->\r\n            <el-tab-pane label=\"特征水深\" name=\"tezhengshuiqing\">\r\n        <span slot=\"label\">\r\n          <Icon type=\"ios-speedometer-outline\" style=\"font-size:20px\"/>特征水深\r\n        </span>\r\n                <div class=\"drawer-profile\">\r\n                    <!-- 指标信息 -->\r\n                    <div>\r\n                        <Row class=\"row\">\r\n                            <Col span=\"6\" align=\"right\">预警闸前水深：</Col>\r\n                            <Col span=\"6\" align=\"center\">{{ `${$FilterData.Float_Filter(info.rowinfo.YUJING_SZ)}m` || \"&nbsp;\"\r\n                                }}\r\n                            </Col>\r\n                            <Col span=\"6\" align=\"right\">预警闸后水深：</Col>\r\n                            <Col span=\"6\" align=\"center\">{{ `${$FilterData.Float_Filter(info.rowinfo.YUJING_EZ)}m` || \"&nbsp;\"\r\n                                }}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row class=\"row last_row\">\r\n                            <Col span=\"6\" align=\"right\">经验预警闸前水深：</Col>\r\n                            <Col span=\"6\" align=\"center\">{{ `${$FilterData.Float_Filter(info.rowinfo.YUJING_JYSZ)}m` ||\r\n                                \"&nbsp;\" }}\r\n                            </Col>\r\n                            <Col span=\"6\" align=\"right\">经验预警闸后水深：</Col>\r\n                            <Col span=\"6\" align=\"center\">{{ `${$FilterData.Float_Filter(info.rowinfo.YUJING_JYEZ)}m` ||\r\n                                \"&nbsp;\" }}\r\n                            </Col>\r\n                        </Row>\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                    </div>\r\n                    <!-- 导出按钮 -->\r\n                    <Button size=\"small\" class=\"outPutButton\" type=\"success\" @click=\"$App.developing_tip\">\r\n                        <div>导出</div>\r\n                    </Button>\r\n\r\n                    <!-- 查询，导出行 -->\r\n                    <Row :gutter=\"16\" type=\"flex\" align=\"center\">\r\n                        <Col span=\"2\">\r\n                            <span style=\"letter-spacing:2px\">查询</span>\r\n                        </Col>\r\n                        <!-- 开始到结束时间选择 -->\r\n                        <Col span=\"15\">\r\n                            <el-date-picker\r\n                                    v-model=\"table.tezhengshuiqing.date\"\r\n                                    range-separator=\"至\"\r\n                                    start-placeholder=\"开始日期\"\r\n                                    end-placeholder=\"结束日期\"\r\n                                    @change=\"handleDatePickerChange_tezhengshuiqing\"\r\n                                    :picker-options=\"table.tezhengshuiqing.datePickerOptions\"\r\n                                    unlink-panels\r\n                                    type=\"daterange\"\r\n                                    size=\"mini\"\r\n                            ></el-date-picker>\r\n                        </Col>\r\n                        <Col span=\"3\"></Col>\r\n                    </Row>\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n\r\n                    <!-- 表格用于展示数据 -->\r\n                    <div>\r\n                        <Table\r\n                                :columns=\"table.tezhengshuiqing.columns\"\r\n                                :data=\"table.tezhengshuiqing.Rows_filter\"\r\n                                :loading=\"table.tezhengshuiqing.loading\"\r\n                                border\r\n                                size=\"small\"\r\n                                :height=\"table.tezhengshuiqing.height\"\r\n                        ></Table>\r\n                        <!-- 分割线 -->\r\n                        <div class=\"divider\"></div>\r\n                        <!-- 分页器 -->\r\n                        <el-pagination\r\n                                background\r\n                                :page-size=\"table.tezhengshuiqing.pageSizes\"\r\n                                layout=\"sizes, total, prev, pager, next, jumper \"\r\n                                :page-sizes=\"[20, 50, 100, 200]\"\r\n                                :total=\"table.tezhengshuiqing.total\"\r\n                                :pager-count=\"5\"\r\n                                :current-page=\"table.tezhengshuiqing.currentPage\"\r\n                                @current-change=\"handleCurrentChange_tezhengshuiqing\"\r\n                                @size-change=\"handleSizeChange_tezhengshuiqing\"\r\n                                class=\"pageController\"\r\n                                small\r\n                        ></el-pagination>\r\n                    </div>\r\n                    <!-- 分割线 -->\r\n                    <div class=\"divider\"></div>\r\n                </div>\r\n            </el-tab-pane>\r\n        </el-tabs>\r\n\r\n        <!-- 导出提示对话框 -->\r\n        <Modal\r\n                v-model=\"outPutModal\"\r\n                v-loading=\"outPutLoading\"\r\n                title=\"关于导出\"\r\n                @on-ok=\"outPutSure\"\r\n                @on-cancel\r\n        >\r\n            <p>您确认导出该站点的信息表吗？</p>\r\n        </Modal>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n    import FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\r\n    import GetDataMethods from \"../../assets/commonJS/GetDataMethods\"; // 获取数据方法\r\n    import {timingSafeEqual} from \"crypto\";\r\n\r\n    export default {\r\n        props: {\r\n            info: {}\r\n        },\r\n        data() {\r\n            return {\r\n                // 激活标签栏\r\n                activeName: \"shuiqingshuju\",\r\n                // 站点\r\n                siteInfo: {},\r\n                //   多选框对象\r\n                checkBox: {},\r\n                //   选择框对象\r\n                select: {\r\n                    // 水情数据快速查询\r\n                    quickSearch: {\r\n                        historyTable: [\r\n                            {\r\n                                value: 0,\r\n                                label: \"全部\"\r\n                            },\r\n                            {\r\n                                value: 6,\r\n                                label: \"最近6小时\"\r\n                            },\r\n                            {\r\n                                value: 12,\r\n                                label: \"最近12小时\"\r\n                            },\r\n                            {\r\n                                value: 24,\r\n                                label: \"最近24小时\"\r\n                            },\r\n                            {\r\n                                value: 36,\r\n                                label: \"最近36小时\"\r\n                            },\r\n                            {\r\n                                value: 72,\r\n                                label: \"最近72小时\"\r\n                            }\r\n                        ],\r\n                        hourTable: [\r\n                            {\r\n                                value: 0,\r\n                                label: \"全部\"\r\n                            },\r\n                            {\r\n                                value: 6,\r\n                                label: \"最近6小时\"\r\n                            },\r\n                            {\r\n                                value: 12,\r\n                                label: \"最近12小时\"\r\n                            },\r\n                            {\r\n                                value: 24,\r\n                                label: \"最近24小时\"\r\n                            },\r\n                            {\r\n                                value: 36,\r\n                                label: \"最近36小时\"\r\n                            },\r\n                            {\r\n                                value: 72,\r\n                                label: \"最近72小时\"\r\n                            }\r\n                        ],\r\n                        dayTable: [\r\n                            {\r\n                                value: 0,\r\n                                label: \"全部\"\r\n                            },\r\n                            {\r\n                                value: 10,\r\n                                label: \"最近10天\"\r\n                            },\r\n                            {\r\n                                value: 15,\r\n                                label: \"最近15天\"\r\n                            },\r\n                            {\r\n                                value: 30,\r\n                                label: \"最近30天\"\r\n                            },\r\n                            {\r\n                                value: 60,\r\n                                label: \"最近60天\"\r\n                            },\r\n                            {\r\n                                value: 90,\r\n                                label: \"最近90天\"\r\n                            }\r\n                        ],\r\n                        monthTable: []\r\n                    },\r\n                    // 当前激活的水情数据快速查询选项\r\n                    activeQuickSearchList: [],\r\n                    // 查询绑定值\r\n                    select: \"rec6\",\r\n                    // 水情数据历史表\r\n                    shuiqingList: [\r\n                        {\r\n                            value: \"historyTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"历史表\"\r\n                        },\r\n                        {\r\n                            value: \"hourTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"小时表\"\r\n                        },\r\n                        {\r\n                            value: \"dayTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"日表\"\r\n                        },\r\n                        {\r\n                            value: \"monthTable\",\r\n                            size: \"small\",\r\n                            // iconType: \"logo-facebook\",\r\n                            label: \"月表\"\r\n                        }\r\n                    ],\r\n                    // 水情数据历史表绑定值\r\n                    shuiqing_select: \"historyTable\"\r\n                },\r\n                // 表格数据\r\n                table: {\r\n                    // 水情\r\n                    shuiqing: {\r\n                        // 表头设置\r\n                        columns: {\r\n                            // 历史表\r\n                            historyTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 60,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n                                        return index;\r\n                                    }\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"TM\",\r\n                                    width: 150,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"闸前水深(m)\",\r\n                                    width: 140,\r\n                                    key: \"UPZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"闸后水深(m)\",\r\n                                    width: 140,\r\n                                    key: \"DWZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 120,\r\n                                    title: \"流量(m³/s)\",\r\n                                    key: \"Q\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 小时表\r\n                            hourTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"dt\",\r\n                                    width: 150,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"平均闸前水深(m)\",\r\n                                    width: 150,\r\n                                    key: \"A_UPZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"平均阀后水深(m)\",\r\n                                    width: 150,\r\n                                    key: \"A_DWZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 160,\r\n                                    title: \"平均过闸流量(m³/s)\",\r\n                                    key: \"A_Q\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 180,\r\n                                    title: \"小时累计过闸水量(m³)\",\r\n                                    key: \"WQ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 日表\r\n                            dayTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"时间\",\r\n                                    key: \"tm\",\r\n                                    width: 150,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"平均闸前水深(m)\",\r\n                                    width: 150,\r\n                                    key: \"DA_UPZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"平均闸后水深(m)\",\r\n                                    width: 150,\r\n                                    key: \"DA_DWZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 160,\r\n                                    title: \"平均过闸流量(m³/s)\",\r\n                                    key: \"DA_Q\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 170,\r\n                                    title: \"日累计过闸水量(m³)\",\r\n                                    key: \"DWQ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ],\r\n                            // 月表\r\n                            monthTable: [\r\n                                {\r\n                                    title: \" \",\r\n                                    type: \"index\",\r\n                                    width: 50,\r\n                                    align: \"center\",\r\n                                    // 自定义序号\r\n                                    indexMethod(item) {\r\n                                        var index =\r\n                                            item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                        return index;\r\n                                    },\r\n                                    ellipsis: true\r\n                                },\r\n                                {\r\n                                    title: \"年份\",\r\n                                    key: \"dt\",\r\n                                    width: 110,\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    title: \"平均闸前水深(m)\",\r\n                                    width: 150,\r\n                                    key: \"MA_UPZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 150,\r\n                                    title: \"平均闸后水深(m)\",\r\n                                    key: \"MA_DWZ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 160,\r\n                                    title: \"平均过闸流量(m³/s)\",\r\n                                    key: \"MA_Q\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                },\r\n                                {\r\n                                    width: 180,\r\n                                    title: \"月累计过闸水量(m³/s)\",\r\n                                    key: \"MWQ\",\r\n                                    align: \"center\",\r\n                                    sortable: \"custom\"\r\n                                }\r\n                            ]\r\n                        },\r\n                        // 正在激活的表头\r\n                        activeColumns: [],\r\n                        // 表体内容\r\n                        Rows: [],\r\n                        // 过滤后的表体内容\r\n                        Rows_filter: [],\r\n                        // 日期时间选择器的选项配置\r\n                        datePickerOptions: {\r\n                            historyTable: {\r\n                                shortcuts: [\r\n                                    {\r\n                                        text: \"最近6小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 6);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近12小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 12);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近24小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近36小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 36);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近72小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 72);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            hourTable: {\r\n                                shortcuts: [\r\n                                    {\r\n                                        text: \"最近6小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 6);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近12小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 12);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近24小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近36小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 36);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近72小时\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 72);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            dayTable: {\r\n                                shortcuts: [\r\n                                    {\r\n                                        text: \"最近10天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 10);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近15天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 15);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近30天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近60天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 60);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        text: \"最近90天\",\r\n                                        onClick(picker) {\r\n                                            const end = new Date();\r\n                                            const start = new Date();\r\n                                            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\r\n                                            picker.$emit(\"pick\", [start, end]);\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            },\r\n                            monthTable: {\r\n                                shortcuts: []\r\n                            }\r\n                        },\r\n                        // 日期时间选择器类型\r\n                        datePickerType: \"datetimerange\",\r\n                        // 日期时间选择器值\r\n                        date: null,\r\n                        // 排序\r\n                        sort: null,\r\n                        // 表格是否加载中\r\n                        loading: false,\r\n                        // 总条数\r\n                        total: 0,\r\n                        // 当前页\r\n                        currentPage: 1,\r\n                        // 每页显示数量\r\n                        pageSizes: 20,\r\n                        // 表格高度\r\n                        height: 430\r\n                    },\r\n                    // 关系曲线\r\n                    guanxiquxian: {\r\n                        // 表头设置\r\n                        columns: [\r\n                            {\r\n                                title: \" \",\r\n                                type: \"index\",\r\n                                width: 50,\r\n                                align: \"center\",\r\n                                // 自定义序号\r\n                                indexMethod(item) {\r\n                                    var index =\r\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                    return index;\r\n                                },\r\n                                ellipsis: true\r\n                            },\r\n                            {\r\n                                title: \"流量(m³/s)\",\r\n                                key: \"Q\",\r\n                                align: \"center\",\r\n                                width: 100\r\n                            },\r\n                            {\r\n                                title: \"闸门开度\",\r\n                                // width: 100,\r\n                                key: \"OD\",\r\n                                align: \"center\"\r\n                            },\r\n\r\n                            {\r\n                                width: 100,\r\n                                title: \"闸前水深\",\r\n                                key: \"UPZ\",\r\n                                align: \"center\"\r\n                            },\r\n                            {\r\n                                width: 100,\r\n                                title: \"闸后水深\",\r\n                                key: \"DWZ\",\r\n                                align: \"center\"\r\n                            }\r\n                        ],\r\n                        // 表体内容\r\n                        Rows: [],\r\n                        // 过滤后的表体内容\r\n                        Rows_filter: [],\r\n                        // 表格是否加载中\r\n                        loading: false,\r\n                        // 日期时间选择器值\r\n                        date: null,\r\n                        // 总条数\r\n                        total: 0,\r\n                        // 当前页\r\n                        currentPage: 1,\r\n                        // 每页显示数量\r\n                        pageSizes: 20,\r\n                        // 表格高度\r\n                        height: 440,\r\n                    },\r\n                    // 特征水深\r\n                    tezhengshuiqing: {\r\n                        // 表头设置\r\n                        columns: [\r\n                            {\r\n                                title: \" \",\r\n                                type: \"index\",\r\n                                width: 50,\r\n                                align: \"center\",\r\n                                // 自定义序号\r\n                                indexMethod(item) {\r\n                                    var index =\r\n                                        item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                                    return index;\r\n                                },\r\n                                ellipsis: true\r\n                            },\r\n\r\n                            {\r\n                                title: \"最大流量时间\",\r\n                                width: 130,\r\n                                key: \"TMMXQ\",\r\n                                align: \"center\",\r\n                                sortable: \"custom\"\r\n                            },\r\n                            {\r\n                                title: \"年最大流量(m³/s)\",\r\n                                key: \"TMXQ\",\r\n                                align: \"center\",\r\n                                width: 150,\r\n                                sortable: \"custom\"\r\n                            },\r\n                            {\r\n                                width: 150,\r\n                                title: \"对应闸前水深(m)\",\r\n                                key: \"YMXUPQZ\",\r\n                                align: \"center\",\r\n                                sortable: \"custom\"\r\n                            },\r\n                            {\r\n                                width: 150,\r\n                                title: \"对应闸后水深(m)\",\r\n                                key: \"YMXDNQZ\",\r\n                                align: \"center\",\r\n                                sortable: \"custom\"\r\n                            }\r\n                        ],\r\n                        // 表体内容\r\n                        Rows: [],\r\n                        // 过滤后的表体内容\r\n                        Rows_filter: [],\r\n                        // 表格是否加载中\r\n                        loading: false,\r\n                        // 当前页\r\n                        currentPage: 1,\r\n                        // 总条数\r\n                        total: 0,\r\n                        // 表格是否加载中\r\n                        loading: false,\r\n                        // 当前页\r\n                        currentPage: 1,\r\n                        // 日期时间选择器值\r\n                        date: null,\r\n                        // 日期时间选择器的选项配置\r\n                        datePickerOptions: {\r\n                            shortcuts: [\r\n                                {\r\n                                    text: \"最近5年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                },\r\n                                {\r\n                                    text: \"最近3年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 3);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                },\r\n                                {\r\n                                    text: \"最近2年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 2);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                },\r\n                                {\r\n                                    text: \"最近1年\",\r\n                                    onClick(picker) {\r\n                                        const end = new Date();\r\n                                        const start = new Date();\r\n                                        start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 1);\r\n                                        picker.$emit(\"pick\", [start, end]);\r\n                                    }\r\n                                }\r\n                            ]\r\n                        },\r\n                        // 表格高度\r\n                        height: 400,\r\n                        // 每页显示数量\r\n                        pageSizes: 20,\r\n                        alarmData: {\r\n                            SQ: \"\", // 预警闸前水深\r\n                            EQ: \"\", // 预警闸后水深\r\n                            JYSQ: \"\", // 经验预警闸前水深\r\n                            JYEQ: \"\" // 经验预警闸后水深\r\n                        }\r\n                    }\r\n                },\r\n                // 图形\r\n                chart: {\r\n                    shuiqing: null\r\n                },\r\n                //   日期数据\r\n                date: {\r\n                    shuiqing: \"\"\r\n                },\r\n                // 输入框对象\r\n                input: {\r\n                    // 关系曲线换算的\r\n                    huansuan: {\r\n                        waterLever: \"\",\r\n                        flowLever: \"\"\r\n                    }\r\n                },\r\n                //   导出按钮加载控制\r\n                outPutLoading: false,\r\n                //   导出确认对话框控制\r\n                outPutModal: false,\r\n                // 整块区域的加载控制\r\n                boxLoading: true,\r\n                //预警数据\r\n                yujingdata: {},\r\n            };\r\n        },\r\n        mixins: [FilterMethods, GetDataMethods],\r\n        methods: {\r\n            //   导出站点信息\r\n            outPutSiteInfo() {\r\n                //   关闭导出确认对话框\r\n                this.outPutModal = false;\r\n                //   按钮加载\r\n                this.outPutLoading = true;\r\n                setTimeout(() => {\r\n                    this.outPutLoading = false;\r\n                    this.$Modal.success({\r\n                        title: \"关于导出\",\r\n                        content: \"站点信息表导出成功\"\r\n                    });\r\n                }, 500);\r\n            },\r\n            //   确认导出\r\n            outPutSure() {\r\n                this.outPutSiteInfo();\r\n            },\r\n            // 日期时间选择器变化触发事件\r\n            handleDatePickerChange(val, valType) {\r\n                var timeInterval = `${val[0].replace(/\\//g, \"-\")},${val[1].replace(\r\n                    /\\//g,\r\n                    \"-\"\r\n                )}`;\r\n                this.select.shuiqing_datePicker = timeInterval;\r\n            },\r\n            // datePicke_on_ok(tableType) {\r\n            //   this.table[\"shuiqing\"].currentPage = 1; // 重置当前页\r\n            //   this.table.shuiqing.loading = true; // 表格加载中\r\n            //   var body = {\r\n            //     STCD: this.siteInfo.STCD,\r\n            //     TM: `bt,${this.select.shuiqing_datePicker}`\r\n            //   };\r\n            //   var pageSizes = this.table.shuiqing.pageSizes;\r\n            //   var currentPage = 1;\r\n            //   this.getTableData_shuiqing(\r\n            //     tableType,\r\n            //     pageSizes,\r\n            //     currentPage,\r\n            //     body,\r\n            //     data => {\r\n            //       this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n            //       this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\r\n            //       this.cancelTableLoading(\"shuiqing\"); // 取消表格加载\r\n            //     }\r\n            //   );\r\n            // },\r\n            // 查询\r\n            search_shuiqing(tableType) {\r\n                console.log('************', tableType);\r\n                var tableType = tableType || this.select.shuiqing_select;\r\n                this.letTableLoading(\"shuiqing\"); // 表格加载中\r\n\r\n                // 传递参数\r\n                var body = {\r\n                    STCD: this.siteInfo.STCD,\r\n                    _page: this.table.shuiqing.currentPage || 1,\r\n                    _page_size: this.table.shuiqing.pageSizes || 20\r\n                };\r\n\r\n                // 如果有选择排序，则传递排序参数\r\n                if (this.table.shuiqing.sort) {\r\n                    var _sort = this.$FilterData.sort_Filter(\r\n                        this.table.shuiqing.sort\r\n                    );\r\n                    if (_sort) {\r\n                        body._orderby = _sort;\r\n                    }\r\n                } else {\r\n                    switch (tableType) {\r\n                        case 'historyTable':\r\n                            body._orderby = `TM desc`\r\n                            break;\r\n\r\n                        case 'hourTable':\r\n                            body._orderby = `DT desc`\r\n                            break;\r\n\r\n                        case 'dayTable':\r\n                            body._orderby = `TM desc`\r\n                            break;\r\n\r\n                        case 'monthTable':\r\n                            body._orderby = `DT desc`\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                console.log(\"body._orderby\", body._orderby)\r\n                // 如果有选择日期进行查询，根据表格类型传递参数\r\n                if (this.table.shuiqing.date) {\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            var DTT = this.$FilterData.elDatePicker_Filter(\r\n                                this.table.shuiqing.date\r\n                            ).split(\",\");\r\n                            body.Time_min = DTT[1];\r\n                            body.Time_max = DTT[2];\r\n                            break;\r\n                        case \"dayTable\":\r\n                            var DTT = this.$FilterData.elDatePicker_Filter(\r\n                                this.table.shuiqing.date, \"dayTable\"\r\n                            ).split(\",\");\r\n                            body.Time_min = DTT[1];\r\n                            body.Time_max = DTT[2];\r\n                            break;\r\n                        case \"hourTable\":\r\n                            var DTT = this.$FilterData.elDatePicker_Filter(\r\n                                this.table.shuiqing.date\r\n                            ).split(\",\");\r\n                            body.Time_min = DTT[1];\r\n                            body.Time_max = DTT[2];\r\n                            break;\r\n                        case \"monthTable\":\r\n                            var DTT = this.$FilterData.elDatePicker_Filter(\r\n                                this.table.shuiqing.date, \"monthTable\"\r\n                            ).split(\",\");\r\n                            body.Time_min = DTT[1];\r\n                            body.Time_max = DTT[2];\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                // 传表类型，参数，回调函数\r\n                this.$GetData.Survey_History_ZFSQ(\r\n                    tableType,\r\n                    body,\r\n                    {\r\n                        default: true,\r\n                        myFilter: data => {\r\n                            data.map(val => {\r\n                                val.currentPage = body._page;\r\n                                val.pageSizes = body._page_size;\r\n                                return val;\r\n                            });\r\n                            return data;\r\n                        }\r\n                    },\r\n                    data => {\r\n                        this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n                        this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\r\n                        body._page_size = 999999999;\r\n                        body._page = 1;\r\n                        this.$GetData.Survey_History_ZFSQ(\r\n                            tableType,\r\n                            body,\r\n                            {\r\n                                default: true,\r\n                                myFilter: data => {\r\n                                    data.map(val => {\r\n                                        val.currentPage = body._page;\r\n                                        val.pageSizes = body._page_size;\r\n                                        return val;\r\n                                    });\r\n                                    return data;\r\n                                }\r\n                            },\r\n                            chartData => {\r\n                                this.createChart_shuiqingshuju(\r\n                                    \"shuiqingChart\",\r\n                                    tableType,\r\n                                    chartData.data\r\n                                ); // 水情表格\r\n                            }\r\n                        );\r\n                        this.cancelTableLoading(\"shuiqing\"); // 取消表格加载\r\n                    }\r\n                );\r\n            },\r\n            // 查询关系曲线表格\r\n            search_guanxiquxian() {\r\n                this.letTableLoading(\"guanxiquxian\");\r\n\r\n                // 传递参数\r\n                var body = {\r\n                    STCD: this.siteInfo.STCD,\r\n                    _page: this.table[\"guanxiquxian\"].currentPage || 1,\r\n                    _page_size: this.table[\"guanxiquxian\"].pageSizes || 20\r\n                };\r\n\r\n                // 如果有选择日期进行查询，根据表格类型传递参数\r\n                // if (this.table.guanxiquxian.date) {\r\n                //   body.YR = this.$FilterData.elDatePicker_Filter(\r\n                //     this.table.guanxiquxian.date,\r\n                //     \"onlyYear\"\r\n                //   );\r\n                // }\r\n                this.$GetData.Base_MonitoringSites(\r\n                    \"Gate_Z_Q_relation\",\r\n                    body,\r\n                    {\r\n                        default: true,\r\n                        myFilter: data => {\r\n                            data.map(val => {\r\n                                val.currentPage = body._page;\r\n                                val.pageSizes = body._page_size;\r\n                                return val;\r\n                            });\r\n                            return data;\r\n                        }\r\n                    },\r\n                    data => {\r\n                        this.setTableTotal(\"guanxiquxian\", data.total);\r\n                        this.setTableData(\"guanxiquxian\", data.data);\r\n                        this.cancelTableLoading(\"guanxiquxian\");\r\n                    }\r\n                );\r\n            },\r\n            // 设置表格总条数\r\n            setTableTotal(tableName, total) {\r\n                this.table[tableName].total = total;\r\n            },\r\n            // 表格加载中\r\n            letTableLoading(tableName) {\r\n                this.table[tableName].loading = true;\r\n            },\r\n            // 取消表格加载\r\n            cancelTableLoading(tableName) {\r\n                this.table[tableName].loading = false;\r\n            },\r\n            // 绘图\r\n            createChart(idName) {\r\n                let myChart = this.$echarts.init(document.getElementById(idName));\r\n\r\n                myChart.setOption({\r\n                    title: {\r\n                        text: this.info.STNM,\r\n                        subtext: \"纯属虚构\"\r\n                    },\r\n                    tooltip: {\r\n                        trigger: \"axis\"\r\n                    },\r\n                    legend: {\r\n                        data: [\"流量\", \"水深\"]\r\n                    },\r\n                    toolbox: {\r\n                        show: true,\r\n                        feature: {\r\n                            mark: {show: true},\r\n                            dataView: {show: true, readOnly: false},\r\n                            magicType: {show: true, type: [\"line\", \"bar\"]},\r\n                            restore: {show: true},\r\n                            saveAsImage: {show: true}\r\n                        }\r\n                    },\r\n                    calculable: true,\r\n                    xAxis: [\r\n                        {\r\n                            type: \"category\",\r\n                            // boundaryGap: false,\r\n                            data: [\r\n                                \"00:00-02:00\",\r\n                                \"02:00-04:00\",\r\n                                \"04:00-06:00\",\r\n                                \"06:00-08:00\",\r\n                                \"08:00-10:00\"\r\n                            ]\r\n                        }\r\n                    ],\r\n                    yAxis: [\r\n                        {\r\n                            type: \"value\",\r\n                            axisLabel: {\r\n                                formatter: \"{value} m³/s\"\r\n                            },\r\n                            min: 10\r\n                        },\r\n                        {\r\n                            type: \"value\",\r\n                            axisLabel: {\r\n                                formatter: \"{value} m\"\r\n                            },\r\n                            min: 5\r\n                        }\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: \"流量\",\r\n                            type: \"line\",\r\n                            data: [20, 20, 28, 35, 24, 13, 25],\r\n                            markLine: {\r\n                                data: [{type: \"average\", name: \"平均值\"}]\r\n                            }\r\n                        },\r\n                        {\r\n                            name: \"水深\",\r\n                            type: \"line\",\r\n                            data: [7, 18, 15, 12, 13, 18, 12],\r\n                            markPoint: {\r\n                                data: [{name: \"周最低\", value: -2, xAxis: 1, yAxis: -1.5}]\r\n                            },\r\n                            yAxisIndex: 1,\r\n                            markLine: {\r\n                                data: [{type: \"average\", name: \"平均值\"}]\r\n                            }\r\n                        }\r\n                    ]\r\n                });\r\n            },\r\n            // 制图\r\n            createChart_shuiqingshuju(id, tableType, data) {\r\n                var ele = document.getElementById(id);\r\n                console.log('1575',tableType);\r\n                if (data.length > 0) {\r\n                    var echartData = this.$App.transform_ZFSQ_data_into_ehart_data(\r\n                        data,\r\n                        tableType, true\r\n                    ); // 渠道水情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\r\n                    console.log(\"echartData.x.list\", echartData.x.list)\r\n                    var y2_y3_max =\r\n                        echartData.y2.max > echartData.y3.max\r\n                            ? echartData.y2.max\r\n                            : echartData.y3.max;\r\n                    var y2_y3_min =\r\n                        echartData.y2.min < echartData.y3.min\r\n                            ? echartData.y2.min\r\n                            : echartData.y3.min;\r\n                    if (!this.chart.shuiqing) {\r\n                        this.chart.shuiqing = this.$echarts.init(ele);\r\n                    }\r\n                    this.chart.shuiqing.setOption({\r\n                        title: {\r\n                            text: echartData.chartName\r\n                        },\r\n                        tooltip: {\r\n                            trigger: \"axis\"\r\n                        },\r\n                        legend: {\r\n                            data: [echartData.y1.name, echartData.y2.name, echartData.y3.name],\r\n                            y: \"bottom\"\r\n                        },\r\n                        toolbox: {\r\n                            show: true,\r\n                            feature: {\r\n                                mark: {show: true},\r\n                                magicType: {show: true, type: [\"line\", \"bar\"]},\r\n                                restore: {show: true},\r\n                                saveAsImage: {show: true}\r\n                            }\r\n                        },\r\n                        calculable: true,\r\n                        animation: true,\r\n                        xAxis: [\r\n                            {\r\n                                type: \"category\",\r\n                                // boundaryGap: false,\r\n                                data: echartData.x.list\r\n                            }\r\n                        ],\r\n                        yAxis: [\r\n                            {\r\n                                name: `${echartData.y1.name} m³/s`,\r\n                                type: \"value\",\r\n                                axisLabel: {\r\n                                    formatter: \"{value} \"\r\n                                },\r\n                                max: echartData.y1.max,\r\n                                min: echartData.y1.min\r\n                            },\r\n                            {\r\n                                name: `闸阀上/下水深m`,\r\n                                type: \"value\",\r\n                                axisLabel: {\r\n                                    formatter: \"{value} \"\r\n                                },\r\n                                max: y2_y3_max,\r\n                                min: y2_y3_min\r\n                            },\r\n                            {\r\n                                name: ` `,\r\n                                type: \"value\",\r\n                                axisLabel: {\r\n                                    formatter: \"{value} \"\r\n                                },\r\n                                max: y2_y3_max,\r\n                                min: y2_y3_min\r\n                            }\r\n                        ],\r\n                        series: [\r\n                            {\r\n                                name: echartData.y1.name,\r\n                                type: \"line\",\r\n                                data: echartData.y1.list\r\n                            },\r\n                            {\r\n                                name: echartData.y2.name,\r\n                                type: \"line\",\r\n                                data: echartData.y2.list,\r\n                                yAxisIndex: 1\r\n                            },\r\n                            {\r\n                                name: echartData.y3.name,\r\n                                type: \"line\",\r\n                                data: echartData.y3.list,\r\n                                yAxisIndex: 2\r\n                            }\r\n                        ]\r\n                    });\r\n                }\r\n            },\r\n            // 加载站点数据\r\n            loadSiteData(data) {\r\n                this.siteInfo = data;\r\n            }, // 组件加载中\r\n            componentLoading() {\r\n                this.boxLoading = true;\r\n            },\r\n            // 取消组件加载\r\n            cancelComponentLoading() {\r\n                this.boxLoading = false;\r\n            },\r\n            // 处理页码切换_水情数据\r\n            handleCurrentChange_shuiqing(index) {\r\n                this.table[\"shuiqing\"].currentPage = index;\r\n                this.search_shuiqing();\r\n            },\r\n            // 处理页码切换_关系曲线\r\n            handleCurrentChange_guanxiquxian(index) {\r\n                this.table[\"guanxiquxian\"].currentPage = index;\r\n                this.search_guanxiquxian();\r\n            },\r\n            // 处理页码切换_特征水深\r\n            handleCurrentChange_tezhengshuiqing() {\r\n                this.table[\"tezhengshuiqing\"].currentPage = index;\r\n                this.search_tezhengshuiqing();\r\n            },\r\n            // 处理每页显示条数切换_水情数据\r\n            handleSizeChange_shuiqing(pageSizes) {\r\n                this.table[\"shuiqing\"].pageSizes = pageSizes;\r\n                this.table[\"shuiqing\"].currentPage = 1;\r\n                this.search();\r\n            },\r\n            // 处理每页显示条数切换_关系曲线\r\n            handleSizeChange_guanxiquxian(pageSizes) {\r\n                this.table[\"guanxiquxian\"].pageSizes = pageSizes;\r\n                this.table[\"guanxiquxian\"].currentPage = 1;\r\n                this.search_guanxiquxian();\r\n            },\r\n            // 处理每页显示条数切换_特征水深\r\n            handleSizeChange_tezhengshuiqing(pageSizes) {\r\n                this.table[\"tezhengshuiqing\"].pageSizes = pageSizes;\r\n                this.table[\"tezhengshuiqing\"].currentPage = 1;\r\n                this.search_tezhengshuiqing();\r\n            },\r\n            // 分页过滤\r\n            pageFilter(currentPage, pageSizes, tableName) {\r\n                // 截取数组\r\n                var newList = this.table[tableName].Rows_filter.slice(\r\n                    (currentPage - 1) * pageSizes,\r\n                    currentPage * pageSizes\r\n                );\r\n\r\n                return newList;\r\n            },\r\n            // 水情历史数据表 当前正在激活的表头\r\n            setActiveColumns_shuiqing(tableType) {\r\n                this.table.shuiqing.activeColumns = this.table.shuiqing.columns[tableType];\r\n                this.select.shuiqing_select = tableType;\r\n                console.log('+++++++++', tableType);\r\n                console.log('----------', this.table.shuiqing.activeColumns);\r\n            },\r\n            // 切换 水情历史数据表类型\r\n            tableTypeOnChange_shuiqing(tableType) {\r\n                this.table[\"shuiqing\"].currentPage = 1;\r\n                this.table[\"shuiqing\"].date = null;\r\n                this.table[\"shuiqing\"].sort = null;\r\n                this.setDatePickerType_shuiqing(tableType); // 设置日期时间选择器的类型\r\n                // 设置水情历史数据表 当前激活的表头\r\n                this.setActiveColumns_shuiqing(tableType);\r\n                this.table.shuiqing.loading = true; // 表格加载中\r\n                // 设置表默认查询日期\r\n                if (this[`setTableDefaultDate_shuiqing_${tableType}`]) {\r\n                    this[`setTableDefaultDate_shuiqing_${tableType}`]();\r\n                }\r\n                // 查询对应水情历史数据表的数据\r\n                this.search_shuiqing(tableType);\r\n            },\r\n            // 设置数据表快速查询选择框内容\r\n            setSelectOption_quickSearch(tableType) {\r\n                this.select.activeQuickSearchList = this.select.quickSearch[tableType];\r\n                this.select.select = this.select.activeQuickSearchList[0]\r\n                    ? this.select.activeQuickSearchList[0].value\r\n                    : null; // 设置默认值为第一项\r\n            },\r\n            // 设置水情数据历史表默认查询日期\r\n            setTableDefaultDate_shuiqing_historyTable() {\r\n                const end = new Date();\r\n                const start = zeroPointOfTheDay();\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置水情数据小时表默认查询日期\r\n            setTableDefaultDate_shuiqing_hourTable() {\r\n                const end = new Date();\r\n                const start = zeroPointOfTheDay();\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置水情数据日表默认查询日期\r\n            setTableDefaultDate_shuiqing_dayTable() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\r\n\r\n                var timeSlot = [start, end];\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置水情数据月表默认查询日期\r\n            setTableDefaultDate_shuiqing_monthTable() {\r\n                const end = new Date();\r\n                const start = new Date();\r\n                start.setTime(start.getTime() - 3600 * 1000 * 24 * 160);\r\n\r\n                var timeSlot = [start, end]\r\n\r\n                this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n                function zeroPointOfTheDay() {\r\n                    var date = new Date();\r\n                    date.setHours(0);\r\n                    date.setMinutes(0);\r\n                    date.setSeconds(0);\r\n                    date.setMilliseconds(0);\r\n                    return date;\r\n                }\r\n            },\r\n            // 设置日期时间选择器的类型\r\n            setDatePickerType_shuiqing(tableType) {\r\n                var datePickerType;\r\n                switch (tableType) {\r\n                    case \"historyTable\":\r\n                        datePickerType = \"datetimerange\";\r\n                        break;\r\n                    case \"hourTable\":\r\n                        datePickerType = \"datetimerange\";\r\n                        break;\r\n                    case \"dayTable\":\r\n                        datePickerType = \"daterange\";\r\n                        break;\r\n                    case \"monthTable\":\r\n                        datePickerType = \"monthrange\";\r\n                        break;\r\n                }\r\n                this.table[\"shuiqing\"].datePickerType = datePickerType;\r\n            },\r\n            // 获取对应水情历史数据表的数据\r\n            getTableData_shuiqing(\r\n                tableType,\r\n                pageSizes,\r\n                currentPage,\r\n                body,\r\n                callback,\r\n                callback_beforeFilter\r\n            ) {\r\n                var tableName = null;\r\n                // 根据不同类型的表，选择数据库中对应的表名\r\n                switch (tableType) {\r\n                    case \"historyTable\":\r\n                        tableName = \"ST_WAS_R\";\r\n                        break;\r\n                    case \"hourTable\":\r\n                        tableName = \"ST_HWAS_C\";\r\n                        break;\r\n                    case \"dayTable\":\r\n                        tableName = \"ST_DWAS_C\";\r\n                        break;\r\n                    case \"monthTable\":\r\n                        tableName = \"ST_MWAS_C\";\r\n                        break;\r\n                    default:\r\n                        tableName = \"ST_WAS_R\";\r\n                        break;\r\n                }\r\n                this.axios\r\n                    .get(\r\n                        `/guanqu/admin/${tableName ||\r\n                        \"historyTable\"}?_page_size=${pageSizes || 20}&_page=${currentPage ||\r\n                        1}`,\r\n                        {\r\n                            params: body\r\n                        }\r\n                    )\r\n                    .then(res => {\r\n                        if (typeof callback_beforeFilter == \"function\") {\r\n                            callback_beforeFilter({\r\n                                data: res.data.rows,\r\n                                total: res.data.total\r\n                            });\r\n                        }\r\n                        // 数据过滤\r\n                        var data = res.data.rows.map(val => {\r\n                            if (tableType == \"historyTable\") {\r\n                                val.currentPage = this.table.shuiqing.currentPage; // 添加当前页码到数据\r\n                                val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\r\n                                val.TM = this.dateFilter(val.TM); // 日期过滤\r\n                                val.UPZ = this.Z_Filter(val.UPZ); // 闸阀前水深过滤\r\n                                val.DWZ = this.Z_Filter(val.DWZ); // 闸阀后水深过滤\r\n                                val.Q = this.Z_Filter(val.Q); // 流量过滤\r\n                            }\r\n                            if (tableType == \"hourTable\") {\r\n                                val.currentPage = this.table.shuiqing.currentPage; // 添加当前页码到数据\r\n                                val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\r\n                                val.DT = this.dateFilter(val.DT); // 日期过滤\r\n                                val.A_UPZ = this.Z_Filter(val.A_UPZ); // 平均闸阀前水深过滤\r\n                                val.A_DWZ = this.Z_Filter(val.A_DWZ); // 平均闸阀后水深过滤\r\n                                val.A_Q = this.Z_Filter(val.A_Q); // 过闸平均流量过滤\r\n                                val.WQ = this.Z_Filter(val.WQ); // 小时累计过闸水量过滤\r\n                            }\r\n                            if (tableType == \"dayTable\") {\r\n                                val.currentPage = this.table.shuiqing.currentPage; // 添加当前页码到数据\r\n                                val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\r\n                                val.TM = this.dateFilter(val.TM); // 日期过滤\r\n                                val.DA_UPZ = this.Z_Filter(val.DA_UPZ); // 平均闸阀前水深过滤\r\n                                val.DA_DWZ = this.Z_Filter(val.DA_DWZ); // 平均闸阀后水深过滤\r\n                                val.DA_Q = this.Z_Filter(val.DA_Q); // 平均过闸流量过滤\r\n                                val.DWQ = this.Z_Filter(val.DWQ); // 日累计过闸水量过滤\r\n                            }\r\n                            if (tableType == \"monthTable\") {\r\n                                val.currentPage = this.table.shuiqing.currentPage; // 添加当前页码到数据\r\n                                val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\r\n                                val.MA_UPZ = this.Z_Filter(val.MA_UPZ); // 平均闸阀前水深过滤\r\n                                val.MA_DWZ = this.Z_Filter(val.MA_DWZ); // 平均闸阀后水深过滤\r\n                                val.MA_Q = this.Z_Filter(val.MA_Q); // 平均过闸流量过滤\r\n                                val.MWQ = this.Z_Filter(val.MWQ); // 月累计过闸水量过滤\r\n                            }\r\n\r\n                            return val;\r\n                        });\r\n\r\n                        if (typeof callback == \"function\") {\r\n                            callback({\r\n                                data: data,\r\n                                total: res.data.total\r\n                            });\r\n                        }\r\n                    });\r\n            },\r\n            // 获取特征水深表格的数据\r\n            getTableData_tezhengshuiqing(\r\n                pageSizes,\r\n                currentPage,\r\n                body,\r\n                callback,\r\n                callback_beforeFilter\r\n            ) {\r\n                this.axios\r\n                    .get(\r\n                        `/guanqu/admin/ST_G_WASQORD?_page_size=${pageSizes ||\r\n                        20}&_page=${currentPage || 1}`,\r\n                        {\r\n                            params: body\r\n                        }\r\n                    )\r\n                    .then(res => {\r\n                        if (typeof callback_beforeFilter == \"function\") {\r\n                            callback_beforeFilter({\r\n                                data: res.data.rows || [],\r\n                                total: res.data.total || 0\r\n                            });\r\n                        }\r\n                        // 水情数据过滤\r\n                        var data = res.data.rows.map(val => {\r\n                            val.currentPage = this.table.shuiqing.currentPage; // 添加数据当前页码\r\n                            val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\r\n                            val.TMMXQ = this.dateFilter(val.TMMXQ); // 日期过滤\r\n                            val.TMXQ = this.Z_Filter(val.TMXQ, 3); // 年最大流量\r\n                            val.YMXUPQZ = this.Z_Filter(val.YMXUPQZ); // 对应闸前水深过滤\r\n                            val.YMXDNQZ = this.Z_Filter(val.YMXDNQZ); // 对应闸后水深过滤\r\n\r\n                            return val;\r\n                        });\r\n                        if (typeof callback == \"function\") {\r\n                            callback({\r\n                                data: data,\r\n                                total: res.data.total\r\n                            });\r\n                        }\r\n                    });\r\n            },\r\n\r\n            getAlarm(agmt){\r\n                let obj = {\r\n                    STCD: agmt\r\n                }\r\n                this.axios.get(`/guanqu/table/ST_Gate_Alarm`, {params: obj}).then(res => {\r\n                    console.log('这是我写的',res);\r\n                })\r\n            },\r\n\r\n            // 获取特征水深预警信息表的数据\r\n            getTableData_tezhengshuiqing_Alarm(body, callback, callback_beforeFilter) {\r\n                this.axios.get(`/guanqu/table/ST_Gate_Alarm`, {params: body}).then(res => {\r\n                        var data = res.data.list;\r\n                        if (typeof callback_beforeFilter == \"function\") {\r\n                            callback_beforeFilter(res);\r\n                        }\r\n                        // 水情数据过滤\r\n                        console.log('888888888888888888888',data);\r\n                        var data = res.data.list.map(val => {\r\n                            console.log(\"val\", val)\r\n                            // val.SZ = this.Z_Filter(val.SZ); // 预警闸前水深过滤\r\n                            // val.EZ = this.Z_Filter(val.EZ); // 预警闸后水深\r\n                            // val.JYSQ = this.Z_Filter(val.JYSQ); // 预警流量过滤\r\n                            // val.JYEQ = this.Z_Filter(val.JYEZ); // 预警水深过滤\r\n\r\n                            return val;\r\n                        });\r\n                        if (typeof callback == \"function\") {\r\n                            callback(data);\r\n                        }\r\n                    });\r\n            },\r\n            // 更新 XX 表格的数据\r\n            setTableData(tableName, data) {\r\n                this.table[tableName].Rows_filter = data;\r\n            },\r\n            // 更新水情历史数据表的数据\r\n            setTableData_guanxiquxian(data) {\r\n                this.table.guanxiquxian.Rows_filter = data;\r\n            },\r\n            // 根据关联编号获取关联站点\r\n            getRelateSiteByRelateCode(callback) {\r\n                var RELATECODE = this.info.RELATECODE;\r\n                if (RELATECODE && RELATECODE != 0) {\r\n                    this.axios\r\n                        .get(`/guanqu/admin/ST_STBPRP_B`, {\r\n                            params: {\r\n                                RELATECODE: RELATECODE\r\n                            }\r\n                        })\r\n                        .then(res => {\r\n                            var data = res.data.rows;\r\n                            if (typeof callback == \"function\") {\r\n                                callback(data);\r\n                            }\r\n                        });\r\n                }\r\n            },\r\n            // 根据行政区划编码获取行政区划\r\n            getCompartmentByADDVCD(callback) {\r\n                var ADDVCD = this.info.rowinfo.ADDVCD;\r\n                if (ADDVCD && ADDVCD != \"\") {\r\n                    this.axios\r\n                        .get(`/guanqu/admin/WRP_AD_B`, {\r\n                            params: {\r\n                                AD_CD: ADDVCD\r\n                            }\r\n                        })\r\n                        .then(res => {\r\n                            var data = res.data.rows;\r\n                            if (typeof callback == \"function\") {\r\n                                callback(data);\r\n                            }\r\n                        });\r\n                }\r\n            },\r\n            // 根据返回的total数量, 设置表格总条数 (特征水深)\r\n            setTableTotal_tezhengshuiqing(total) {\r\n                this.table.tezhengshuiqing.total = total;\r\n            },\r\n            // 更新特征水深数据表的数据\r\n            setTableData_tezhengshuiqing(data) {\r\n                this.table.tezhengshuiqing.Rows_filter = data;\r\n            },\r\n            // 特征水深表格查询\r\n            search_tezhengshuiqing() {\r\n                this.letTableLoading(\"tezhengshuiqing\"); // 表格加载中\r\n                // 传递站码参数\r\n                var body = {\r\n                    STCD: this.siteInfo.STCD,\r\n                    _page: this.table.tezhengshuiqing.currentPage,\r\n                    _page_size: this.table.tezhengshuiqing.pageSizes\r\n                };\r\n\r\n                if (this.table.tezhengshuiqing.date) {\r\n                    var YR = this.$FilterData.elDatePicker_Filter(\r\n                        this.table.tezhengshuiqing.date,\r\n                        \"maxQTable\"\r\n                    ).split(\",\");\r\n                    body.YR_min = YR[1];\r\n                    body.YR_max = YR[2];\r\n                }\r\n\r\n                // 获取特征水深表格数据\r\n                this.$GetData.Survey_History_ZFSQ(\r\n                    \"maxQTable\",\r\n                    body,\r\n                    {\r\n                        default: true,\r\n                        myFilter: data => {\r\n                            data.map(val => {\r\n                                val.currentPage = body._page;\r\n                                val.pageSizes = body._page_size;\r\n                                return val;\r\n                            });\r\n                            return data;\r\n                        }\r\n                    },\r\n                    data => {\r\n                        this.setTableTotal(\"tezhengshuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n                        this.setTableData(\"tezhengshuiqing\", data.data); // 更新特征水深数据表的数据\r\n                        this.cancelTableLoading(\"tezhengshuiqing\"); // 取消表格加载\r\n                    }\r\n                );\r\n            },\r\n            // 设置特征水深预警信息数据\r\n            setAlarmData_tezhengshuiqing(data) {\r\n                this.table.tezhengshuiqing.alarmData = data;\r\n                this.info.rowinfo.YUJING_Q = data.JYQ\r\n                this.info.rowinfo.YUJING_Z = data.JYZ\r\n            },\r\n            // 处理日期时间选择器确定事件_水情数据\r\n            handleDatePickerChange(item) {\r\n                this.table.shuiqing.currentPage = 1;\r\n                this.search_shuiqing();\r\n            },\r\n            handleDatePickerChange_tezhengshuiqing() {\r\n                this.table.tezhengshuiqing.currentPage = 1;\r\n                this.search_tezhengshuiqing();\r\n            },\r\n            handleDatePickerChange_guanxiquxian(item) {\r\n                this.search_guanxiquxian();\r\n            },\r\n            // 设置 xx表格 时间选择器值\r\n            setTableDate(tableName, val) {\r\n                this.table[tableName].date = val;\r\n            },\r\n            // 排序_水情\r\n            sort_change_shuiqing(item) {\r\n\r\n                this.table.shuiqing.sort = item\r\n\r\n                this.search_shuiqing();\r\n            }\r\n        },\r\n\r\n        mounted() {\r\n            // 组件加载中\r\n            this.componentLoading();\r\n            // 获取详情数据\r\n            console.log(this.info.rowinfo.STCD);\r\n            this.axios\r\n                .get(`/guanqu/table/details?ID=${this.info.rowinfo.STCD}&pk=STCD`)\r\n                .then(res => {\r\n                    //获取预警数据\r\n                    // this.axios.get('/guanqu/table/ST_Gate_Alarm?STCD='+res.data.STCD).then(res =>{\r\n                    //   this.yujingdata = res.data.rows[0];\r\n                    //   this.yujingdata.SZ = this.Z_Filter(this.yujingdata.SZ);\r\n                    //   this.yujingdata.EZ = this.Z_Filter(this.yujingdata.EZ);\r\n                    //   this.yujingdata.Q = this.Z_Filter(this.yujingdata.Q,3);\r\n                    // });\r\n\r\n                    // 根据行政区划码获取行政区划名\r\n                    this.getCompartmentByADDVCD(data => {\r\n                        this.siteInfo.AD_NM = data[0].AD_NM;\r\n                    });\r\n\r\n                    // 根据河流编码获取河流名\r\n                    this.$GetData.Base_R_I({\r\n                        RVCD: this.info.rowinfo.RVCD\r\n                    }, true, (data) => {\r\n                        this.siteInfo.RVCD = data.data[0].RVNM;\r\n                    })\r\n\r\n                    // 根据流域编码获取流域名\r\n                    this.$GetData.Base_B_I({\r\n                        CTCD: this.info.rowinfo.CTCD\r\n                    }, true, (data) => {\r\n                        this.siteInfo.CTCD = data.data[0].CTNM;\r\n                    })\r\n\r\n                    //获取近5年时间\r\n                    var newdate = new Array();\r\n                    var end = new Date();\r\n                    var start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\r\n                    newdate[0] = start;\r\n                    newdate[1] = end;\r\n                    this.table.tezhengshuiqing.date = newdate;\r\n\r\n                    // 加载站点数据\r\n                    this.loadSiteData(res.data);\r\n                    // 加载取消\r\n                    this.cancelComponentLoading();\r\n                    // 水情数据\r\n                    this.tableTypeOnChange_shuiqing(this.info.rowinfo.tableType.zfsq); // 设置 默认的水情历史数据表\r\n                    // 关系曲线\r\n                    this.search_guanxiquxian();\r\n                    // 特征水深最大流量表数据\r\n                    this.search_tezhengshuiqing();\r\n                    this.getAlarm(this.info.rowinfo.STCD)\r\n                    // 特征水深预警信息表数据\r\n                    // this.getTableData_tezhengshuiqing_Alarm(\r\n                    //   {\r\n                    //     STCD: this.siteInfo.STCD\r\n                    //   },\r\n                    //   data => {\r\n                    //     this.setAlarmData_tezhengshuiqing(data[0]);\r\n                    //   }\r\n                    // );\r\n                });\r\n        }\r\n    };\r\n</script>\r\n\r\n\r\n<style lang=\"less\" scope>\r\n    @import \"./common/common.less\";\r\n\r\n    .drawer-profile {\r\n        font-size: @siteInfoFontSize;\r\n\r\n        .row_header {\r\n            text-align: center;\r\n            font-size: 1.5625rem;\r\n            font-weight: 700;\r\n        }\r\n\r\n        .relationRow {\r\n            margin-top: 1.25rem;\r\n\r\n            button {\r\n                margin-right: 1.25rem;\r\n            }\r\n        }\r\n\r\n        .checkBoxItem {\r\n            margin: 0 0.9375rem;\r\n        }\r\n\r\n        .huansuanInput {\r\n            width: 60%;\r\n        }\r\n    }\r\n</style>\r\n"],"sourceRoot":"src/components/Details"}]}