{"remainingRequest":"D:\\work2022\\visualplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js!D:\\work2022\\visualplace\\zhihuiguanqu\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\work2022\\visualplace\\zhihuiguanqu\\src\\assets\\commonJS\\GetDataConfig.js","dependencies":[{"path":"D:\\work2022\\visualplace\\zhihuiguanqu\\src\\assets\\commonJS\\GetDataConfig.js","mtime":1668993274915},{"path":"D:\\work2022\\visualplace\\zhihuiguanqu\\babel.config.js","mtime":1577669403468},{"path":"D:\\work2022\\visualplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\work2022\\visualplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\work2022\\visualplace\\zhihuiguanqu\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseInt from \"D:\\\\work2022\\\\visualplace\\\\zhihuiguanqu\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport FilterMethods from \"@/assets/commonJS/FilterMethods\";\nimport axios from 'axios';\nexport default {\n  // 基础数据\n  // 监测站点\n  Base_MonitoringSites: function Base_MonitoringSites(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"basic\":\n        tableName = \"ST_STBPRP_B\";\n        break;\n\n      case \"MonitoringType\":\n        tableName = \"ST_STBPRP_F\";\n        break;\n\n      case \"RelatedElements\":\n        tableName = \"ST_STINFO_WRP\";\n        break;\n\n      case \"Z_Q_relation\":\n        tableName = \"ST_ZQRL_B\";\n        break;\n\n      case \"Gate_Z_Q_relation\":\n        tableName = \"ST_G_Q_Z\";\n        break;\n    }\n\n    axios.get(\"/guanqu/admin/\".concat(tableName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.DT = FilterMethods.methods.dateFilter(val.DT); // 时间\n\n              val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n\n              val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z); // 平均水位\n\n              val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n\n              val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z); // 日平均水位\n\n              val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"Z_Q_relation\":\n            newData = data.map(function (val) {\n              // val.YR = FilterMethods.methods.dateFilter(val.YR); // 年份\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"Gate_Z_Q_relation\":\n            newData = data.map(function (val) {\n              val.Q = FilterMethods.methods.dateFilter(val.Q, 3); // 流量\n\n              val.OD = FilterMethods.methods.Float_Filter(val.OD); // 闸门开度\n\n              val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ); // 闸前水位\n\n              val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸后水位\n\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 河流信息\n  Base_R_I: function Base_R_I(body, filter, callBack) {\n    axios.get(\"/guanqu/admin/WRP_RVR_BSIN\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 流域信息\n  Base_B_I: function Base_B_I(body, filter, callBack) {\n    axios.get(\"/guanqu/admin/WRP_LY_BSIN\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 监控模块\n  // 历史统计类\n  // 水库水情\n  Survey_History_SWKR: function Survey_History_SWKR(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single\";\n        break;\n\n      case \"hourTable\":\n        console.log('@@@@@@@@@@@@@@@@@@@' + tableType);\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"overTime\":\n        tableName = \"single_chaoxunxianshijian\";\n        break;\n\n      case \"sishiTable\":\n        tableName = \"single_details\";\n        break;\n    }\n\n    var __url = \"/guanqu/shuiweikurong/\".concat(tableName);\n\n    axios.get(__url, {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, null, 0); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.Min_TM = \"\".concat(FilterMethods.methods.dateFilter(val.Min_TM, 2));\n              ; // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 平均水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); //kuxia\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, \"onlyDate\"); // 时间\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 日平均水位\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 日出库平均流量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n              // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 月平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 月平均水位\n              // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"maxTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              val.FWL = FilterMethods.methods.Float_Filter(val.FWL); // 4-6月汛限水位\n\n              val.FWL79 = FilterMethods.methods.Float_Filter(val.FWL79); // 4-6月汛限水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n\n              return val;\n            });\n            break;\n\n          case \"sishiTable\":\n            newData = res.data;\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 雨情\n  Survey_History_YQ: function Survey_History_YQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single_lishi\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"tenDaysTable\":\n        tableName = \"single_xun\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"yearTable\":\n        tableName = \"single_nian\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"single_yujing\";\n        break;\n\n      case \"alarmTable_shangbao\":\n        tableName = \"single_yujingshangbao\";\n        break;\n    }\n\n    axios.get(\"/guanqu/yuqing/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n              // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.TM) < 10) {\n                val.TM = \"0\".concat(val.TM);\n              } // val.DT = `${val.DT} ${val.TM}`;; // 时间\n              // val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n\n\n              val.P = FilterMethods.methods.Float_Filter(val.P, 1); // 降雨量\n              // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              console.log(val); // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.p = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\n\n              if (val.p === '0.0') {\n                val.p = '';\n              } // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              console.log(val.P);\n\n              if (val.P === '0.0') {\n                val.P = '';\n              } // var DT = val.PTBGDT.split(\"-\"),\n              //     Year = parseInt(DT[0]),\n              //     Month = parseInt(DT[1]),\n              //     Day = parseInt(DT[2]),\n              //     Year_Month = `${Year}-${Month}`\n              //\n              // if (Day > 0 && Day <= 10) {\n              //     val.PTBGDT = `${Year_Month} 上旬`\n              // } else if (Day > 10 && Day <= 20) {\n              //     val.PTBGDT = `${Year_Month} 中旬`\n              // } else {\n              //     val.PTBGDT = `${Year_Month} 下旬`\n              // }\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              // if (parseInt(val.MON) < 10) {\n              //     val.MON = '0'+val.MON\n              // }\n              if (val.P === '0.0') {\n                val.P = '';\n              } // val.DT = `${val.YR}-${val.MON}`; // 时间\n              // // val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 月平均流量\n              // val.P = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\n              // // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              val.P = FilterMethods.methods.Float_Filter(val.P, 1); // 降雨量\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable_shangbao\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 预警水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 雨情雨量统计数据\n  statistics_rain_YQ: function statistics_rain_YQ(tableType, body, filter, callBack) {\n    // debugger;\n    var tbName = '';\n\n    switch (tableType) {\n      case \"historyTable\":\n        tbName = \"tongji_lishi\";\n        break;\n\n      case \"hourTable\":\n        tbName = \"tongji_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        body.Time_min = body.Time_min.substr(0, 10);\n        body.Time_max = body.Time_max.substr(0, 10);\n        tbName = \"tongji_ri\";\n        break;\n\n      case \"tenDaysTable\":\n        tbName = \"tongji_xun\";\n        break;\n\n      case \"monthTable\":\n        tbName = \"tongji_yue\";\n        break;\n\n      case \"yearTable\":\n        tbName = \"tongji_nian\";\n        break;\n\n      case \"alarmTable\":\n        tbName = \"tongji_yujing\";\n        break;\n\n      case \"alarmTable_shangbao\":\n        tbName = \"tongji_ujingshangbao\";\n        break;\n    }\n\n    axios.get(\"/guanqu/yuqing/\".concat(tbName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        return newData;\n      }\n    });\n  },\n  //大坝安全监测历史数据\n  Safe_History_DATA: function Safe_History_DATA(jctype, body, filter, callBack) {\n    var url;\n\n    switch (jctype) {\n      case \"sll\":\n        url = \"/guanqu/slldetail/lishi\";\n        break;\n\n      case \"slyl\":\n        url = \"/guanqu/slyldetail/lishi\";\n        break;\n\n      case \"wybx\":\n        url = \"/guanqu/spwydetail/lishi\";\n        break;\n\n      case \"cjbx\":\n        url = \"/guanqu/czwydetail/lishi\";\n        break;\n    }\n\n    axios.get(url, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (jctype) {\n          case \"sll\":\n            newData = data.map(function (val) {\n              val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\n\n              val.spprwl = FilterMethods.methods.Float_Filter(val.spprwl, 3); // 渗流量\n\n              val.tm = FilterMethods.methods.Float_Filter(val.tm, 1); // 渗流水温\n\n              return val;\n            });\n            break;\n\n          case \"slyl\":\n            newData = data.map(function (val) {\n              val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\n\n              val.spprwm = FilterMethods.methods.Float_Filter(val.spprwm, 3); // 渗压水位\n\n              val.tm = FilterMethods.methods.Float_Filter(val.tm, 1); // 水温\n\n              return val;\n            });\n            break;\n\n          case \"wybx\":\n            newData = data.map(function (val) {\n              val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\n\n              val.xhrdsval = FilterMethods.methods.Float_Filter(val.xhrds.substr(3), 3); // X向位移\n\n              val.yhrdsval = FilterMethods.methods.Float_Filter(val.yhrds.substr(3), 3); // Y向位移\n\n              return val;\n            });\n            break;\n\n          case \"cjbx\":\n            newData = data.map(function (val) {\n              val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\n\n              val.vrdsval = FilterMethods.methods.Float_Filter(val.vrds.substr(2), 3); // 垂直位移\n\n              val.inel = FilterMethods.methods.Float_Filter(val.inel, 3); // 测量高程\n\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 水库水情\n  Survey_History_SKSQ: function Survey_History_SKSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single_lishi\";\n        break;\n\n      case \"hourTable\":\n        console.log('@@@@@@@@@@@@@@@@@@@' + tableType);\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"maxZ\":\n        tableName = \"single_zuigaoshuiwe\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"single_yujing\";\n        break;\n\n      case \"overTime\":\n        tableName = \"single_chaoxunxianshijian\";\n        break;\n\n      case \"sishiTable\":\n        tableName = \"single_details\";\n        break;\n    }\n\n    var __url = \"/guanqu/shuikushuiqing/\".concat(tableName);\n\n    axios.get(__url, {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, null, 0); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.Min_TM = \"\".concat(FilterMethods.methods.dateFilter(val.Min_TM, 2));\n              ; // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 平均水位\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ); //kuxia\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM, null, \"onlyDate\"); // 时间\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 日平均水位\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日入库平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 日出库平均流量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n              // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\n\n              val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 月平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 月平均水位\n              // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ);\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"maxTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              val.FWL = FilterMethods.methods.Float_Filter(val.FWL); // 4-6月汛限水位\n\n              val.FWL79 = FilterMethods.methods.Float_Filter(val.FWL79); // 4-6月汛限水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n\n              return val;\n            });\n            break;\n\n          case \"sishiTable\":\n            newData = res.data;\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 河道水情\n  Survey_History_HDSQ: function Survey_History_HDSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"single_lishi\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"single_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"single_ri\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"single_yue\";\n        break;\n\n      case \"maxZ\":\n        tableName = \"single_zuigaoshuiwe\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"single_yujing\";\n        break;\n\n      case \"overTime\":\n        tableName = \"single_chaoxunxianshijian\";\n        break;\n    }\n\n    axios.get(\"/guanqu/hedaoshuiqing/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              // val.DTT = `${FilterMethods.methods.dateFilter(val.DTT, 2)}`;; // 时间\n              val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM, 2); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 平均水位\n              // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM, 2); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"tenDaysTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\n              if (_parseInt(val.MON) < 10) {\n                val.MON = \"0\".concat(val.MON);\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n\n              val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\n\n              val.RZ = FilterMethods.methods.Float_Filter(val.RZ); // 月平均水位\n              // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              return val;\n            });\n            break;\n\n          case \"yearTable\":\n            newData = data.map(function (val) {\n              // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n              // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n              // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\n              // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n              return val;\n            });\n            break;\n\n          case \"maxTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n              // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 预警水位\n              // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n              // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 渠道水情\n  Survey_History_QDSQ: function Survey_History_QDSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"ST_Canal_R\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"ST_HCanal_C\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"ST_DCanal_C\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"View_ST_MCanal_C\";\n        break;\n\n      case \"maxQTable\":\n        tableName = \"ST_G_CQORD\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"ST_Canal_Alarm\";\n        break;\n    }\n\n    axios.get(\"/guanqu/table/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 水位\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.DTT = \"\".concat(FilterMethods.methods.dateFilter(val.DTT, 2));\n              ; // 时间\n\n              val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n\n              val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z); // 平均水位\n\n              val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\n\n              val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z); // 日平均水位\n\n              val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\n\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.DT = \"\".concat(val.YR, \"-\").concat(val.MON); // 时间\n\n              val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 月平均流量\n\n              val.MA_Z = FilterMethods.methods.Float_Filter(val.MA_Z); // 月平均水位\n\n              val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\n\n              return val;\n            });\n            break;\n\n          case \"maxQTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n\n              val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ); // 对应水位\n\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n\n              val.Z = FilterMethods.methods.Float_Filter(val.Z); // 预警水位\n\n              val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n\n              val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\n\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 闸阀水情\n  Survey_History_ZFSQ: function Survey_History_ZFSQ(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    console.log(tableType);\n\n    switch (tableType) {\n      case \"historyTable\":\n        tableName = \"table/ST_WAS_R\";\n        break;\n\n      case \"hourTable\":\n        tableName = \"zhafashuiqing/item_xiaoshi\";\n        break;\n\n      case \"dayTable\":\n        tableName = \"table/ST_DWAS_C\";\n        break;\n\n      case \"monthTable\":\n        tableName = \"table/View_ST_MWAS_C\";\n        break;\n\n      case \"maxQTable\":\n        tableName = \"table/ST_G_WASQORD\";\n        break;\n\n      case \"alarmTable\":\n        tableName = \"table/ST_Gate_Alarm\";\n        break;\n    }\n\n    axios.get(\"/guanqu/\".concat(tableName), {\n      // axios.get(`/guanqu/admin/${tableName}`, {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 日期过滤\n\n              val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ); // 闸阀前水位过滤\n\n              val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸阀后水位过滤\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量过滤\n\n              return val;\n            });\n            break;\n\n          case \"hourTable\":\n            newData = data.map(function (val) {\n              val.DTT = \"\".concat(FilterMethods.methods.dateFilter(val.DTT, 2)); // 时间\n\n              val.A_UPZ = FilterMethods.methods.Float_Filter(val.A_UPZ); // 平均闸阀前水位过滤\n\n              val.A_DWZ = FilterMethods.methods.Float_Filter(val.A_DWZ); // 平均闸阀后水位过滤\n\n              val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 过闸平均流量过滤\n\n              val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计过闸水量过滤\n\n              return val;\n            });\n            break;\n\n          case \"dayTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 日期过滤\n\n              val.DA_UPZ = FilterMethods.methods.Float_Filter(val.DA_UPZ); // 平均闸阀前水位过滤\n\n              val.DA_DWZ = FilterMethods.methods.Float_Filter(val.DA_DWZ); // 平均闸阀后水位过滤\n\n              val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 平均过闸流量过滤\n\n              val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计过闸水量过滤\n\n              return val;\n            });\n            break;\n\n          case \"monthTable\":\n            newData = data.map(function (val) {\n              if (_parseInt(val.MON) < 10) {\n                val.MON = '0' + val.MON;\n              }\n\n              val.TM = \"\".concat(val.YR, \"-\").concat(val.MON);\n              val.DTT = \"\".concat(val.YE, \"-\").concat(val.MON);\n              val.MA_UPZ = FilterMethods.methods.Float_Filter(val.MA_UPZ); // 平均闸阀前水位过滤\n\n              val.MA_DWZ = FilterMethods.methods.Float_Filter(val.MA_DWZ); // 平均闸阀后水位过滤\n\n              val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 平均过闸流量过滤\n\n              val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计过闸水量过滤\n\n              return val;\n            });\n            break;\n\n          case \"maxQTable\":\n            newData = data.map(function (val) {\n              // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\n              // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\n              // val.YMXUPQZ = FilterMethods.methods.Float_Filter(val.YMXUPQZ) // 对应闸前水位\n              // val.YMXDNQZ = FilterMethods.methods.Float_Filter(val.YMXDNQZ) // 对应闸后水位\n              return val;\n            });\n            break;\n\n          case \"alarmTable\":\n            newData = data.map(function (val) {\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\n\n              val.SZ = FilterMethods.methods.Float_Filter(val.SZ); // 预警闸前水位\n\n              val.EZ = FilterMethods.methods.Float_Filter(val.EZ); // 预警闸后水位\n\n              val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\n\n              val.JYSZ = FilterMethods.methods.Float_Filter(val.JYSZ); // 经验预警闸前水位\n\n              val.JYEZ = FilterMethods.methods.Float_Filter(val.JYEZ); // 经验预警闸后水位\n\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 闸阀状态\n  Survey_History_ZFZT: function Survey_History_ZFZT(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        // 历史表\n        tableName = \"zhafakongzhi/kaidulishi\";\n        break;\n\n      case \"openTimeTable\":\n        // 开启时长统计表\n        tableName = \"table/ST_Gatage_C\";\n        break;\n    }\n\n    axios.get(\"/guanqu/\".concat(tableName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // 根据不同类型的表，选择不同的过滤fangfa\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.tm = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 过闸流量\n\n              val.OD = FilterMethods.methods.Float_Filter(val.OD); // 闸门开度\n\n              val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ); // 闸前水位\n\n              val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸后水位\n\n              return val;\n            });\n            break;\n\n          case \"openTimeTable\":\n            newData = data.map(function (val) {\n              // val.DT = FilterMethods.methods.dateFilter(val.DT); // 时间\n              // val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\n              // val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z) // 平均水位\n              // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\n              return val;\n            });\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 运行工况\n  Survey_History_YXGK: function Survey_History_YXGK(tableType, body, filter, callBack) {\n    var tableName; // 根据不同类型的表，选择数据库中对应的表名\n\n    switch (tableType) {\n      case \"historyTable\":\n        // 历史表\n        tableName = \"ST_StationStatus_H\";\n        break;\n\n      case \"auxiliaryTable\":\n        tableName = \"ST_StationStatusType\";\n        break;\n    }\n\n    console.log(body);\n    axios.get(\"/guanqu/admin/\".concat(tableName), {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n\n        switch (tableType) {\n          case \"historyTable\":\n            newData = data.map(function (val) {\n              val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n\n              val.VOL = FilterMethods.methods.Float_Filter(val.VOL, 1); // 电压\n\n              val.CS = FilterMethods.methods.CS_Filter(val.CS); // 通讯状态\n\n              return val;\n            });\n            break;\n\n          case \"auxiliaryTable\":\n            // newData = data.map(val => {\n            //     val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n            //     val.VOL = FilterMethods.methods.Float_Filter(val.VOL); // 电压\n            //     val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\n            //     return val;\n            // })\n            break;\n        }\n\n        return newData;\n      }\n    });\n  },\n  // 获取运行工况正常电压范围\n  Survey_Around_YXGK: function Survey_Around_YXGK(tableType, body, filter, callBack) {\n    // var tableName;\n    // // 根据不同类型的表，选择数据库中对应的表名\n    // switch (tableType) {\n    //     case \"historyTable\": // 历史表\n    //         tableName = \"ST_StationStatus_H\"\n    //         break;\n    //\n    //     case \"auxiliaryTable\":\n    //         tableName = \"ST_StationStatusType\"\n    //         break;\n    // }\n    delete body.TM;\n    delete body._page_size;\n    delete body.Time_max;\n    delete body.Time_min;\n    axios.get(\"/guanqu/table/ST_StationStatusType\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData; // switch (tableType) {\n        //     case \"historyTable\":\n        //         newData = data.map(val => {\n        //             val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n        //             val.VOL = FilterMethods.methods.Float_Filter(val.VOL,1); // 电压\n        //             val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\n        //             return val;\n        //         })\n        //         break;\n        //\n        //     case \"auxiliaryTable\":\n        //         // newData = data.map(val => {\n        //         //     val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\n        //         //     val.VOL = FilterMethods.methods.Float_Filter(val.VOL); // 电压\n        //         //     val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\n        //         //     return val;\n        //         // })\n        //         break;\n        // }\n\n        return newData;\n      }\n    });\n  },\n  // 图像\n  Survey_History_TX: function Survey_History_TX(body, filter, callBack) {\n    axios.get(\"/guanqu/table/ST_JPG_H\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.list; // 数据\n\n      var total = res.data.total; // 数据总条数\n      // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          val.url = val.Save_Path; // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 视频\n  Survey_History_SP: function Survey_History_SP(body, filter, callBack) {\n    axios.get(\"/guanqu/shipin/gis\", {\n      params: body\n    }).then(function (res) {\n      var data = res.data.features; // 数据\n\n      var total = res.data.features.length; // 数据总条数\n\n      console.log(\"Survey_History_SP\", res.data.features); // 过滤\n\n      if (typeof filter == \"function\") {\n        // 如果传入的filte为过滤方法\n        data = filter(data, total);\n      } else if (typeof filter == \"boolean\" && filter) {\n        // 如果传入的filter为布尔值，并且为真\n        data = defaultFilter(data);\n      } else if (filter && filter.constructor == Object) {\n        // 如果传入的filter为对象\n        if (filter.default === undefined || filter.default) {\n          // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\n          data = defaultFilter(data);\n        }\n\n        if (filter.myFilter && typeof filter.myFilter == \"function\") {\n          // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\n          data = filter.myFilter(data);\n        }\n      } // 回调函数\n\n\n      if (typeof callBack == \"function\") {\n        // 如果传入的callBack为函数，执行回调函数\n        callBack({\n          data: data || [],\n          total: total\n        });\n      } // 默认过滤方法\n\n\n      function defaultFilter(data) {\n        var newData;\n        newData = data.map(function (val) {\n          // val.url = val.Save_Path; // 时间\n          // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\n          // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\n          return val;\n        });\n        return newData;\n      }\n    });\n  },\n  // 获取图层数据  /guanqu/zhafazhuangtai/gis\n  // 获取具有过滤条件的图层数据\n  getFeatrueLayer: function getFeatrueLayer(type, body, callback, errCallback) {\n    /*\r\n    type为数字，以下为不同数字对应图层\r\n    4: 渠道水情\r\n    5: 闸阀水情\r\n    6: 闸阀状态\r\n    7: 图像\r\n    8: 视频\r\n    */\n    var url = \"/guanqu/\".concat(type, \"/gis\"); // var body = {\n    //     // _filter: new Object()\n    // };\n    // // 增加过滤字段\n    // for (var key in fields) {\n    //     body[key] = fields[key];\n    // }\n\n    axios.post(url, body).then(function (res) {\n      if (typeof errCallback == \"function\") {\n        errCallback();\n      }\n\n      if (typeof callback == \"function\") {\n        callback(res);\n      }\n    });\n  }\n};",{"version":3,"sources":["D:\\work2022\\visualplace\\zhihuiguanqu\\src\\assets\\commonJS\\GetDataConfig.js"],"names":["FilterMethods","axios","Base_MonitoringSites","tableType","body","filter","callBack","tableName","get","params","then","res","data","list","total","defaultFilter","constructor","Object","default","undefined","myFilter","newData","map","val","TM","methods","dateFilter","Q","Float_Filter","VOL","Z","DT","A_Q","A_Z","WQ","DA_Q","DA_Z","DWQ","OD","UPZ","DWZ","Base_R_I","Base_B_I","Survey_History_SWKR","console","log","__url","INQ","OTQ","RZ","BLRZ","Min_TM","MON","YR","FWL","FWL79","Survey_History_YQ","P","p","statistics_rain_YQ","tbName","Time_min","substr","Time_max","Safe_History_DATA","jctype","url","mstm","spprwl","tm","spprwm","xhrdsval","xhrds","yhrdsval","yhrds","vrdsval","vrds","inel","Survey_History_SKSQ","Survey_History_HDSQ","Survey_History_QDSQ","DTT","MA_Q","MA_Z","MWQ","TMXQ","YMXQZ","JYQ","JYZ","Survey_History_ZFSQ","A_UPZ","A_DWZ","DA_UPZ","DA_DWZ","YE","MA_UPZ","MA_DWZ","SZ","EZ","JYSZ","JYEZ","Survey_History_ZFZT","Survey_History_YXGK","CS","CS_Filter","Survey_Around_YXGK","_page_size","Survey_History_TX","Save_Path","Survey_History_SP","features","length","getFeatrueLayer","type","callback","errCallback","post"],"mappings":"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","sourcesContent":["import FilterMethods from \"@/assets/commonJS/FilterMethods\";\r\nimport axios from 'axios';\r\nexport default {\r\n    // 基础数据\r\n\r\n    // 监测站点\r\n    Base_MonitoringSites(tableType, body, filter, callBack) {\r\n        var tableName;\r\n\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"basic\":\r\n                tableName = \"ST_STBPRP_B\";\r\n                break;\r\n            case \"MonitoringType\":\r\n                tableName = \"ST_STBPRP_F\";\r\n                break;\r\n            case \"RelatedElements\":\r\n                tableName = \"ST_STINFO_WRP\";\r\n                break;\r\n            case \"Z_Q_relation\":\r\n                tableName = \"ST_ZQRL_B\";\r\n                break;\r\n            case \"Gate_Z_Q_relation\":\r\n                tableName = \"ST_G_Q_Z\";\r\n                break;\r\n        }\r\n\r\n        axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\r\n                                val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"hourTable\":\r\n                            newData = data.map(val => {\r\n                                val.DT = FilterMethods.methods.dateFilter(val.DT); // 时间\r\n                                val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\r\n                                val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z) // 平均水位\r\n                                val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"dayTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"Z_Q_relation\":\r\n                            newData = data.map(val => {\r\n                                // val.YR = FilterMethods.methods.dateFilter(val.YR); // 年份\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\r\n                                val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"Gate_Z_Q_relation\":\r\n                            newData = data.map(val => {\r\n                                val.Q = FilterMethods.methods.dateFilter(val.Q, 3); // 流量\r\n                                val.OD = FilterMethods.methods.Float_Filter(val.OD); // 闸门开度\r\n                                val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ) // 闸前水位\r\n                                val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸后水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n\r\n                    }\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n    },\r\n    // 河流信息\r\n    Base_R_I(body, filter, callBack) {\r\n        axios.get(`/guanqu/admin/WRP_RVR_BSIN`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n\r\n                    newData = data.map(val => {\r\n                        // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                        // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\r\n                        // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                        return val;\r\n                    })\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n    },\r\n    // 流域信息\r\n    Base_B_I(body, filter, callBack) {\r\n        axios.get(`/guanqu/admin/WRP_LY_BSIN`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n\r\n                    newData = data.map(val => {\r\n                        // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                        // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\r\n                        // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                        return val;\r\n                    })\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n    },\r\n    // 监控模块\r\n\r\n    // 历史统计类\r\n\r\n    // 水库水情\r\n    Survey_History_SWKR(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"historyTable\":\r\n                tableName = \"single\";\r\n                break;\r\n            case \"hourTable\":\r\n                console.log('@@@@@@@@@@@@@@@@@@@'+tableType);\r\n                tableName = \"single_xiaoshi\";\r\n                break;\r\n            case \"dayTable\":\r\n                tableName = \"single_ri\";\r\n                break;\r\n            case \"monthTable\":\r\n                tableName = \"single_yue\";\r\n                break;\r\n            case \"overTime\":\r\n                tableName = \"single_chaoxunxianshijian\";\r\n                break;\r\n            case \"sishiTable\":\r\n                tableName = \"single_details\";\r\n                break;\r\n        }\r\n\r\n\r\n        var __url = `/guanqu/shuiweikurong/${tableName}`;\r\n        axios.get(__url, {\r\n            // axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM, null, null, 0); // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 水位\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ) // 水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"hourTable\":\r\n                            newData = data.map(val => {\r\n                                val.Min_TM = `${FilterMethods.methods.dateFilter(val.Min_TM, 2)}`;; // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库平均流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库平均流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 平均水位\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)//kuxia\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"dayTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM, null, \"onlyDate\"); // 时间\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 日平均水位\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日入库平均流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 日出库平均流量\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"tenDaysTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"monthTable\":\r\n                            newData = data.map(val => {\r\n                                if (parseInt(val.MON) < 10) {\r\n                                    val.MON = '0' + val.MON\r\n                                }\r\n                                val.DT = `${val.YR}-${val.MON}`; // 时间\r\n                                // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 月平均流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 月平均水位\r\n                                // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"yearTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"maxTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\r\n                                // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\r\n                                // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"alarmTable\":\r\n                            newData = data.map(val => {\r\n                                // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\r\n                                val.FWL = FilterMethods.methods.Float_Filter(val.FWL) // 4-6月汛限水位\r\n                                val.FWL79 = FilterMethods.methods.Float_Filter(val.FWL79) // 4-6月汛限水位\r\n                                // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\r\n                                // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"sishiTable\":\r\n                            newData = res.data\r\n                            break;\r\n\r\n                    }\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n\r\n    // 雨情\r\n    Survey_History_YQ(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"historyTable\":\r\n                tableName = \"single_lishi\";\r\n                break;\r\n            case \"hourTable\":\r\n                tableName = \"single_xiaoshi\";\r\n                break;\r\n            case \"dayTable\":\r\n                tableName = \"single_ri\";\r\n                break;\r\n            case \"tenDaysTable\":\r\n                tableName = \"single_xun\";\r\n                break;\r\n            case \"monthTable\":\r\n                tableName = \"single_yue\";\r\n                break;\r\n            case \"yearTable\":\r\n                tableName = \"single_nian\";\r\n                break;\r\n            case \"alarmTable\":\r\n                tableName = \"single_yujing\";\r\n                break;\r\n            case \"alarmTable_shangbao\":\r\n                tableName = \"single_yujingshangbao\";\r\n                break;\r\n        }\r\n\r\n        axios.get(`/guanqu/yuqing/${tableName}`, {\r\n            // axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\r\n                                // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"hourTable\":\r\n                            newData = data.map(val => {\r\n                                if (parseInt(val.TM) < 10) {\r\n                                    val.TM = `0${val.TM}`\r\n                                }\r\n                                // val.DT = `${val.DT} ${val.TM}`;; // 时间\r\n                                // val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\r\n                                val.P = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\r\n                                // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"dayTable\":\r\n                            newData = data.map(val => {\r\n\r\n                                console.log(val);\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.p = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\r\n                                if(val.p === '0.0'){\r\n                                    val.p = ''\r\n                                }\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"tenDaysTable\":\r\n                            newData = data.map(val => {\r\n                                console.log(val.P);\r\n                                if(val.P === '0.0'){\r\n                                    val.P = ''\r\n                                }\r\n                                // var DT = val.PTBGDT.split(\"-\"),\r\n                                //     Year = parseInt(DT[0]),\r\n                                //     Month = parseInt(DT[1]),\r\n                                //     Day = parseInt(DT[2]),\r\n                                //     Year_Month = `${Year}-${Month}`\r\n                                //\r\n                                // if (Day > 0 && Day <= 10) {\r\n                                //     val.PTBGDT = `${Year_Month} 上旬`\r\n                                // } else if (Day > 10 && Day <= 20) {\r\n                                //     val.PTBGDT = `${Year_Month} 中旬`\r\n                                // } else {\r\n                                //     val.PTBGDT = `${Year_Month} 下旬`\r\n                                // }\r\n\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"monthTable\":\r\n                            newData = data.map(val => {\r\n                                // if (parseInt(val.MON) < 10) {\r\n                                //     val.MON = '0'+val.MON\r\n                                // }\r\n                                if(val.P === '0.0'){\r\n                                    val.P = ''\r\n                                }\r\n                                // val.DT = `${val.YR}-${val.MON}`; // 时间\r\n                                // // val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 月平均流量\r\n                                // val.P = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\r\n                                // // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"yearTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                val.P = FilterMethods.methods.Float_Filter(val.P, 1) // 降雨量\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"alarmTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\r\n                                // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\r\n                                // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"alarmTable_shangbao\":\r\n                            newData = data.map(val => {\r\n                                // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\r\n                                // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 预警水位\r\n                                // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\r\n                                // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n\r\n                    }\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n\r\n    // 雨情雨量统计数据\r\n    statistics_rain_YQ(tableType, body, filter, callBack) {\r\n        // debugger;\r\n        let tbName = '';\r\n\r\n        switch (tableType) {\r\n            case \"historyTable\":\r\n                tbName = \"tongji_lishi\";\r\n                break;\r\n            case \"hourTable\":\r\n                tbName = \"tongji_xiaoshi\";\r\n                break;\r\n            case \"dayTable\":\r\n                body.Time_min = body.Time_min.substr(0, 10)\r\n                body.Time_max = body.Time_max.substr(0, 10)\r\n                tbName = \"tongji_ri\";\r\n                break;\r\n            case \"tenDaysTable\":\r\n                tbName = \"tongji_xun\";\r\n                break;\r\n            case \"monthTable\":\r\n                tbName = \"tongji_yue\";\r\n                break;\r\n            case \"yearTable\":\r\n                tbName = \"tongji_nian\";\r\n                break;\r\n            case \"alarmTable\":\r\n                tbName = \"tongji_yujing\";\r\n                break;\r\n            case \"alarmTable_shangbao\":\r\n                tbName = \"tongji_ujingshangbao\";\r\n                break;\r\n        }\r\n\r\n\r\n\r\n        axios.get(`/guanqu/yuqing/${tbName}`, { params: body }).then(res => {\r\n            var data = res.data; // 数据\r\n            var total = res.data.total; // 数据总条数\r\n\r\n\r\n            // 过滤\r\n            if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                data = filter(data, total);\r\n            } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                data = defaultFilter(data);\r\n            } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                    data = defaultFilter(data);\r\n                }\r\n                if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                    data = filter.myFilter(data)\r\n                }\r\n            }\r\n\r\n\r\n            // 回调函数\r\n            if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                callBack({\r\n                    data: data || [],\r\n                    total: total\r\n                })\r\n            }\r\n\r\n\r\n            // 默认过滤方法\r\n            function defaultFilter(data) {\r\n                var newData;\r\n                // 根据不同类型的表，选择不同的过滤fangfa\r\n                return newData;\r\n            }\r\n        })\r\n\r\n\r\n\r\n    },\r\n    //大坝安全监测历史数据\r\n    Safe_History_DATA(jctype,body,filter,callBack){\r\n        var url;\r\n        switch(jctype){\r\n            case \"sll\":\r\n                url=\"/guanqu/slldetail/lishi\";\r\n                break;\r\n            case \"slyl\":\r\n                url=\"/guanqu/slyldetail/lishi\";\r\n                break;\r\n            case \"wybx\":\r\n                url=\"/guanqu/spwydetail/lishi\";\r\n                break;\r\n            case \"cjbx\":\r\n                url=\"/guanqu/czwydetail/lishi\";\r\n                break;\r\n        }\r\n        axios.get(url, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (jctype) {\r\n                        case \"sll\":\r\n                            newData = data.map(val => {\r\n                                val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\r\n                                val.spprwl = FilterMethods.methods.Float_Filter(val.spprwl, 3); // 渗流量\r\n                                val.tm = FilterMethods.methods.Float_Filter(val.tm, 1); // 渗流水温\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"slyl\":\r\n                            newData = data.map(val => {\r\n                                val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\r\n                                val.spprwm = FilterMethods.methods.Float_Filter(val.spprwm, 3); // 渗压水位\r\n                                val.tm = FilterMethods.methods.Float_Filter(val.tm, 1); // 水温\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"wybx\":                           \r\n                            newData = data.map(val => {\r\n                                val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\r\n                                val.xhrdsval = FilterMethods.methods.Float_Filter(val.xhrds.substr(3), 3); // X向位移\r\n                                val.yhrdsval = FilterMethods.methods.Float_Filter(val.yhrds.substr(3), 3); // Y向位移\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"cjbx\":\r\n                            newData = data.map(val => {\r\n                                val.mstm = FilterMethods.methods.dateFilter(val.mstm, null, null, 0); // 时间\r\n                                val.vrdsval = FilterMethods.methods.Float_Filter(val.vrds.substr(2), 3); // 垂直位移\r\n                                val.inel = FilterMethods.methods.Float_Filter(val.inel, 3); // 测量高程\r\n                                return val;\r\n                            })\r\n                            break;\r\n                    }\r\n                    return newData;\r\n                }\r\n\r\n            })\r\n    },\r\n\r\n    // 水库水情\r\n    Survey_History_SKSQ(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"historyTable\":\r\n                tableName = \"single_lishi\";\r\n                break;\r\n            case \"hourTable\":\r\n                console.log('@@@@@@@@@@@@@@@@@@@'+tableType);\r\n                tableName = \"single_xiaoshi\";\r\n                break;\r\n            case \"dayTable\":\r\n                tableName = \"single_ri\";\r\n                break;\r\n            case \"monthTable\":\r\n                tableName = \"single_yue\";\r\n                break;\r\n            case \"maxZ\":\r\n                tableName = \"single_zuigaoshuiwe\";\r\n                break;\r\n            case \"alarmTable\":\r\n                tableName = \"single_yujing\";\r\n                break;\r\n            case \"overTime\":\r\n                tableName = \"single_chaoxunxianshijian\";\r\n                break;\r\n            case \"sishiTable\":\r\n                tableName = \"single_details\";\r\n                break;\r\n        }\r\n\r\n\r\n        var __url = `/guanqu/shuikushuiqing/${tableName}`;\r\n        axios.get(__url, {\r\n            // axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM, null, null, 0); // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 水位\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ) // 水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"hourTable\":\r\n                            newData = data.map(val => {\r\n                                val.Min_TM = `${FilterMethods.methods.dateFilter(val.Min_TM, 2)}`;; // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 入库平均流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 出库平均流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 平均水位\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)//kuxia\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"dayTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM, null, \"onlyDate\"); // 时间\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 日平均水位\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日入库平均流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 日出库平均流量\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"tenDaysTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"monthTable\":\r\n                            newData = data.map(val => {\r\n                                if (parseInt(val.MON) < 10) {\r\n                                    val.MON = '0' + val.MON\r\n                                }\r\n                                val.DT = `${val.YR}-${val.MON}`; // 时间\r\n                                // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\r\n                                val.OTQ = FilterMethods.methods.Float_Filter(val.OTQ, 3); // 月平均流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 月平均水位\r\n                                // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\r\n                                val.BLRZ = FilterMethods.methods.Float_Filter(val.BLRZ)\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"yearTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"maxTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\r\n                                // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\r\n                                // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"alarmTable\":\r\n                            newData = data.map(val => {\r\n                                // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\r\n                                val.FWL = FilterMethods.methods.Float_Filter(val.FWL) // 4-6月汛限水位\r\n                                val.FWL79 = FilterMethods.methods.Float_Filter(val.FWL79) // 4-6月汛限水位\r\n                                // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\r\n                                // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"sishiTable\":\r\n                            newData = res.data\r\n                            break;\r\n\r\n                    }\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n    // 河道水情\r\n    Survey_History_HDSQ(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"historyTable\":\r\n                tableName = \"single_lishi\";\r\n                break;\r\n            case \"hourTable\":\r\n                tableName = \"single_xiaoshi\";\r\n                break;\r\n            case \"dayTable\":\r\n                tableName = \"single_ri\";\r\n                break;\r\n            case \"monthTable\":\r\n                tableName = \"single_yue\";\r\n                break;\r\n            case \"maxZ\":\r\n                tableName = \"single_zuigaoshuiwe\";\r\n                break;\r\n            case \"alarmTable\":\r\n                tableName = \"single_yujing\";\r\n                break;\r\n            case \"overTime\":\r\n                tableName = \"single_chaoxunxianshijian\";\r\n                break;\r\n        }\r\n\r\n        axios.get(`/guanqu/hedaoshuiqing/${tableName}`, {\r\n            // axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\r\n                                val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"hourTable\":\r\n                            newData = data.map(val => {\r\n                                // val.DTT = `${FilterMethods.methods.dateFilter(val.DTT, 2)}`;; // 时间\r\n                                val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM, 2); // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 平均流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 平均水位\r\n                                // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"dayTable\":\r\n                            newData = data.map(val => {\r\n                                val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM, 2); // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 日平均流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"tenDaysTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"monthTable\":\r\n                            newData = data.map(val => {\r\n                                // val.Min_TM = FilterMethods.methods.dateFilter(val.Min_TM,null,\"onlyDate\"); // 时间\r\n                                if (parseInt(val.MON) < 10) {\r\n                                    val.MON = `0${val.MON}`;\r\n                                }\r\n                                val.DT = `${val.YR}-${val.MON}`; // 时间\r\n                                val.INQ = FilterMethods.methods.Float_Filter(val.INQ, 3); // 月平均流量\r\n                                val.RZ = FilterMethods.methods.Float_Filter(val.RZ) // 月平均水位\r\n                                // val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"yearTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                // val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                // val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                // val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"maxTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\r\n                                // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\r\n                                // val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"alarmTable\":\r\n                            newData = data.map(val => {\r\n                                // val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\r\n                                // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 预警水位\r\n                                // val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\r\n                                // val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n\r\n                    }\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n    // 渠道水情\r\n    Survey_History_QDSQ(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"historyTable\":\r\n                tableName = \"ST_Canal_R\";\r\n                break;\r\n            case \"hourTable\":\r\n                tableName = \"ST_HCanal_C\";\r\n                break;\r\n            case \"dayTable\":\r\n                tableName = \"ST_DCanal_C\";\r\n                break;\r\n            case \"monthTable\":\r\n                tableName = \"View_ST_MCanal_C\";\r\n                break;\r\n            case \"maxQTable\":\r\n                tableName = \"ST_G_CQORD\";\r\n                break;\r\n            case \"alarmTable\":\r\n                tableName = \"ST_Canal_Alarm\";\r\n                break;\r\n        }\r\n\r\n        axios.get(`/guanqu/table/${tableName}`, {\r\n            // axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量\r\n                                val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"hourTable\":\r\n                            newData = data.map(val => {\r\n                                val.DTT = `${FilterMethods.methods.dateFilter(val.DTT, 2)}`;; // 时间\r\n                                val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\r\n                                val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z) // 平均水位\r\n                                val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"dayTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 日平均流量\r\n                                val.DA_Z = FilterMethods.methods.Float_Filter(val.DA_Z) // 日平均水位\r\n                                val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"monthTable\":\r\n                            newData = data.map(val => {\r\n                                if (parseInt(val.MON) < 10) {\r\n                                    val.MON = '0' + val.MON\r\n                                }\r\n                                val.DT = `${val.YR}-${val.MON}`; // 时间\r\n                                val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 月平均流量\r\n                                val.MA_Z = FilterMethods.methods.Float_Filter(val.MA_Z) // 月平均水位\r\n                                val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"maxQTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\r\n                                val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\r\n                                val.YMXQZ = FilterMethods.methods.Float_Filter(val.YMXQZ) // 对应水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"alarmTable\":\r\n                            newData = data.map(val => {\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\r\n                                val.Z = FilterMethods.methods.Float_Filter(val.Z) // 预警水位\r\n                                val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\r\n                                val.JYZ = FilterMethods.methods.Float_Filter(val.JYZ); // 经验预警水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n\r\n                    }\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n    // 闸阀水情\r\n    Survey_History_ZFSQ(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        console.log(tableType);\r\n        switch (tableType) {\r\n            case \"historyTable\":\r\n                tableName = \"table/ST_WAS_R\";\r\n                break;\r\n            case \"hourTable\":\r\n                tableName = \"zhafashuiqing/item_xiaoshi\";\r\n                break;\r\n            case \"dayTable\":\r\n                tableName = \"table/ST_DWAS_C\";\r\n                break;\r\n            case \"monthTable\":\r\n                tableName = \"table/View_ST_MWAS_C\";\r\n                break;\r\n            case \"maxQTable\":\r\n                tableName = \"table/ST_G_WASQORD\";\r\n                break;\r\n            case \"alarmTable\":\r\n                tableName = \"table/ST_Gate_Alarm\";\r\n                break;\r\n        }\r\n\r\n        axios.get(`/guanqu/${tableName}`, {\r\n            // axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 日期过滤\r\n                                val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ); // 闸阀前水位过滤\r\n                                val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ); // 闸阀后水位过滤\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 流量过滤\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"hourTable\":\r\n                            newData = data.map(val => {\r\n                                val.DTT = `${FilterMethods.methods.dateFilter(val.DTT, 2)}`; // 时间\r\n                                val.A_UPZ = FilterMethods.methods.Float_Filter(val.A_UPZ); // 平均闸阀前水位过滤\r\n                                val.A_DWZ = FilterMethods.methods.Float_Filter(val.A_DWZ); // 平均闸阀后水位过滤\r\n                                val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 过闸平均流量过滤\r\n                                val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计过闸水量过滤\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"dayTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 日期过滤\r\n                                val.DA_UPZ = FilterMethods.methods.Float_Filter(val.DA_UPZ); // 平均闸阀前水位过滤\r\n                                val.DA_DWZ = FilterMethods.methods.Float_Filter(val.DA_DWZ); // 平均闸阀后水位过滤\r\n                                val.DA_Q = FilterMethods.methods.Float_Filter(val.DA_Q, 3); // 平均过闸流量过滤\r\n                                val.DWQ = FilterMethods.methods.Float_Filter(val.DWQ, 3); // 日累计过闸水量过滤\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"monthTable\":\r\n                            newData = data.map(val => {\r\n                                if (parseInt(val.MON) < 10) {\r\n                                    val.MON = '0' + val.MON\r\n                                }\r\n                                val.TM = `${val.YR}-${val.MON}`\r\n                                val.DTT = `${val.YE}-${val.MON}`\r\n                                val.MA_UPZ = FilterMethods.methods.Float_Filter(val.MA_UPZ); // 平均闸阀前水位过滤\r\n                                val.MA_DWZ = FilterMethods.methods.Float_Filter(val.MA_DWZ); // 平均闸阀后水位过滤\r\n                                val.MA_Q = FilterMethods.methods.Float_Filter(val.MA_Q, 3); // 平均过闸流量过滤\r\n                                val.MWQ = FilterMethods.methods.Float_Filter(val.MWQ, 3); // 月累计过闸水量过滤\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"maxQTable\":\r\n                            newData = data.map(val => {\r\n                                // val.TMMXQ = FilterMethods.methods.dateFilter(val.TMMXQ); // 年最大流量时间\r\n                                // val.TMXQ = FilterMethods.methods.Float_Filter(val.TMXQ, 3); // 年最大流量\r\n                                // val.YMXUPQZ = FilterMethods.methods.Float_Filter(val.YMXUPQZ) // 对应闸前水位\r\n                                // val.YMXDNQZ = FilterMethods.methods.Float_Filter(val.YMXDNQZ) // 对应闸后水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"alarmTable\":\r\n                            newData = data.map(val => {\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 预警流量\r\n                                val.SZ = FilterMethods.methods.Float_Filter(val.SZ) // 预警闸前水位\r\n                                val.EZ = FilterMethods.methods.Float_Filter(val.EZ) // 预警闸后水位\r\n                                val.JYQ = FilterMethods.methods.Float_Filter(val.JYQ, 3); // 经验预警流量\r\n                                val.JYSZ = FilterMethods.methods.Float_Filter(val.JYSZ); // 经验预警闸前水位\r\n                                val.JYEZ = FilterMethods.methods.Float_Filter(val.JYEZ); // 经验预警闸后水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n\r\n                    }\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n    // 闸阀状态\r\n    Survey_History_ZFZT(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"historyTable\": // 历史表\r\n                tableName = \"zhafakongzhi/kaidulishi\"\r\n                break;\r\n\r\n            case \"openTimeTable\": // 开启时长统计表\r\n                tableName = \"table/ST_Gatage_C\"\r\n                break;\r\n        }\r\n\r\n        axios.get(`/guanqu/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {  \r\n                    var newData;\r\n                    // 根据不同类型的表，选择不同的过滤fangfa\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.tm = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                val.Q = FilterMethods.methods.Float_Filter(val.Q, 3); // 过闸流量\r\n                                val.OD = FilterMethods.methods.Float_Filter(val.OD) // 闸门开度\r\n                                val.UPZ = FilterMethods.methods.Float_Filter(val.UPZ) // 闸前水位\r\n                                val.DWZ = FilterMethods.methods.Float_Filter(val.DWZ) // 闸后水位\r\n                                return val;\r\n                            })\r\n                            break;\r\n                        case \"openTimeTable\":\r\n                            newData = data.map(val => {\r\n                                // val.DT = FilterMethods.methods.dateFilter(val.DT); // 时间\r\n                                // val.A_Q = FilterMethods.methods.Float_Filter(val.A_Q, 3); // 平均流量\r\n                                // val.A_Z = FilterMethods.methods.Float_Filter(val.A_Z) // 平均水位\r\n                                // val.WQ = FilterMethods.methods.Float_Filter(val.WQ, 3); // 小时累计水量\r\n                                return val;\r\n                            })\r\n                            break;\r\n                    }\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n    // 运行工况\r\n    Survey_History_YXGK(tableType, body, filter, callBack) {\r\n        var tableName;\r\n        // 根据不同类型的表，选择数据库中对应的表名\r\n        switch (tableType) {\r\n            case \"historyTable\": // 历史表\r\n                tableName = \"ST_StationStatus_H\"\r\n                break;\r\n\r\n            case \"auxiliaryTable\":\r\n                tableName = \"ST_StationStatusType\"\r\n                break;\r\n        }\r\n\r\n        console.log(body);\r\n\r\n        axios.get(`/guanqu/admin/${tableName}`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    switch (tableType) {\r\n                        case \"historyTable\":\r\n                            newData = data.map(val => {\r\n                                val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                                val.VOL = FilterMethods.methods.Float_Filter(val.VOL, 1); // 电压\r\n                                val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\r\n                                return val;\r\n                            })\r\n                            break;\r\n\r\n                        case \"auxiliaryTable\":\r\n                            // newData = data.map(val => {\r\n                            //     val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                            //     val.VOL = FilterMethods.methods.Float_Filter(val.VOL); // 电压\r\n                            //     val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\r\n                            //     return val;\r\n                            // })\r\n                            break;\r\n                    }\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n    },\r\n\r\n\r\n\r\n    // 获取运行工况正常电压范围\r\n    Survey_Around_YXGK(tableType, body, filter, callBack) {\r\n        // var tableName;\r\n        // // 根据不同类型的表，选择数据库中对应的表名\r\n        // switch (tableType) {\r\n        //     case \"historyTable\": // 历史表\r\n        //         tableName = \"ST_StationStatus_H\"\r\n        //         break;\r\n        //\r\n        //     case \"auxiliaryTable\":\r\n        //         tableName = \"ST_StationStatusType\"\r\n        //         break;\r\n        // }\r\n        delete body.TM;\r\n        delete body._page_size;\r\n        delete body.Time_max;\r\n        delete body.Time_min\r\n\r\n        axios.get(`/guanqu/table/ST_StationStatusType`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n                    // switch (tableType) {\r\n                    //     case \"historyTable\":\r\n                    //         newData = data.map(val => {\r\n                    //             val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                    //             val.VOL = FilterMethods.methods.Float_Filter(val.VOL,1); // 电压\r\n                    //             val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\r\n                    //             return val;\r\n                    //         })\r\n                    //         break;\r\n                    //\r\n                    //     case \"auxiliaryTable\":\r\n                    //         // newData = data.map(val => {\r\n                    //         //     val.TM = FilterMethods.methods.dateFilter(val.TM); // 时间\r\n                    //         //     val.VOL = FilterMethods.methods.Float_Filter(val.VOL); // 电压\r\n                    //         //     val.CS = FilterMethods.methods.CS_Filter(val.CS) // 通讯状态\r\n                    //         //     return val;\r\n                    //         // })\r\n                    //         break;\r\n                    // }\r\n                    return newData;\r\n                }\r\n            })\r\n\r\n\r\n\r\n    },\r\n    // 图像\r\n    Survey_History_TX(body, filter, callBack) {\r\n        axios.get(`/guanqu/table/ST_JPG_H`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.list; // 数据\r\n                var total = res.data.total; // 数据总条数\r\n\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n\r\n                    newData = data.map(val => {\r\n                        val.url = val.Save_Path; // 时间\r\n                        // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\r\n                        // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                        return val;\r\n                    })\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n    },\r\n\r\n\r\n    // 视频\r\n    Survey_History_SP(body, filter, callBack) {\r\n        axios.get(`/guanqu/shipin/gis`, {\r\n            params: body\r\n        })\r\n            .then(res => {\r\n\r\n                var data = res.data.features; // 数据\r\n                var total = res.data.features.length; // 数据总条数\r\n                console.log(\"Survey_History_SP\",res.data.features);\r\n                // 过滤\r\n                if (typeof filter == \"function\") { // 如果传入的filte为过滤方法\r\n                    data = filter(data, total);\r\n                } else if (typeof filter == \"boolean\" && filter) { // 如果传入的filter为布尔值，并且为真\r\n\r\n                    data = defaultFilter(data);\r\n                } else if (filter && filter.constructor == Object) { // 如果传入的filter为对象\r\n                    if (filter.default === undefined || filter.default) { // 如果对象的defaul字段未设置或者值为真，则采用默认过滤\r\n                        data = defaultFilter(data);\r\n                    }\r\n                    if (filter.myFilter && typeof filter.myFilter == \"function\") { // 如果对象的myFilter字段存在并且为函数，采用此方法过滤一次data\r\n                        data = filter.myFilter(data)\r\n                    }\r\n                }\r\n\r\n                // 回调函数\r\n                if (typeof callBack == \"function\") { // 如果传入的callBack为函数，执行回调函数\r\n                    callBack({\r\n                        data: data || [],\r\n                        total: total\r\n                    })\r\n                }\r\n\r\n\r\n                // 默认过滤方法\r\n                function defaultFilter(data) {\r\n                    var newData;\r\n\r\n                    newData = data.map(val => {\r\n                        // val.url = val.Save_Path; // 时间\r\n                        // val.Q = FilterMethods.methods.Float_Filter(val.VOL, 3); // 流量\r\n                        // val.Z = FilterMethods.methods.Float_Filter(val.Z) // 水位\r\n                        return val;\r\n                    })\r\n\r\n                    return newData;\r\n                }\r\n            })\r\n    },\r\n\r\n    // 获取图层数据  /guanqu/zhafazhuangtai/gis\r\n    // 获取具有过滤条件的图层数据\r\n    getFeatrueLayer(type, body, callback, errCallback) {\r\n        /*\r\n        type为数字，以下为不同数字对应图层\r\n        4: 渠道水情\r\n        5: 闸阀水情\r\n        6: 闸阀状态\r\n        7: 图像\r\n        8: 视频\r\n        */\r\n\r\n        var url = `/guanqu/${type}/gis`;\r\n\r\n        // var body = {\r\n        //     // _filter: new Object()\r\n        // };\r\n        // // 增加过滤字段\r\n        // for (var key in fields) {\r\n        //     body[key] = fields[key];\r\n        // }\r\n\r\n        axios.post(url, body).then(res => {\r\n            if (typeof errCallback == \"function\") {\r\n                errCallback();\r\n            }\r\n            if (typeof callback == \"function\") {\r\n                callback(res);\r\n            }\r\n        });\r\n\r\n    },\r\n}\r\n"]}]}