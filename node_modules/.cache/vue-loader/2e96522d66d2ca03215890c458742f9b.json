{"remainingRequest":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-hedaoshuiqing.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\huangcaiplace\\zhihuiguanqu\\src\\components\\Details\\Details-hedaoshuiqing.vue","mtime":1577669404023},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\huangcaiplace\\zhihuiguanqu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport FilterMethods from \"../../assets/commonJS/FilterMethods\"; // 过滤方法\r\nimport GetDataMethods from \"../../assets/commonJS/GetDataMethods\"; // 获取数据方法\r\nimport { timingSafeEqual } from \"crypto\";\r\nimport { type } from \"os\";\r\nimport { types } from \"util\";\r\nimport { stat } from \"fs\";\r\nimport { filter } from \"minimatch\";\r\nexport default {\r\n  props: {\r\n    info: {}\r\n  },\r\n  data() {\r\n    return {\r\n      // 激活标签栏\r\n      activeName: \"shuiqingshuju\",\r\n      // 站点\r\n      siteInfo: {},\r\n      //   多选框对象\r\n      checkBox: {},\r\n      //   选择框对象\r\n      select: {\r\n        // 当前激活的水情数据快速查询选项\r\n        activeQuickSearchList: [],\r\n        // 查询绑定值\r\n        select: \"rec6\",\r\n        // 日期选择器绑定值\r\n        shuiqing_datePicker: null,\r\n        // 水情数据历史表\r\n        shuiqingList: [\r\n          {\r\n            value: \"historyTable\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            label: \"历史表\"\r\n          },\r\n          {\r\n            value: \"hourTable\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            label: \"小时表\"\r\n          },\r\n          {\r\n            value: \"dayTable\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            label: \"日表\"\r\n          },\r\n          {\r\n            value: \"monthTable\",\r\n            size: \"small\",\r\n            // iconType: \"logo-facebook\",\r\n            label: \"月表\"\r\n          }\r\n        ],\r\n        // 水情数据历史表绑定值\r\n        shuiqing_select: \" \"\r\n      },\r\n      // 表格\r\n      table: {\r\n        // 水情\r\n        shuiqing: {\r\n          // 表头设置\r\n          columns: {\r\n            // 历史表\r\n            historyTable: [\r\n              {\r\n                type: \"index\",\r\n                title: \" \",\r\n                width: 60,\r\n                align: \"center\",\r\n                // 自定义序号\r\n                indexMethod(item) {\r\n                  var index =\r\n                    item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n                  return index;\r\n                },\r\n                ellipsis: true\r\n              },\r\n              {\r\n                title: \"时间\",\r\n                key: \"tm\",\r\n                width: 150,\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                title: \"水位(m)\",\r\n                // width: 130,\r\n                key: \"Z\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                // width: 130,\r\n                title: \"流量(m³/s)\",\r\n                key: \"Q\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              }\r\n            ],\r\n            // 小时表\r\n            hourTable: [\r\n              {\r\n                title: \" \",\r\n                type: \"index\",\r\n                width: 50,\r\n                align: \"center\",\r\n                // 自定义序号\r\n                indexMethod(item) {\r\n                  var index =\r\n                    item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n                  return index;\r\n                },\r\n                ellipsis: true\r\n              },\r\n              {\r\n                title: \"时间\",\r\n                key: \"DT\",\r\n                // width: 150,\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                title: \"平均水位(m)\",\r\n                width: 150,\r\n                key: \"RZ\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                width: 150,\r\n                title: \"平均流量(m³/s)\",\r\n                key: \"INQ\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              }\r\n            ],\r\n            // 日表\r\n            dayTable: [\r\n              {\r\n                title: \" \",\r\n                type: \"index\",\r\n                width: 50,\r\n                align: \"center\",\r\n                // 自定义序号\r\n                indexMethod(item) {\r\n                  var index =\r\n                    item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                  return index;\r\n                },\r\n                ellipsis: true\r\n              },\r\n              {\r\n                title: \"时间\",\r\n                key: \"TM\",\r\n                // width: 150,\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                title: \"平均水位(m)\",\r\n                width: 150,\r\n                key: \"RZ\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                width: 150,\r\n                title: \"平均流量(m³/s)\",\r\n                key: \"INQ\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              }\r\n            ],\r\n            // 月表\r\n            monthTable: [\r\n              {\r\n                title: \" \",\r\n                type: \"index\",\r\n                width: 50,\r\n                align: \"center\",\r\n                // 自定义序号\r\n                indexMethod(item) {\r\n                  var index =\r\n                    item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                  return index;\r\n                },\r\n                ellipsis: true\r\n              },\r\n              {\r\n                title: \"时间\",\r\n                key: \"dt\",\r\n                // width: 150,\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                title: \"平均水位(m)\",\r\n                width: 150,\r\n                key: \"RZ\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              },\r\n              {\r\n                width: 150,\r\n                title: \"平均流量(m³/s)\",\r\n                key: \"INQ\",\r\n                align: \"center\",\r\n                sortable: \"custom\"\r\n              }\r\n            ]\r\n          },\r\n          // 正在激活的表头\r\n          activeColumns: [],\r\n          // 表体内容\r\n          Rows: [],\r\n          // 过滤后的表体内容\r\n          Rows_filter: [],\r\n          // 日期时间选择器的选项配置\r\n          datePickerOptions: {\r\n            historyTable: {\r\n              shortcuts: [\r\n                {\r\n                  text: \"最近6小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 6);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近12小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 12);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近24小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近36小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 36);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近72小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 72);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                }\r\n              ]\r\n            },\r\n            hourTable: {\r\n              shortcuts: [\r\n                {\r\n                  text: \"最近6小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 6);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近12小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 12);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近24小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近36小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 36);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近72小时\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 72);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                }\r\n              ]\r\n            },\r\n            dayTable: {\r\n              shortcuts: [\r\n                {\r\n                  text: \"最近10天\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 10);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近15天\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 15);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近30天\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近60天\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 60);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                },\r\n                {\r\n                  text: \"最近90天\",\r\n                  onClick(picker) {\r\n                    const end = new Date();\r\n                    const start = new Date();\r\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\r\n                    picker.$emit(\"pick\", [start, end]);\r\n                  }\r\n                }\r\n              ]\r\n            },\r\n            monthTable: {\r\n              shortcuts: []\r\n            }\r\n          },\r\n          // 日期时间选择器类型\r\n          datePickerType: \"date\",\r\n          // 日期时间选择器值\r\n          date: null,\r\n          // 排序\r\n          sort: null,\r\n          // 表格是否加载中\r\n          loading: false,\r\n          // 总条数\r\n          total: 0,\r\n          // 当前页\r\n          currentPage: 1,\r\n          // 每页显示数量\r\n          pageSizes: 20,\r\n          // 表格高度\r\n          height: 430\r\n        },\r\n        // 特征水位\r\n        tezhengshuiqing: {\r\n          // 表头设置\r\n          columns: [\r\n            {\r\n              title: \" \",\r\n              type: \"index\",\r\n              width: 50,\r\n              align: \"center\",\r\n              // 自定义序号\r\n              indexMethod(item) {\r\n                var index =\r\n                  item._index + 1 + (item.currentPage - 1) * item.pageSizes;\r\n\r\n                return index;\r\n              },\r\n              ellipsis: true\r\n            },\r\n            {\r\n              title: \"最高水位时间\",\r\n              // width: 130,\r\n              key: \"TMHZ\",\r\n              align: \"center\",\r\n              sortable: true\r\n            },\r\n            {\r\n              title: \"年最高水位(m)\",\r\n              key: \"THZ\",\r\n              width: 150,\r\n              align: \"center\",\r\n              sortable: true\r\n            }\r\n          ],\r\n          // 表体内容\r\n          Rows: [],\r\n          // 过滤后的表体内容\r\n          Rows_filter: [],\r\n          // 总条数\r\n          total: 0,\r\n          // 表格是否加载中\r\n          loading: false,\r\n          // 当前页\r\n          currentPage: 1,\r\n          // 日期时间选择器值\r\n          date: null,\r\n          // 日期时间选择器的选项配置\r\n          datePickerOptions: {\r\n            shortcuts: [\r\n              {\r\n                text: \"最近5年\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              },\r\n              {\r\n                text: \"最近3年\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 3);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              },\r\n              {\r\n                text: \"最近2年\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 2);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              },\r\n              {\r\n                text: \"最近1年\",\r\n                onClick(picker) {\r\n                  const end = new Date();\r\n                  const start = new Date();\r\n                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 1);\r\n                  picker.$emit(\"pick\", [start, end]);\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          // 表格高度\r\n          height: 410,\r\n          // 每页显示数量\r\n          pageSizes: 20,\r\n          alarmData: {\r\n            AWL: \"\", // 警戒水位\r\n            SJWL: \"\", // 设计洪水位\r\n            XHWL: \"\", // 校核洪水位\r\n            JYWL: \"\" // 经验水位\r\n          }\r\n        }\r\n      },\r\n      // 图形\r\n      chart: {\r\n        shuiqing: null\r\n      },\r\n      //   日期数据\r\n      date: {\r\n        shuiqing: \"\"\r\n      },\r\n      // 输入框对象\r\n      input: {\r\n        // 关系曲线换算的\r\n        huansuan: {\r\n          waterLever: \"\",\r\n          flowLever: \"\"\r\n        }\r\n      },\r\n      //   导出按钮加载控制\r\n      outPutLoading: false,\r\n      //   导出确认对话框控制\r\n      outPutModal: false,\r\n      // 整块区域的加载控制\r\n      boxLoading: false,\r\n      //警戒信息\r\n      yujingdata: {}\r\n    };\r\n  },\r\n  mixins: [FilterMethods, GetDataMethods],\r\n  methods: {\r\n    //   导出站点信息\r\n    outPutSiteInfo() {\r\n      //   关闭导出确认对话框\r\n      this.outPutModal = false;\r\n      //   按钮加载\r\n      this.outPutLoading = true;\r\n      setTimeout(() => {\r\n        this.outPutLoading = false;\r\n        this.$Modal.success({\r\n          title: \"关于导出\",\r\n          content: \"站点信息表导出成功\"\r\n        });\r\n      }, 500);\r\n    },\r\n    //   确认导出\r\n    outPutSure() {\r\n      this.outPutSiteInfo();\r\n    },\r\n    // 日期时间选择器变化触发事件\r\n    // handleDatePickerChange(val, valType) {\r\n    //   var timeInterval = `${val[0].replace(/\\//g, \"-\")},${val[1].replace(\r\n    //     /\\//g,\r\n    //     \"-\"\r\n    //   )}`;\r\n    //   this.select.shuiqing_datePicker = timeInterval;\r\n    // },\r\n    datePicke_on_ok(tableType) {\r\n      this.table[\"shuiqing\"].currentPage = 1; // 重置当前页\r\n      this.table.shuiqing.loading = true; // 表格加载中\r\n      var body = {\r\n        STCD: this.siteInfo.STCD,\r\n        TM: `bt,${this.select.shuiqing_datePicker}`\r\n      };\r\n      var pageSizes = this.table.shuiqing.pageSizes;\r\n      var currentPage = 1;\r\n      this.getTableData_shuiqing(\r\n        tableType,\r\n        pageSizes,\r\n        currentPage,\r\n        body,\r\n        data => {\r\n          this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n          this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\r\n          this.table.shuiqing.loading = false; // 取消表格加载\r\n        }\r\n      );\r\n    },\r\n    // 查询\r\n    search_shuiqing(tableType) {\r\n      var tableType = tableType || this.select.shuiqing_select;\r\n      this.letTableLoading(\"shuiqing\"); // 表格加载中\r\n\r\n      // 传递参数\r\n      var body = {\r\n        STCD: this.siteInfo.STCD,\r\n        _page: this.table.shuiqing.currentPage || 1,\r\n        _page_size: this.table.shuiqing.pageSizes || 20\r\n      };\r\n\r\n      // 如果有选择排序，则传递排序参数\r\n      if (this.table.shuiqing.sort) {\r\n        var _sort = this.$FilterData.sort_Filter(this.table.shuiqing.sort);\r\n        if (_sort) {\r\n          body._orderby = _sort;\r\n        }\r\n      }\r\n\r\n      // 如果有选择日期进行查询，根据表格类型传递参数\r\n      if (this.table.shuiqing.date) {\r\n        switch (tableType) {\r\n          case \"historyTable\":\r\n            var DTT = this.$FilterData\r\n              .elDatePicker_Filter(this.table.shuiqing.date)\r\n              .split(\",\");\r\n            body.Time_min = DTT[1];\r\n            body.Time_max = DTT[2];\r\n            break;\r\n          case \"dayTable\":\r\n            var DTT = this.$FilterData\r\n              .elDatePicker_Filter(this.table.shuiqing.date)\r\n              .split(\",\");\r\n            body.Time_min = DTT[1];\r\n            body.Time_max = DTT[2];\r\n            break;\r\n          case \"hourTable\":\r\n            var DTT = this.$FilterData\r\n              .elDatePicker_Filter(this.table.shuiqing.date)\r\n              .split(\",\");\r\n            body.Time_min = DTT[1];\r\n            body.Time_max = DTT[2];\r\n            break;\r\n          case \"monthTable\":\r\n            var DTT = this.$FilterData\r\n              .elDatePicker_Filter(this.table.shuiqing.date)\r\n              .split(\",\");\r\n            body.Time_min = DTT[1].substr(0, 7);\r\n            body.Time_max = DTT[2].substr(0, 7);\r\n            // body.YE = this.$FilterData.elDatePicker_Filter(\r\n            //   this.table.shuiqing.date,\r\n            //   \"monthTable\"\r\n            // ).YE;\r\n            // body.MON = this.$FilterData.elDatePicker_Filter(\r\n            //   this.table.shuiqing.date,\r\n            //   \"monthTable\"\r\n            // ).MON;\r\n            break;\r\n        }\r\n      }\r\n\r\n      // 获取渠道水情历史数据\r\n      this.$GetData.Survey_History_HDSQ(\r\n        tableType,\r\n        body,\r\n        {\r\n          default: true,\r\n          myFilter: data => {\r\n            data.map(val => {\r\n              val.currentPage = body._page;\r\n              val.pageSizes = body._page_size;\r\n              return val;\r\n            });\r\n            return data;\r\n          }\r\n        },\r\n        data => {\r\n          this.setTableTotal(\"shuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n          this.setTableData(\"shuiqing\", data.data); // 更新水情历史数据表的数据\r\n\r\n          body._page_size = 999999999;\r\n          body._page = 1;\r\n          this.$GetData.Survey_History_HDSQ(\r\n            tableType,\r\n            body,\r\n            {\r\n              default: true,\r\n              myFilter: data => {\r\n                data.map(val => {\r\n                  val.currentPage = body._page;\r\n                  val.pageSizes = body._page_size;\r\n                  return val;\r\n                });\r\n                return data;\r\n              }\r\n            },\r\n            chartData => {\r\n              this.createChart_shuiqingshuju(\r\n                \"shuiqingChart\",\r\n                tableType,\r\n                chartData.data\r\n              ); // 水情表格\r\n            }\r\n          );\r\n\r\n          this.cancelTableLoading(\"shuiqing\"); // 取消表格加载\r\n        }\r\n      );\r\n    },\r\n    // 查询关系曲线表格\r\n    search_guanxiquxian() {\r\n      this.letTableLoading(\"guanxiquxian\");\r\n\r\n      // 传递参数\r\n      var body = {\r\n        STCD: this.siteInfo.STCD,\r\n        _page: this.table[\"guanxiquxian\"].currentPage || 1,\r\n        _page_size: this.table[\"guanxiquxian\"].pageSizes || 20\r\n      };\r\n      // console.log('body',body);\r\n      // 如果有选择日期进行查询，根据表格类型传递参数\r\n      if (this.table.guanxiquxian.date) {\r\n        body.YR = this.$FilterData.elDatePicker_Filter(\r\n          this.table.guanxiquxian.date,\r\n          \"onlyYear\"\r\n        );\r\n      }\r\n\r\n      this.$GetData.Base_MonitoringSites(\r\n        \"Z_Q_relation\",\r\n        body,\r\n        {\r\n          default: true,\r\n          myFilter: data => {\r\n            data.map(val => {\r\n              val.currentPage = body._page;\r\n              val.pageSizes = body._page_size;\r\n              return val;\r\n            });\r\n            return data;\r\n          }\r\n        },\r\n        data => {\r\n          this.setTableTotal(\"guanxiquxian\", data.total);\r\n          this.setTableData(\"guanxiquxian\", data.data);\r\n          this.cancelTableLoading(\"guanxiquxian\");\r\n        }\r\n      );\r\n    },\r\n    // 设置表格总条数\r\n    setTableTotal(tableName, total) {\r\n      this.table[tableName].total = total;\r\n    },\r\n    // 表格加载中\r\n    letTableLoading(tableName) {\r\n      this.table[tableName].loading = true;\r\n    },\r\n    // 取消表格加载\r\n    cancelTableLoading(tableName) {\r\n      this.table[tableName].loading = false;\r\n    },\r\n    // 绘图\r\n    createChart_guanxiquxian(idName) {\r\n      let myChart = this.$echarts.init(document.getElementById(idName));\r\n\r\n      myChart.setOption({\r\n        title: {\r\n          // text: this.info.STNM\r\n          // subtext: \"纯属虚构\"\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\"\r\n        },\r\n        legend: {\r\n          data: [\"流量\", \"水位\"]\r\n        },\r\n        toolbox: {\r\n          show: true,\r\n          feature: {\r\n            mark: { show: true },\r\n            dataView: { show: true, readOnly: false },\r\n            magicType: { show: true, type: [\"line\", \"bar\"] },\r\n            restore: { show: true },\r\n            saveAsImage: { show: true }\r\n          }\r\n        },\r\n        calculable: true,\r\n        xAxis: [\r\n          {\r\n            type: \"category\",\r\n            boundaryGap: false,\r\n            data: [\r\n              \"00:00-02:00\",\r\n              \"02:00-04:00\",\r\n              \"04:00-06:00\",\r\n              \"06:00-08:00\",\r\n              \"08:00-10:00\"\r\n            ]\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            name: \"流量 m³/s\",\r\n            type: \"value\",\r\n            axisLabel: {\r\n              formatter: \"{value}\"\r\n            }\r\n          },\r\n          {\r\n            name: \"水位 m\",\r\n            type: \"value\",\r\n            axisLabel: {\r\n              formatter: \"{value} \"\r\n            }\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: \"流量\",\r\n            type: \"line\",\r\n            data: [11, 11, 15, 13, 12, 13, 10],\r\n            markLine: {\r\n              data: [{ type: \"average\", name: \"平均值\" }]\r\n            }\r\n          },\r\n          {\r\n            name: \"水位\",\r\n            type: \"line\",\r\n            data: [1, 4, 2, 5, 3, 2, 0],\r\n            yAxisIndex: 1,\r\n            markLine: {\r\n              data: [{ type: \"average\", name: \"平均值\" }],\r\n              effect: {\r\n                show: false,\r\n                loop: true,\r\n                period: 15,\r\n                scaleSize: 10,\r\n                color: null,\r\n                shadowColor: null,\r\n                shadowBlur: null\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      });\r\n    },\r\n\r\n    // 制图\r\n    createChart_shuiqingshuju(id, tableType, data) {\r\n      var ele = document.getElementById(id);\r\n      console.log(\"tableType\", tableType);\r\n      if (data.length > 0) {\r\n        var echartData = this.$App.transform_HDSQ_data_into_ehart_data(\r\n          data,\r\n          tableType,\r\n          true\r\n        ); // 渠道水情历史统计表数据 转 ehart图形用数据 返回一个对象, 对象里分别装 Y1轴对象 Y2轴对象 X轴对象\r\n        console.log(\"echartData\", echartData);\r\n        if (!this.chart.shuiqing) {\r\n          this.chart.shuiqing = this.$echarts.init(ele);\r\n        }\r\n        this.chart.shuiqing.setOption({\r\n          title: {\r\n            text: echartData.chartName\r\n          },\r\n          tooltip: {\r\n            trigger: \"axis\"\r\n          },\r\n          grid: {\r\n            left: \"20%\"\r\n          },\r\n          legend: {\r\n            data: [echartData.y1.name],\r\n            y: \"bottom\",\r\n            top: 330,\r\n          },\r\n          toolbox: {\r\n            show: true,\r\n            feature: {\r\n              mark: { show: true },\r\n              magicType: { show: true, type: [\"line\", \"bar\"] },\r\n              restore: { show: true },\r\n              saveAsImage: { show: true }\r\n            }\r\n          },\r\n          calculable: true,\r\n          animation: true,\r\n          xAxis: [\r\n            {\r\n              type: \"category\",\r\n              boundaryGap: false,\r\n              data: echartData.x.list,\r\n              axisTick: {\r\n                interval: function(index, val) {\r\n                  var listLength = echartData.x.list.length;\r\n                  if (listLength >= 4) {\r\n                    var tick = Math.round(listLength / 4);\r\n                    // console.log((index + 1) % tick === 0);\r\n                    // console.log('1575listLength',listLength);\r\n                    // console.log('1576tick',tick);\r\n                    if ((index + 1) % tick === 0) {\r\n                      return true;\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                },\r\n                length: 10\r\n              },\r\n              axisLabel: {\r\n                interval: function(index, val) {\r\n                  var listLength = echartData.x.list.length;\r\n                  if (listLength >= 4) {\r\n                    var tick = Math.round(listLength / 4);\r\n                    // console.log('1575listLength',listLength);\r\n                    // console.log('1576tick',tick);\r\n                    let a = (index + 1) % tick;\r\n                    if ((index + 1) % tick === 0) {\r\n                      return true;\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  } else {\r\n                    return true;\r\n                  }\r\n                },\r\n                rotate: 20,\r\n                margin: 10\r\n              }\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              name: `${echartData.y1.name} m`,\r\n              type: \"value\",\r\n              axisLabel: {\r\n                formatter: \"{value} \"\r\n              },\r\n              scale: true\r\n              // max: echartData.y1.max,\r\n              // min: echartData.y1.min\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: echartData.y1.name,\r\n              type: \"line\",\r\n              data: echartData.y1.list\r\n            }\r\n          ]\r\n        });\r\n      }\r\n    },\r\n    // 加载站点数据\r\n    loadSiteData(data) {\r\n      this.siteInfo = data;\r\n    },\r\n    // 组件加载中\r\n    componentLoading() {\r\n      this.boxLoading = true;\r\n    },\r\n    // 取消组件加载\r\n    cancelComponentLoading() {\r\n      this.boxLoading = false;\r\n    },\r\n    // 处理页码切换_水情数据\r\n    handleCurrentChange_shuiqing(index) {\r\n      this.table[\"shuiqing\"].currentPage = index;\r\n      this.search_shuiqing();\r\n    },\r\n    // 处理页码切换_关系曲线\r\n    handleCurrentChange_guanxiquxian(index) {\r\n      this.table[\"guanxiquxian\"].currentPage = index;\r\n      this.search_guanxiquxian();\r\n    },\r\n    // 处理页码切换_特征水位\r\n    handleCurrentChange_tezhengshuiqing() {\r\n      this.table[\"tezhengshuiqing\"].currentPage = index;\r\n      this.search_tezhengshuiqing();\r\n    },\r\n    // 处理每页显示条数切换_水情数据\r\n    handleSizeChange_shuiqing(pageSizes) {\r\n      this.table[\"shuiqing\"].pageSizes = pageSizes;\r\n      this.table[\"shuiqing\"].currentPage = 1;\r\n      this.search_shuiqing();\r\n    },\r\n    // 处理每页显示条数切换_关系曲线\r\n    handleSizeChange_guanxiquxian(pageSizes) {\r\n      this.table[\"guanxiquxian\"].pageSizes = pageSizes;\r\n      this.table[\"guanxiquxian\"].currentPage = 1;\r\n      this.search_guanxiquxian();\r\n    },\r\n    // 处理每页显示条数切换_特征水位\r\n    handleSizeChange_tezhengshuiqing(pageSizes) {\r\n      this.table[\"tezhengshuiqing\"].pageSizes = pageSizes;\r\n      this.table[\"tezhengshuiqing\"].currentPage = 1;\r\n      this.search_tezhengshuiqing();\r\n    },\r\n    // 分页过滤\r\n    pageFilter(currentPage, pageSizes, tableName) {\r\n      // 截取数组\r\n      var newList = this.table[tableName].Rows_filter.slice(\r\n        (currentPage - 1) * pageSizes,\r\n        currentPage * pageSizes\r\n      );\r\n\r\n      return newList;\r\n    },\r\n    // 水情历史数据表 当前正在激活的表头\r\n    setActiveColumns_shuiqing(tableType) {\r\n      this.table.shuiqing.activeColumns = this.table.shuiqing.columns[\r\n            tableType\r\n            ];\r\n      this.select.shuiqing_select = tableType;\r\n      console.log('这个又是啥',this.table.shuiqing);\r\n    },\r\n    // 切换 水情历史数据表类型\r\n    tableTypeOnChange_shuiqing(tableType) {\r\n      this.table[\"shuiqing\"].currentPage = 1;\r\n      this.table[\"shuiqing\"].date = null;\r\n      this.table[\"shuiqing\"].sort = null;\r\n      this.setDatePickerType_shuiqing(tableType); // 设置日期时间选择器的类型\r\n      // this.select[\"shuiqing_select\"] = tableType; // 设置选中的表\r\n      // this.setSelectOption_quickSearch(tableType); // 设置数据表快速查询选择框内容\r\n      this.setActiveColumns_shuiqing(tableType); // 设置水情历史数据表 当前激活的表头\r\n      console.log(this.table.shuiqing.activeColumns);\r\n      this.table.shuiqing.loading = true; // 表格加载中\r\n      if (this[`setTableDefaultDate_shuiqing_${tableType}`]) {\r\n        this[`setTableDefaultDate_shuiqing_${tableType}`]();\r\n        console.log(this[`setTableDefaultDate_shuiqing_${tableType}`]);;\r\n      }\r\n      // 获取对应水情历史数据表的数据\r\n      this.search_shuiqing(tableType);\r\n    },\r\n    // 设置水情数据历史表默认查询日期\r\n    setTableDefaultDate_shuiqing_historyTable() {\r\n      const end = new Date();\r\n      const start = zeroPointOfTheDay();\r\n\r\n      var timeSlot = [start, end];\r\n\r\n      this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n      function zeroPointOfTheDay() {\r\n        var date = new Date();\r\n        date.setHours(0);\r\n        date.setMinutes(0);\r\n        date.setSeconds(0);\r\n        date.setMilliseconds(0);\r\n        return date;\r\n      }\r\n    },\r\n    // 设置水情数据小时表默认查询日期\r\n    setTableDefaultDate_shuiqing_hourTable() {\r\n      const end = new Date();\r\n      const start = zeroPointOfTheDay();\r\n\r\n      var timeSlot = [start, end];\r\n\r\n      this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n      function zeroPointOfTheDay() {\r\n        var date = new Date();\r\n        date.setHours(0);\r\n        date.setMinutes(0);\r\n        date.setSeconds(0);\r\n        date.setMilliseconds(0);\r\n        return date;\r\n      }\r\n    },\r\n    // 设置水情数据日表默认查询日期\r\n    setTableDefaultDate_shuiqing_dayTable() {\r\n      const end = new Date();\r\n      const start = new Date();\r\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\r\n\r\n      var timeSlot = [start, end];\r\n\r\n      this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n      function zeroPointOfTheDay() {\r\n        var date = new Date();\r\n        date.setHours(0);\r\n        date.setMinutes(0);\r\n        date.setSeconds(0);\r\n        date.setMilliseconds(0);\r\n        return date;\r\n      }\r\n    },\r\n    // 设置水情数据月表默认查询日期\r\n    setTableDefaultDate_shuiqing_monthTable() {\r\n      const end = new Date();\r\n      const start = new Date();\r\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 160);\r\n\r\n      var timeSlot = [start, end];\r\n\r\n      this.setTableDate(\"shuiqing\", timeSlot);\r\n\r\n      function zeroPointOfTheDay() {\r\n        var date = new Date();\r\n        date.setHours(0);\r\n        date.setMinutes(0);\r\n        date.setSeconds(0);\r\n        date.setMilliseconds(0);\r\n        return date;\r\n      }\r\n    },\r\n    // 设置日期时间选择器的类型\r\n    setDatePickerType_shuiqing(tableType) {\r\n      var datePickerType;\r\n      switch (tableType) {\r\n        case \"historyTable\":\r\n          datePickerType = \"datetimerange\";\r\n          break;\r\n        case \"hourTable\":\r\n          datePickerType = \"datetimerange\";\r\n          break;\r\n        case \"dayTable\":\r\n          datePickerType = \"daterange\";\r\n          break;\r\n        case \"monthTable\":\r\n          datePickerType = \"monthrange\";\r\n          break;\r\n      }\r\n      this.table[\"shuiqing\"].datePickerType = datePickerType;\r\n      console.log(this.table[\"shuiqing\"]);\r\n    },\r\n    // 设置数据表快速查询选择框内容\r\n    setSelectOption_quickSearch(tableType) {\r\n      this.select.activeQuickSearchList = this.select.quickSearch[tableType];\r\n      this.select.select = this.select.activeQuickSearchList[0]\r\n        ? this.select.activeQuickSearchList[0].value\r\n        : null; // 设置默认值为第一项\r\n    },\r\n\r\n\r\n\r\n    // 获取特征水位表格的数据\r\n    getTableData_tezhengshuiqing(\r\n      pageSizes,\r\n      currentPage,\r\n      body,\r\n      callback,\r\n      callback_beforeFilter\r\n    ) {\r\n      this.axios\r\n        .get(\r\n          `/guanqu/admin/ST_G_CQORD?_page_size=${pageSizes ||\r\n            20}&_page=${currentPage || 1}`,\r\n          {\r\n            params: body\r\n          }\r\n        )\r\n        .then(res => {\r\n          if (typeof callback_beforeFilter == \"function\") {\r\n            callback_beforeFilter({\r\n              data: res.data.rows || [],\r\n              total: res.data.total || 0\r\n            });\r\n          }\r\n          console.log(\"tezhengshuiqing\", res);\r\n          // 水情数据过滤\r\n          var data = res.data.rows.map(val => {\r\n            val.currentPage = this.table.shuiqing.currentPage; // 添加数据当前页码\r\n            val.pageSizes = this.table.shuiqing.pageSizes; // 添加当前每页条数到数据\r\n            val.TMMXQ = this.dateFilter(val.TMMXQ); // 日期过滤\r\n            val.TMXQ = this.Z_Filter(val.TMXQ, 3); // 平均流量过滤\r\n            val.YMXQZ = this.Z_Filter(val.YMXQZ); // 平均水位过滤\r\n            val.WQ = this.Z_Filter(val.WQ, 3); // 小时累计水量过滤\r\n\r\n            return val;\r\n          });\r\n          if (typeof callback == \"function\") {\r\n            callback({\r\n              data: data,\r\n              total: res.data.total\r\n            });\r\n          }\r\n        });\r\n    },\r\n    // 获取特征水位预警信息表的数据\r\n    getTableData_tezhengshuiqing_Alarm(body, callback, callback_beforeFilter) {\r\n      this.axios\r\n        .get(`/guanqu/admin/ST_Canal_Alarm`, {\r\n          params: body\r\n        })\r\n        .then(res => {\r\n          var data = res.data.rows;\r\n          if (typeof callback_beforeFilter == \"function\") {\r\n            callback_beforeFilter(res);\r\n          }\r\n          // 水情数据过滤\r\n          var data = res.data.rows.map(val => {\r\n            val.Q = this.Z_Filter(val.Q, 3); // 流量过滤\r\n            val.Z = this.Z_Filter(val.Z); // 水位过滤\r\n            val.JYQ = this.Z_Filter(val.JYQ, 3); // 预警流量过滤\r\n            val.JYZ = this.Z_Filter(val.JYZ); // 预警水位过滤\r\n\r\n            return val;\r\n          });\r\n          if (typeof callback == \"function\") {\r\n            callback(data);\r\n          }\r\n        });\r\n    },\r\n    // 更新 XX 表格的数据\r\n    setTableData(tableName, data) {\r\n      this.table[tableName].Rows_filter = data;\r\n    },\r\n    // 获取对应关系曲线数据表的数据\r\n    getTableData_guanxiquxian(callback) {\r\n      this.axios\r\n        .get(`/guanqu/admin/ST_ZQRL_B`, {\r\n          params: {\r\n            STCD: this.info.STCD\r\n          }\r\n        })\r\n        .then(res => {\r\n          var data = res.data.rows;\r\n          if (typeof callback == \"function\") {\r\n            callback(data);\r\n          }\r\n        });\r\n    },\r\n    // 更新水情历史数据表的数据\r\n    setTableData_guanxiquxian(data) {\r\n      this.table.guanxiquxian.Rows_filter = data;\r\n    },\r\n    // 根据关联编号获取关联站点\r\n    getRelateSiteByRelateCode(callback) {\r\n      var RELATECODE = this.info.RELATECODE;\r\n      if (RELATECODE && RELATECODE != 0) {\r\n        this.axios\r\n          .get(`/guanqu/admin/ST_STBPRP_B`, {\r\n            params: {\r\n              RELATECODE: RELATECODE\r\n            }\r\n          })\r\n          .then(res => {\r\n            var data = res.data.rows;\r\n            if (typeof callback == \"function\") {\r\n              callback(data);\r\n            }\r\n          });\r\n      }\r\n    },\r\n    // 根据行政区划编码获取行政区划\r\n    getCompartmentByADDVCD(callback) {\r\n      var ADDVCD = this.info.rowinfo.ADDVCD;\r\n      if (ADDVCD && ADDVCD != \"\") {\r\n        this.axios\r\n          .get(`/guanqu/admin/WRP_AD_B`, {\r\n            params: {\r\n              AD_CD: ADDVCD\r\n            }\r\n          })\r\n          .then(res => {\r\n            var data = res.data.rows;\r\n            if (typeof callback == \"function\") {\r\n              callback(data);\r\n            }\r\n          });\r\n      }\r\n    },\r\n    // 特征水位表格查询\r\n    search_tezhengshuiqing() {\r\n      this.letTableLoading(\"tezhengshuiqing\"); // 表格加载中\r\n      // 传递站码参数\r\n      var body = {\r\n        STCD: this.siteInfo.STCD,\r\n        _page: this.table.tezhengshuiqing.currentPage,\r\n        _page_size: this.table.tezhengshuiqing.pageSizes\r\n      };\r\n\r\n      if (this.table.tezhengshuiqing.date) {\r\n        body.YR = this.$FilterData.elDatePicker_Filter(\r\n          this.table.tezhengshuiqing.date,\r\n          \"maxQTable\"\r\n        );\r\n      }\r\n\r\n      this.$GetData.Survey_History_HDSQ(\r\n        \"maxQTable\",\r\n        body,\r\n        {\r\n          default: true,\r\n          myFilter: data => {\r\n            data.map(val => {\r\n              val.currentPage = body._page;\r\n              val.pageSizes = body._page_size;\r\n              return val;\r\n            });\r\n            return data;\r\n          }\r\n        },\r\n        data => {\r\n          this.setTableTotal(\"tezhengshuiqing\", data.total); // 根据返回的total数量, 设置表格总条数\r\n          this.setTableData(\"tezhengshuiqing\", data.data); // 更新特征水位数据表的数据\r\n          this.cancelTableLoading(\"tezhengshuiqing\"); // 取消表格加载\r\n        }\r\n      );\r\n\r\n      // // 获取特征水位表格数据\r\n      // this.getTableData_tezhengshuiqing(pageSizes, currentPage, body, data => {\r\n\r\n      // });\r\n    },\r\n    // 设置特征水位预警信息数据\r\n    setAlarmData_tezhengshuiqing(data) {\r\n      this.table.tezhengshuiqing.alarmData = data;\r\n    },\r\n    // 处理日期时间选择器确定事件_水情数据\r\n    handleDatePickerChange(item) {\r\n      this.table.shuiqing.currentPage = 1;\r\n      this.search_shuiqing();\r\n    },\r\n    handleDatePickerChange_tezhengshuiqing() {\r\n      this.table.tezhengshuiqing.currentPage = 1;\r\n      this.search_tezhengshuiqing();\r\n    },\r\n    handleDatePickerChange_guanxiquxian(item) {\r\n      console.log(\"item\", item);\r\n      this.search_guanxiquxian();\r\n    },\r\n    // 设置 xx表格 时间选择器值\r\n    setTableDate(tableName, val) {\r\n      this.table[tableName].date = val;\r\n    },\r\n    // 特征水情表默认查询时间\r\n    setTableDefaultDate_tezhengshuiqing() {\r\n      const end = new Date();\r\n      const start = new Date();\r\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 365 * 5);\r\n\r\n      var timeSlot = [start, end];\r\n\r\n      this.setTableDate(\"tezhengshuiqing\", timeSlot);\r\n    },\r\n    // 排序\r\n    sort_change_shuiqing(item) {\r\n      this.table.shuiqing.sort = item;\r\n\r\n      this.search_shuiqing();\r\n    }\r\n  },\r\n  mounted() {\r\n    // 组件加载中\r\n    this.componentLoading();\r\n    // 获取详情数据\r\n    this.axios\r\n      .get(`/guanqu/table/details?ID=${this.info.rowinfo.STCD}&pk=STCD`)\r\n      .then(res => {\r\n        console.log(res);\r\n        //获取预警数据\r\n        this.axios\r\n          .get(\"/guanqu/table/ST_RIVER_Alarm?STCD=\" + this.info.rowinfo.STCD)\r\n          .then(res => {\r\n            this.yujingdata = res.data.list[0];\r\n\r\n            console.log(res);\r\n            this.yujingdata.AWL = this.Z_Filter(this.yujingdata.AWL);\r\n          });\r\n\r\n        // 站点信息\r\n        // 根据关联编号获取关联站点\r\n        this.getRelateSiteByRelateCode(data => {\r\n          console.log(\"RelateSite\", data);\r\n        });\r\n        // 根据行政区划码获取行政区划名\r\n        this.getCompartmentByADDVCD(data => {\r\n          this.siteInfo.AD_NM = data[0].AD_NM;\r\n        });\r\n\r\n        // 根据河流编码获取河流名\r\n        this.$GetData.Base_R_I(\r\n          {\r\n            RVCD: this.info.rowinfo.RVCD\r\n          },\r\n          true,\r\n          data => {\r\n            this.siteInfo.RVCD = data.data[0].RVNM;\r\n          }\r\n        );\r\n\r\n        // 根据流域编码获取流域名\r\n        this.$GetData.Base_B_I(\r\n          {\r\n            CTCD: this.info.rowinfo.CTCD\r\n          },\r\n          true,\r\n          data => {\r\n            this.siteInfo.CTCD = data.data[0].CTNM;\r\n          }\r\n        );\r\n\r\n        // 加载站点数据\r\n        this.loadSiteData(res.data);\r\n        // 加载取消\r\n        this.cancelComponentLoading();\r\n        // 水情数据\r\n        this.tableTypeOnChange_shuiqing(this.info.rowinfo.tableType.hdsq); // 设置 默认的水情历史数据表\r\n          // console.log('这到底什么东西啊',search_guanxiquxian());\r\n        // 关系曲线\r\n        this.search_guanxiquxian();\r\n        // 特征水位最大流量表数据\r\n        if (this.setTableDefaultDate_tezhengshuiqing) {\r\n          this.setTableDefaultDate_tezhengshuiqing(); // 默认查询日期\r\n        }\r\n        this.search_tezhengshuiqing();\r\n        // 特征水位预警信息表数据\r\n        this.getTableData_tezhengshuiqing_Alarm(\r\n          {\r\n            STCD: this.siteInfo.STCD\r\n          },\r\n          data => {\r\n            this.setAlarmData_tezhengshuiqing(data[0]);\r\n          }\r\n        );\r\n      });\r\n    console.log('info',this.info);\r\n  }\r\n};\r\n",null]}